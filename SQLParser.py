# Generated from SQLParser.g4 by ANTLR 4.7.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00ff")
        buf.write("\u08e9\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\3\2\6\2\u012e\n\2\r\2\16\2\u012f\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3\u013a\n\3\3\4\3\4\3\4")
        buf.write("\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u0146\n\4\3\5\3\5\3\5")
        buf.write("\3\5\5\5\u014c\n\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6")
        buf.write("\u0156\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u0169\n\7\3\b\3\b\3\b\3\b")
        buf.write("\3\b\5\b\u0170\n\b\3\b\3\b\7\b\u0174\n\b\f\b\16\b\u0177")
        buf.write("\13\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u0181\n\t\3")
        buf.write("\n\3\n\5\n\u0185\n\n\3\13\3\13\3\13\3\13\3\13\3\13\5\13")
        buf.write("\u018d\n\13\3\f\3\f\3\f\5\f\u0192\n\f\3\r\3\r\3\r\3\r")
        buf.write("\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5")
        buf.write("\r\u01a5\n\r\3\16\3\16\5\16\u01a9\n\16\3\17\3\17\3\17")
        buf.write("\3\20\3\20\5\20\u01b0\n\20\3\21\3\21\3\21\3\22\3\22\5")
        buf.write("\22\u01b7\n\22\3\23\3\23\3\23\3\23\3\24\3\24\5\24\u01bf")
        buf.write("\n\24\3\25\3\25\3\25\3\26\3\26\5\26\u01c6\n\26\3\27\3")
        buf.write("\27\3\27\3\27\3\30\3\30\5\30\u01ce\n\30\3\31\3\31\3\31")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\32\7\32\u01d9\n\32\f\32\16")
        buf.write("\32\u01dc\13\32\3\33\3\33\3\33\3\33\3\33\3\33\7\33\u01e4")
        buf.write("\n\33\f\33\16\33\u01e7\13\33\3\34\3\34\3\34\3\35\3\35")
        buf.write("\3\35\5\35\u01ef\n\35\3\36\3\36\3\36\3\36\3\36\3\36\3")
        buf.write("\36\3\36\3\36\5\36\u01fa\n\36\3\37\3\37\3 \3 \3 \5 \u0201")
        buf.write("\n \3 \3 \3 \7 \u0206\n \f \16 \u0209\13 \3!\3!\3!\3!")
        buf.write("\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\5!\u021b\n!\3\"\3")
        buf.write("\"\5\"\u021f\n\"\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u022b")
        buf.write("\n#\3$\3$\3$\3$\3$\3$\3$\5$\u0234\n$\3%\3%\3%\3&\3&\3")
        buf.write("&\3&\3&\3&\3&\3&\3&\5&\u0242\n&\3\'\3\'\3\'\3\'\5\'\u0248")
        buf.write("\n\'\3(\3(\3(\5(\u024d\n(\3)\3)\3)\3)\3)\7)\u0254\n)\f")
        buf.write(")\16)\u0257\13)\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3")
        buf.write("*\5*\u0266\n*\3+\3+\3+\5+\u026b\n+\3,\3,\3,\3,\3,\7,\u0272")
        buf.write("\n,\f,\16,\u0275\13,\3-\3-\3-\3-\3-\3-\5-\u027d\n-\3.")
        buf.write("\3.\3.\3.\3.\3.\7.\u0285\n.\f.\16.\u0288\13.\3/\3/\3/")
        buf.write("\5/\u028d\n/\3\60\3\60\5\60\u0291\n\60\3\61\3\61\3\61")
        buf.write("\3\61\3\61\3\61\7\61\u0299\n\61\f\61\16\61\u029c\13\61")
        buf.write("\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62")
        buf.write("\3\62\3\62\3\62\3\62\3\62\3\62\7\62\u02af\n\62\f\62\16")
        buf.write("\62\u02b2\13\62\3\63\3\63\5\63\u02b6\n\63\3\64\3\64\3")
        buf.write("\64\3\64\3\64\3\64\5\64\u02be\n\64\3\65\3\65\3\65\3\65")
        buf.write("\3\65\3\65\3\65\3\65\3\65\5\65\u02c9\n\65\3\66\3\66\3")
        buf.write("\66\3\66\3\66\3\66\3\66\3\66\5\66\u02d3\n\66\3\67\3\67")
        buf.write("\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\5\67\u02df\n")
        buf.write("\67\38\38\38\38\38\38\78\u02e7\n8\f8\168\u02ea\138\39")
        buf.write("\39\39\39\39\59\u02f1\n9\3:\3:\3:\3:\3:\3:\3:\3:\5:\u02fb")
        buf.write("\n:\3;\3;\3;\3;\3;\3<\3<\3<\3<\5<\u0306\n<\3=\3=\5=\u030a")
        buf.write("\n=\3>\3>\3>\3>\3>\7>\u0311\n>\f>\16>\u0314\13>\3?\3?")
        buf.write("\5?\u0318\n?\3@\3@\5@\u031c\n@\3A\3A\3A\3A\3A\3B\3B\3")
        buf.write("B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3")
        buf.write("B\3B\3B\3B\3B\3B\3B\3B\3B\3B\5B\u0341\nB\3B\3B\3B\3B\3")
        buf.write("B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3")
        buf.write("B\3B\3B\3B\3B\3B\7B\u035f\nB\fB\16B\u0362\13B\3C\3C\3")
        buf.write("C\7C\u0367\nC\fC\16C\u036a\13C\3D\3D\3D\5D\u036f\nD\3")
        buf.write("E\3E\5E\u0373\nE\3F\3F\3G\3G\3G\3G\3G\5G\u037c\nG\3H\3")
        buf.write("H\5H\u0380\nH\3I\3I\3I\3I\3I\3I\3I\5I\u0389\nI\3J\3J\3")
        buf.write("J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3")
        buf.write("J\5J\u03a0\nJ\3K\3K\3L\3L\3L\3L\3L\3L\3L\3L\3L\5L\u03ad")
        buf.write("\nL\3M\3M\3M\3M\3M\3M\7M\u03b5\nM\fM\16M\u03b8\13M\3N")
        buf.write("\3N\3N\3N\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3")
        buf.write("O\3O\3O\3O\3O\3O\3O\3O\3O\5O\u03d5\nO\3P\3P\3P\3P\3P\3")
        buf.write("P\3P\7P\u03de\nP\fP\16P\u03e1\13P\3Q\3Q\3Q\3Q\3Q\3Q\3")
        buf.write("Q\3Q\3Q\7Q\u03ec\nQ\fQ\16Q\u03ef\13Q\3R\3R\3R\5R\u03f4")
        buf.write("\nR\3S\3S\3S\3S\3S\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3")
        buf.write("T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\5T\u0414\nT\3")
        buf.write("U\3U\3U\3U\3U\5U\u041b\nU\3V\3V\3V\3V\3V\3V\3V\3V\3V\7")
        buf.write("V\u0426\nV\fV\16V\u0429\13V\3W\3W\5W\u042d\nW\3X\3X\3")
        buf.write("X\3X\3X\5X\u0434\nX\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\7")
        buf.write("Y\u0441\nY\fY\16Y\u0444\13Y\3Z\3Z\3Z\5Z\u0449\nZ\3Z\3")
        buf.write("Z\3Z\3Z\3Z\3Z\7Z\u0451\nZ\fZ\16Z\u0454\13Z\3[\3[\3[\3")
        buf.write("[\3[\3[\3[\3[\3[\5[\u045f\n[\3[\3[\3[\3[\3[\3[\3[\3[\3")
        buf.write("[\3[\3[\3[\7[\u046d\n[\f[\16[\u0470\13[\3\\\3\\\3\\\3")
        buf.write("\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\")
        buf.write("\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\5\\\u048b\n\\\3]\3]\3")
        buf.write("]\3]\3]\3]\3]\3]\3]\3^\3^\3^\3^\3^\3^\3^\5^\u049d\n^\3")
        buf.write("_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\5_\u04aa\n_\3_\3_\3_\3")
        buf.write("_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\7_\u04ba\n_\f_\16_\u04bd")
        buf.write("\13_\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\5`\u04c9\n`\3a\3a\3")
        buf.write("a\5a\u04ce\na\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3")
        buf.write("b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3")
        buf.write("b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3")
        buf.write("b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\7b\u0511")
        buf.write("\nb\fb\16b\u0514\13b\3b\3b\3b\3b\7b\u051a\nb\fb\16b\u051d")
        buf.write("\13b\3b\3b\3b\3b\3b\3b\3b\7b\u0526\nb\fb\16b\u0529\13")
        buf.write("b\3b\5b\u052c\nb\3b\3b\3b\3b\5b\u0532\nb\3c\3c\3c\3c\3")
        buf.write("c\3c\7c\u053a\nc\fc\16c\u053d\13c\3d\3d\3d\3d\3d\3d\3")
        buf.write("d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3")
        buf.write("d\3d\3d\3d\3d\3d\3d\3d\5d\u055f\nd\3e\3e\3e\3e\3e\3e\3")
        buf.write("e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3")
        buf.write("e\3e\3e\3e\3e\3e\3e\3e\3e\3e\7e\u0583\ne\fe\16e\u0586")
        buf.write("\13e\3f\3f\3f\3f\3f\3f\3f\3f\3f\5f\u0591\nf\3g\3g\5g\u0595")
        buf.write("\ng\3h\3h\3h\3h\3h\7h\u059c\nh\fh\16h\u059f\13h\3i\3i")
        buf.write("\3i\3i\3i\3i\3i\3i\7i\u05a9\ni\fi\16i\u05ac\13i\3j\3j")
        buf.write("\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3")
        buf.write("j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3")
        buf.write("j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3")
        buf.write("j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3")
        buf.write("j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3")
        buf.write("j\3j\3j\3j\5j\u060d\nj\3k\3k\3k\3k\3k\3k\7k\u0615\nk\f")
        buf.write("k\16k\u0618\13k\3l\3l\3l\3l\3m\3m\3m\5m\u0621\nm\3n\3")
        buf.write("n\5n\u0625\nn\3o\3o\3o\3p\3p\3p\3p\3p\3p\7p\u0630\np\f")
        buf.write("p\16p\u0633\13p\3q\3q\3q\3q\3q\3q\5q\u063b\nq\3r\3r\3")
        buf.write("r\3r\3r\3r\7r\u0643\nr\fr\16r\u0646\13r\3s\3s\5s\u064a")
        buf.write("\ns\3t\3t\3t\3t\3t\3t\7t\u0652\nt\ft\16t\u0655\13t\3u")
        buf.write("\3u\3u\3v\3v\3v\7v\u065d\nv\fv\16v\u0660\13v\3v\3v\5v")
        buf.write("\u0664\nv\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3")
        buf.write("w\5w\u0675\nw\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\7w\u0683")
        buf.write("\nw\fw\16w\u0686\13w\3x\3x\3x\3x\3x\5x\u068d\nx\3x\3x")
        buf.write("\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3")
        buf.write("x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3")
        buf.write("x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3")
        buf.write("x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3")
        buf.write("x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3")
        buf.write("x\7x\u06eb\nx\fx\16x\u06ee\13x\3y\3y\3y\5y\u06f3\ny\3")
        buf.write("z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3")
        buf.write("z\3z\3z\3z\3z\3z\3z\5z\u070e\nz\3z\3z\3z\3z\3z\3z\3z\3")
        buf.write("z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3")
        buf.write("z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\7z\u0734\nz\fz\16z\u0737")
        buf.write("\13z\3{\3{\3{\3{\3{\3{\3{\5{\u0740\n{\3|\3|\3|\7|\u0745")
        buf.write("\n|\f|\16|\u0748\13|\3}\3}\3}\3}\3}\5}\u074f\n}\3~\3~")
        buf.write("\3~\3~\3~\5~\u0756\n~\3\177\3\177\3\177\3\177\3\177\3")
        buf.write("\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3")
        buf.write("\177\3\177\3\177\3\177\3\177\5\177\u076b\n\177\3\u0080")
        buf.write("\3\u0080\3\u0080\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\7\u0081\u0775\n\u0081\f\u0081\16\u0081\u0778\13\u0081")
        buf.write("\3\u0082\3\u0082\5\u0082\u077c\n\u0082\3\u0083\3\u0083")
        buf.write("\3\u0084\3\u0084\3\u0085\3\u0085\3\u0086\3\u0086\5\u0086")
        buf.write("\u0786\n\u0086\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087")
        buf.write("\3\u0087\3\u0087\3\u0087\7\u0087\u0790\n\u0087\f\u0087")
        buf.write("\16\u0087\u0793\13\u0087\3\u0087\3\u0087\3\u0087\3\u0087")
        buf.write("\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\5\u0087")
        buf.write("\u079f\n\u0087\3\u0088\3\u0088\3\u0089\3\u0089\5\u0089")
        buf.write("\u07a5\n\u0089\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\3\u008a\5\u008a\u0889\n\u008a")
        buf.write("\3\u008b\3\u008b\5\u008b\u088d\n\u008b\3\u008c\3\u008c")
        buf.write("\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c")
        buf.write("\3\u008c\3\u008c\3\u008c\7\u008c\u089b\n\u008c\f\u008c")
        buf.write("\16\u008c\u089e\13\u008c\3\u008d\3\u008d\3\u008d\5\u008d")
        buf.write("\u08a3\n\u008d\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e")
        buf.write("\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e")
        buf.write("\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\5\u008e\u08b6")
        buf.write("\n\u008e\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f")
        buf.write("\5\u008f\u08be\n\u008f\3\u0090\3\u0090\3\u0090\3\u0090")
        buf.write("\3\u0090\3\u0090\3\u0090\5\u0090\u08c7\n\u0090\3\u0091")
        buf.write("\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091")
        buf.write("\3\u0091\3\u0091\5\u0091\u08d3\n\u0091\3\u0092\3\u0092")
        buf.write("\3\u0093\3\u0093\3\u0093\3\u0094\3\u0094\3\u0094\3\u0094")
        buf.write("\3\u0094\3\u0094\3\u0095\3\u0095\3\u0095\3\u0095\3\u0096")
        buf.write("\3\u0096\3\u0096\5\u0096\u08e7\n\u0096\3\u0096\2#\16\62")
        buf.write("\64>PVZ`bnz\u0082\u0098\u009e\u00a0\u00aa\u00b0\u00b2")
        buf.write("\u00b4\u00bc\u00c4\u00c8\u00ce\u00d0\u00d4\u00de\u00e2")
        buf.write("\u00e6\u00ec\u00ee\u00f2\u0100\u0116\u0097\2\4\6\b\n\f")
        buf.write("\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@")
        buf.write("BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086")
        buf.write("\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098")
        buf.write("\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa")
        buf.write("\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc")
        buf.write("\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce")
        buf.write("\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0")
        buf.write("\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2")
        buf.write("\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104")
        buf.write("\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116")
        buf.write("\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128")
        buf.write("\u012a\2\n\4\2MMtt\4\2CCKK\4\2\30\30\u0085\u0085$\2\3")
        buf.write("\3\5\6\b\n\f\f\16\22\24\24\26\30\34#&)+,..\61\62\64;=")
        buf.write("HJUWXZ\\__bceehknnqvxz}}\u0080\u0085\u0087\u0087\u0089")
        buf.write("\u0089\u008c\u008f\u0091\u0092\u0094\u0099\u009b\u009d")
        buf.write("\u009f\u00a0\u00e6\u00e7!\2\4\4\7\7\13\13\r\r\23\23\25")
        buf.write("\25\31\33**--/\60\63\63<<VVYY]^``ddfflmopww{|~\177\u0086")
        buf.write("\u0086\u0088\u0088\u008a\u008b\u0090\u0090\u0093\u0093")
        buf.write("\u009a\u009a\u009e\u009e\u00c9\u00ca\13\2\33\37<?VVY[")
        buf.write("^^oowx\u009a\u009a\u009e\u009f\5\2@@NN\u00a2\u00a2\3\2")
        buf.write("\u00a1\u00c8\2\u09b3\2\u012d\3\2\2\2\4\u0139\3\2\2\2\6")
        buf.write("\u0145\3\2\2\2\b\u014b\3\2\2\2\n\u0155\3\2\2\2\f\u0168")
        buf.write("\3\2\2\2\16\u016f\3\2\2\2\20\u0180\3\2\2\2\22\u0184\3")
        buf.write("\2\2\2\24\u018c\3\2\2\2\26\u0191\3\2\2\2\30\u01a4\3\2")
        buf.write("\2\2\32\u01a8\3\2\2\2\34\u01aa\3\2\2\2\36\u01af\3\2\2")
        buf.write("\2 \u01b1\3\2\2\2\"\u01b6\3\2\2\2$\u01b8\3\2\2\2&\u01be")
        buf.write("\3\2\2\2(\u01c0\3\2\2\2*\u01c5\3\2\2\2,\u01c7\3\2\2\2")
        buf.write(".\u01cd\3\2\2\2\60\u01cf\3\2\2\2\62\u01d2\3\2\2\2\64\u01dd")
        buf.write("\3\2\2\2\66\u01e8\3\2\2\28\u01ee\3\2\2\2:\u01f9\3\2\2")
        buf.write("\2<\u01fb\3\2\2\2>\u0200\3\2\2\2@\u021a\3\2\2\2B\u021e")
        buf.write("\3\2\2\2D\u022a\3\2\2\2F\u0233\3\2\2\2H\u0235\3\2\2\2")
        buf.write("J\u0241\3\2\2\2L\u0247\3\2\2\2N\u024c\3\2\2\2P\u024e\3")
        buf.write("\2\2\2R\u0265\3\2\2\2T\u026a\3\2\2\2V\u026c\3\2\2\2X\u027c")
        buf.write("\3\2\2\2Z\u027e\3\2\2\2\\\u028c\3\2\2\2^\u0290\3\2\2\2")
        buf.write("`\u0292\3\2\2\2b\u029d\3\2\2\2d\u02b5\3\2\2\2f\u02bd\3")
        buf.write("\2\2\2h\u02c8\3\2\2\2j\u02d2\3\2\2\2l\u02de\3\2\2\2n\u02e0")
        buf.write("\3\2\2\2p\u02f0\3\2\2\2r\u02fa\3\2\2\2t\u02fc\3\2\2\2")
        buf.write("v\u0305\3\2\2\2x\u0309\3\2\2\2z\u030b\3\2\2\2|\u0317\3")
        buf.write("\2\2\2~\u031b\3\2\2\2\u0080\u031d\3\2\2\2\u0082\u0340")
        buf.write("\3\2\2\2\u0084\u0363\3\2\2\2\u0086\u036e\3\2\2\2\u0088")
        buf.write("\u0372\3\2\2\2\u008a\u0374\3\2\2\2\u008c\u037b\3\2\2\2")
        buf.write("\u008e\u037f\3\2\2\2\u0090\u0388\3\2\2\2\u0092\u039f\3")
        buf.write("\2\2\2\u0094\u03a1\3\2\2\2\u0096\u03ac\3\2\2\2\u0098\u03ae")
        buf.write("\3\2\2\2\u009a\u03b9\3\2\2\2\u009c\u03d4\3\2\2\2\u009e")
        buf.write("\u03d6\3\2\2\2\u00a0\u03e2\3\2\2\2\u00a2\u03f3\3\2\2\2")
        buf.write("\u00a4\u03f5\3\2\2\2\u00a6\u0413\3\2\2\2\u00a8\u041a\3")
        buf.write("\2\2\2\u00aa\u041c\3\2\2\2\u00ac\u042c\3\2\2\2\u00ae\u0433")
        buf.write("\3\2\2\2\u00b0\u0435\3\2\2\2\u00b2\u0448\3\2\2\2\u00b4")
        buf.write("\u045e\3\2\2\2\u00b6\u048a\3\2\2\2\u00b8\u048c\3\2\2\2")
        buf.write("\u00ba\u049c\3\2\2\2\u00bc\u04a9\3\2\2\2\u00be\u04c8\3")
        buf.write("\2\2\2\u00c0\u04cd\3\2\2\2\u00c2\u0531\3\2\2\2\u00c4\u0533")
        buf.write("\3\2\2\2\u00c6\u055e\3\2\2\2\u00c8\u0560\3\2\2\2\u00ca")
        buf.write("\u0590\3\2\2\2\u00cc\u0594\3\2\2\2\u00ce\u0596\3\2\2\2")
        buf.write("\u00d0\u05a0\3\2\2\2\u00d2\u060c\3\2\2\2\u00d4\u060e\3")
        buf.write("\2\2\2\u00d6\u0619\3\2\2\2\u00d8\u0620\3\2\2\2\u00da\u0624")
        buf.write("\3\2\2\2\u00dc\u0626\3\2\2\2\u00de\u0629\3\2\2\2\u00e0")
        buf.write("\u063a\3\2\2\2\u00e2\u063c\3\2\2\2\u00e4\u0649\3\2\2\2")
        buf.write("\u00e6\u064b\3\2\2\2\u00e8\u0656\3\2\2\2\u00ea\u0663\3")
        buf.write("\2\2\2\u00ec\u0674\3\2\2\2\u00ee\u068c\3\2\2\2\u00f0\u06f2")
        buf.write("\3\2\2\2\u00f2\u070d\3\2\2\2\u00f4\u073f\3\2\2\2\u00f6")
        buf.write("\u0741\3\2\2\2\u00f8\u074e\3\2\2\2\u00fa\u0755\3\2\2\2")
        buf.write("\u00fc\u076a\3\2\2\2\u00fe\u076c\3\2\2\2\u0100\u076f\3")
        buf.write("\2\2\2\u0102\u077b\3\2\2\2\u0104\u077d\3\2\2\2\u0106\u077f")
        buf.write("\3\2\2\2\u0108\u0781\3\2\2\2\u010a\u0785\3\2\2\2\u010c")
        buf.write("\u079e\3\2\2\2\u010e\u07a0\3\2\2\2\u0110\u07a4\3\2\2\2")
        buf.write("\u0112\u0888\3\2\2\2\u0114\u088c\3\2\2\2\u0116\u088e\3")
        buf.write("\2\2\2\u0118\u08a2\3\2\2\2\u011a\u08b5\3\2\2\2\u011c\u08bd")
        buf.write("\3\2\2\2\u011e\u08c6\3\2\2\2\u0120\u08d2\3\2\2\2\u0122")
        buf.write("\u08d4\3\2\2\2\u0124\u08d6\3\2\2\2\u0126\u08d9\3\2\2\2")
        buf.write("\u0128\u08df\3\2\2\2\u012a\u08e6\3\2\2\2\u012c\u012e\5")
        buf.write("\4\3\2\u012d\u012c\3\2\2\2\u012e\u012f\3\2\2\2\u012f\u012d")
        buf.write("\3\2\2\2\u012f\u0130\3\2\2\2\u0130\3\3\2\2\2\u0131\u013a")
        buf.write("\5\6\4\2\u0132\u013a\5\u010a\u0086\2\u0133\u013a\5\34")
        buf.write("\17\2\u0134\u013a\5 \21\2\u0135\u013a\5$\23\2\u0136\u013a")
        buf.write("\5(\25\2\u0137\u013a\5,\27\2\u0138\u013a\5\60\31\2\u0139")
        buf.write("\u0131\3\2\2\2\u0139\u0132\3\2\2\2\u0139\u0133\3\2\2\2")
        buf.write("\u0139\u0134\3\2\2\2\u0139\u0135\3\2\2\2\u0139\u0136\3")
        buf.write("\2\2\2\u0139\u0137\3\2\2\2\u0139\u0138\3\2\2\2\u013a\5")
        buf.write("\3\2\2\2\u013b\u0146\5\20\t\2\u013c\u0146\5\b\5\2\u013d")
        buf.write("\u0146\5\u009cO\2\u013e\u0146\5\u00a4S\2\u013f\u0146\5")
        buf.write("\u00a6T\2\u0140\u0146\5\u00b6\\\2\u0141\u0146\5\u00b8")
        buf.write("]\2\u0142\u0146\5\u00be`\2\u0143\u0146\5\u00c2b\2\u0144")
        buf.write("\u0146\5\u00dco\2\u0145\u013b\3\2\2\2\u0145\u013c\3\2")
        buf.write("\2\2\u0145\u013d\3\2\2\2\u0145\u013e\3\2\2\2\u0145\u013f")
        buf.write("\3\2\2\2\u0145\u0140\3\2\2\2\u0145\u0141\3\2\2\2\u0145")
        buf.write("\u0142\3\2\2\2\u0145\u0143\3\2\2\2\u0145\u0144\3\2\2\2")
        buf.write("\u0146\7\3\2\2\2\u0147\u014c\5\f\7\2\u0148\u0149\5\f\7")
        buf.write("\2\u0149\u014a\5H%\2\u014a\u014c\3\2\2\2\u014b\u0147\3")
        buf.write("\2\2\2\u014b\u0148\3\2\2\2\u014c\t\3\2\2\2\u014d\u014e")
        buf.write("\7\u00d3\2\2\u014e\u014f\5\n\6\2\u014f\u0150\7\u00d4\2")
        buf.write("\2\u0150\u0156\3\2\2\2\u0151\u0152\7\u00d3\2\2\u0152\u0153")
        buf.write("\5\f\7\2\u0153\u0154\7\u00d4\2\2\u0154\u0156\3\2\2\2\u0155")
        buf.write("\u014d\3\2\2\2\u0155\u0151\3\2\2\2\u0156\13\3\2\2\2\u0157")
        buf.write("\u0158\5\16\b\2\u0158\u0159\5*\26\2\u0159\u015a\5.\30")
        buf.write("\2\u015a\u015b\5\22\n\2\u015b\u0169\3\2\2\2\u015c\u015d")
        buf.write("\5\n\6\2\u015d\u015e\5,\27\2\u015e\u015f\5.\30\2\u015f")
        buf.write("\u0160\5\22\n\2\u0160\u0169\3\2\2\2\u0161\u0162\5\n\6")
        buf.write("\2\u0162\u0163\5\60\31\2\u0163\u0164\5\22\n\2\u0164\u0169")
        buf.write("\3\2\2\2\u0165\u0166\5\n\6\2\u0166\u0167\5\24\13\2\u0167")
        buf.write("\u0169\3\2\2\2\u0168\u0157\3\2\2\2\u0168\u015c\3\2\2\2")
        buf.write("\u0168\u0161\3\2\2\2\u0168\u0165\3\2\2\2\u0169\r\3\2\2")
        buf.write("\2\u016a\u016b\b\b\1\2\u016b\u0170\5\30\r\2\u016c\u016d")
        buf.write("\5\n\6\2\u016d\u016e\5\20\t\2\u016e\u0170\3\2\2\2\u016f")
        buf.write("\u016a\3\2\2\2\u016f\u016c\3\2\2\2\u0170\u0175\3\2\2\2")
        buf.write("\u0171\u0172\f\4\2\2\u0172\u0174\5\20\t\2\u0173\u0171")
        buf.write("\3\2\2\2\u0174\u0177\3\2\2\2\u0175\u0173\3\2\2\2\u0175")
        buf.write("\u0176\3\2\2\2\u0176\17\3\2\2\2\u0177\u0175\3\2\2\2\u0178")
        buf.write("\u0179\7\u0091\2\2\u0179\u017a\5\26\f\2\u017a\u017b\5")
        buf.write("\30\r\2\u017b\u0181\3\2\2\2\u017c\u017d\7\u0091\2\2\u017d")
        buf.write("\u017e\5\26\f\2\u017e\u017f\5\n\6\2\u017f\u0181\3\2\2")
        buf.write("\2\u0180\u0178\3\2\2\2\u0180\u017c\3\2\2\2\u0181\21\3")
        buf.write("\2\2\2\u0182\u0185\3\2\2\2\u0183\u0185\5\24\13\2\u0184")
        buf.write("\u0182\3\2\2\2\u0184\u0183\3\2\2\2\u0185\23\3\2\2\2\u0186")
        buf.write("\u0187\7\65\2\2\u0187\u018d\7\u0094\2\2\u0188\u0189\7")
        buf.write("Q\2\2\u0189\u018a\7B\2\2\u018a\u018b\7{\2\2\u018b\u018d")
        buf.write("\7]\2\2\u018c\u0186\3\2\2\2\u018c\u0188\3\2\2\2\u018d")
        buf.write("\25\3\2\2\2\u018e\u0192\3\2\2\2\u018f\u0192\7\'\2\2\u0190")
        buf.write("\u0192\7\3\2\2\u0191\u018e\3\2\2\2\u0191\u018f\3\2\2\2")
        buf.write("\u0191\u0190\3\2\2\2\u0192\27\3\2\2\2\u0193\u0194\7y\2")
        buf.write("\2\u0194\u0195\5b\62\2\u0195\u0196\5> \2\u0196\u0197\5")
        buf.write("H%\2\u0197\u0198\5\32\16\2\u0198\u0199\5\36\20\2\u0199")
        buf.write("\u019a\5\"\22\2\u019a\u019b\5&\24\2\u019b\u01a5\3\2\2")
        buf.write("\2\u019c\u019d\7y\2\2\u019d\u019e\5b\62\2\u019e\u019f")
        buf.write("\5> \2\u019f\u01a0\5\32\16\2\u01a0\u01a1\5\36\20\2\u01a1")
        buf.write("\u01a2\5\"\22\2\u01a2\u01a3\5&\24\2\u01a3\u01a5\3\2\2")
        buf.write("\2\u01a4\u0193\3\2\2\2\u01a4\u019c\3\2\2\2\u01a5\31\3")
        buf.write("\2\2\2\u01a6\u01a9\3\2\2\2\u01a7\u01a9\5\34\17\2\u01a8")
        buf.write("\u01a6\3\2\2\2\u01a8\u01a7\3\2\2\2\u01a9\33\3\2\2\2\u01aa")
        buf.write("\u01ab\7\67\2\2\u01ab\u01ac\5n8\2\u01ac\35\3\2\2\2\u01ad")
        buf.write("\u01b0\3\2\2\2\u01ae\u01b0\5 \21\2\u01af\u01ad\3\2\2\2")
        buf.write("\u01af\u01ae\3\2\2\2\u01b0\37\3\2\2\2\u01b1\u01b2\7\u009c")
        buf.write("\2\2\u01b2\u01b3\5\u00ecw\2\u01b3!\3\2\2\2\u01b4\u01b7")
        buf.write("\3\2\2\2\u01b5\u01b7\5$\23\2\u01b6\u01b4\3\2\2\2\u01b6")
        buf.write("\u01b5\3\2\2\2\u01b7#\3\2\2\2\u01b8\u01b9\79\2\2\u01b9")
        buf.write("\u01ba\7\17\2\2\u01ba\u01bb\5\62\32\2\u01bb%\3\2\2\2\u01bc")
        buf.write("\u01bf\3\2\2\2\u01bd\u01bf\5(\25\2\u01be\u01bc\3\2\2\2")
        buf.write("\u01be\u01bd\3\2\2\2\u01bf\'\3\2\2\2\u01c0\u01c1\7:\2")
        buf.write("\2\u01c1\u01c2\5\u00ecw\2\u01c2)\3\2\2\2\u01c3\u01c6\3")
        buf.write("\2\2\2\u01c4\u01c6\5,\27\2\u01c5\u01c3\3\2\2\2\u01c5\u01c4")
        buf.write("\3\2\2\2\u01c6+\3\2\2\2\u01c7\u01c8\7i\2\2\u01c8\u01c9")
        buf.write("\7\17\2\2\u01c9\u01ca\5\64\33\2\u01ca-\3\2\2\2\u01cb\u01ce")
        buf.write("\3\2\2\2\u01cc\u01ce\5\60\31\2\u01cd\u01cb\3\2\2\2\u01cd")
        buf.write("\u01cc\3\2\2\2\u01ce/\3\2\2\2\u01cf\u01d0\7O\2\2\u01d0")
        buf.write("\u01d1\5:\36\2\u01d1\61\3\2\2\2\u01d2\u01d3\b\32\1\2\u01d3")
        buf.write("\u01d4\5\u00ecw\2\u01d4\u01da\3\2\2\2\u01d5\u01d6\f\4")
        buf.write("\2\2\u01d6\u01d7\7\u00d7\2\2\u01d7\u01d9\5\u00ecw\2\u01d8")
        buf.write("\u01d5\3\2\2\2\u01d9\u01dc\3\2\2\2\u01da\u01d8\3\2\2\2")
        buf.write("\u01da\u01db\3\2\2\2\u01db\63\3\2\2\2\u01dc\u01da\3\2")
        buf.write("\2\2\u01dd\u01de\b\33\1\2\u01de\u01df\5\66\34\2\u01df")
        buf.write("\u01e5\3\2\2\2\u01e0\u01e1\f\4\2\2\u01e1\u01e2\7\u00d7")
        buf.write("\2\2\u01e2\u01e4\5\66\34\2\u01e3\u01e0\3\2\2\2\u01e4\u01e7")
        buf.write("\3\2\2\2\u01e5\u01e3\3\2\2\2\u01e5\u01e6\3\2\2\2\u01e6")
        buf.write("\65\3\2\2\2\u01e7\u01e5\3\2\2\2\u01e8\u01e9\5\u00ecw\2")
        buf.write("\u01e9\u01ea\58\35\2\u01ea\67\3\2\2\2\u01eb\u01ef\3\2")
        buf.write("\2\2\u01ec\u01ef\7\6\2\2\u01ed\u01ef\7&\2\2\u01ee\u01eb")
        buf.write("\3\2\2\2\u01ee\u01ec\3\2\2\2\u01ee\u01ed\3\2\2\2\u01ef")
        buf.write("9\3\2\2\2\u01f0\u01fa\5<\37\2\u01f1\u01f2\5<\37\2\u01f2")
        buf.write("\u01f3\7\u00d7\2\2\u01f3\u01f4\5<\37\2\u01f4\u01fa\3\2")
        buf.write("\2\2\u01f5\u01f6\5<\37\2\u01f6\u01f7\7d\2\2\u01f7\u01f8")
        buf.write("\5<\37\2\u01f8\u01fa\3\2\2\2\u01f9\u01f0\3\2\2\2\u01f9")
        buf.write("\u01f1\3\2\2\2\u01f9\u01f5\3\2\2\2\u01fa;\3\2\2\2\u01fb")
        buf.write("\u01fc\7\u00d1\2\2\u01fc=\3\2\2\2\u01fd\u01fe\b \1\2\u01fe")
        buf.write("\u0201\5@!\2\u01ff\u0201\7\u00d9\2\2\u0200\u01fd\3\2\2")
        buf.write("\2\u0200\u01ff\3\2\2\2\u0201\u0207\3\2\2\2\u0202\u0203")
        buf.write("\f\5\2\2\u0203\u0204\7\u00d7\2\2\u0204\u0206\5@!\2\u0205")
        buf.write("\u0202\3\2\2\2\u0206\u0209\3\2\2\2\u0207\u0205\3\2\2\2")
        buf.write("\u0207\u0208\3\2\2\2\u0208?\3\2\2\2\u0209\u0207\3\2\2")
        buf.write("\2\u020a\u021b\5D#\2\u020b\u020c\5\u00ecw\2\u020c\u020d")
        buf.write("\7\5\2\2\u020d\u020e\5B\"\2\u020e\u021b\3\2\2\2\u020f")
        buf.write("\u0210\5\u00ecw\2\u0210\u0211\7\5\2\2\u0211\u0212\5\u0120")
        buf.write("\u0091\2\u0212\u021b\3\2\2\2\u0213\u0214\5\u00ecw\2\u0214")
        buf.write("\u0215\5\u00eav\2\u0215\u021b\3\2\2\2\u0216\u0217\5\u00ec")
        buf.write("w\2\u0217\u0218\5\u0120\u0091\2\u0218\u021b\3\2\2\2\u0219")
        buf.write("\u021b\5\u00ecw\2\u021a\u020a\3\2\2\2\u021a\u020b\3\2")
        buf.write("\2\2\u021a\u020f\3\2\2\2\u021a\u0213\3\2\2\2\u021a\u0216")
        buf.write("\3\2\2\2\u021a\u0219\3\2\2\2\u021bA\3\2\2\2\u021c\u021f")
        buf.write("\5\u00eav\2\u021d\u021f\5\u0104\u0083\2\u021e\u021c\3")
        buf.write("\2\2\2\u021e\u021d\3\2\2\2\u021fC\3\2\2\2\u0220\u0221")
        buf.write("\5\u00eav\2\u0221\u0222\7\u00d2\2\2\u0222\u0223\7\u00d9")
        buf.write("\2\2\u0223\u022b\3\2\2\2\u0224\u0225\5\u00eav\2\u0225")
        buf.write("\u0226\7\u00d2\2\2\u0226\u0227\5\u00eav\2\u0227\u0228")
        buf.write("\7\u00d2\2\2\u0228\u0229\7\u00d9\2\2\u0229\u022b\3\2\2")
        buf.write("\2\u022a\u0220\3\2\2\2\u022a\u0224\3\2\2\2\u022bE\3\2")
        buf.write("\2\2\u022c\u0234\3\2\2\2\u022d\u022e\7\5\2\2\u022e\u0234")
        buf.write("\5\u00eav\2\u022f\u0230\7\5\2\2\u0230\u0234\5\u0120\u0091")
        buf.write("\2\u0231\u0234\5\u00eav\2\u0232\u0234\5\u0120\u0091\2")
        buf.write("\u0233\u022c\3\2\2\2\u0233\u022d\3\2\2\2\u0233\u022f\3")
        buf.write("\2\2\2\u0233\u0231\3\2\2\2\u0233\u0232\3\2\2\2\u0234G")
        buf.write("\3\2\2\2\u0235\u0236\7H\2\2\u0236\u0237\5J&\2\u0237I\3")
        buf.write("\2\2\2\u0238\u0239\7k\2\2\u0239\u023a\5\u0120\u0091\2")
        buf.write("\u023a\u023b\5L\'\2\u023b\u023c\5N(\2\u023c\u023d\5T+")
        buf.write("\2\u023d\u0242\3\2\2\2\u023e\u023f\7*\2\2\u023f\u0242")
        buf.write("\5\u0120\u0091\2\u0240\u0242\5Z.\2\u0241\u0238\3\2\2\2")
        buf.write("\u0241\u023e\3\2\2\2\u0241\u0240\3\2\2\2\u0242K\3\2\2")
        buf.write("\2\u0243\u0248\3\2\2\2\u0244\u0245\5\u0124\u0093\2\u0245")
        buf.write("\u0246\5\u011e\u0090\2\u0246\u0248\3\2\2\2\u0247\u0243")
        buf.write("\3\2\2\2\u0247\u0244\3\2\2\2\u0248M\3\2\2\2\u0249\u024d")
        buf.write("\3\2\2\2\u024a\u024b\7\63\2\2\u024b\u024d\5P)\2\u024c")
        buf.write("\u0249\3\2\2\2\u024c\u024a\3\2\2\2\u024dO\3\2\2\2\u024e")
        buf.write("\u024f\b)\1\2\u024f\u0250\5R*\2\u0250\u0255\3\2\2\2\u0251")
        buf.write("\u0252\f\4\2\2\u0252\u0254\5R*\2\u0253\u0251\3\2\2\2\u0254")
        buf.write("\u0257\3\2\2\2\u0255\u0253\3\2\2\2\u0255\u0256\3\2\2\2")
        buf.write("\u0256Q\3\2\2\2\u0257\u0255\3\2\2\2\u0258\u0259\7\u0087")
        buf.write("\2\2\u0259\u025a\7\17\2\2\u025a\u0266\5\u0120\u0091\2")
        buf.write("\u025b\u025c\7h\2\2\u025c\u025d\7.\2\2\u025d\u025e\7\17")
        buf.write("\2\2\u025e\u0266\5\u0120\u0091\2\u025f\u0260\7.\2\2\u0260")
        buf.write("\u0261\7\17\2\2\u0261\u0266\5\u0120\u0091\2\u0262\u0263")
        buf.write("\7\61\2\2\u0263\u0264\7\17\2\2\u0264\u0266\5\u0120\u0091")
        buf.write("\2\u0265\u0258\3\2\2\2\u0265\u025b\3\2\2\2\u0265\u025f")
        buf.write("\3\2\2\2\u0265\u0262\3\2\2\2\u0266S\3\2\2\2\u0267\u026b")
        buf.write("\3\2\2\2\u0268\u0269\7P\2\2\u0269\u026b\5V,\2\u026a\u0267")
        buf.write("\3\2\2\2\u026a\u0268\3\2\2\2\u026bU\3\2\2\2\u026c\u026d")
        buf.write("\b,\1\2\u026d\u026e\5X-\2\u026e\u0273\3\2\2\2\u026f\u0270")
        buf.write("\f\4\2\2\u0270\u0272\5X-\2\u0271\u026f\3\2\2\2\u0272\u0275")
        buf.write("\3\2\2\2\u0273\u0271\3\2\2\2\u0273\u0274\3\2\2\2\u0274")
        buf.write("W\3\2\2\2\u0275\u0273\3\2\2\2\u0276\u0277\7\u0087\2\2")
        buf.write("\u0277\u0278\7\17\2\2\u0278\u027d\5\u0120\u0091\2\u0279")
        buf.write("\u027a\7\u0083\2\2\u027a\u027b\7\17\2\2\u027b\u027d\5")
        buf.write("\u0120\u0091\2\u027c\u0276\3\2\2\2\u027c\u0279\3\2\2\2")
        buf.write("\u027dY\3\2\2\2\u027e\u027f\b.\1\2\u027f\u0280\5\\/\2")
        buf.write("\u0280\u0286\3\2\2\2\u0281\u0282\f\4\2\2\u0282\u0283\7")
        buf.write("\u00d7\2\2\u0283\u0285\5\\/\2\u0284\u0281\3\2\2\2\u0285")
        buf.write("\u0288\3\2\2\2\u0286\u0284\3\2\2\2\u0286\u0287\3\2\2\2")
        buf.write("\u0287[\3\2\2\2\u0288\u0286\3\2\2\2\u0289\u028a\7\u00e3")
        buf.write("\2\2\u028a\u028d\5^\60\2\u028b\u028d\5^\60\2\u028c\u0289")
        buf.write("\3\2\2\2\u028c\u028b\3\2\2\2\u028d]\3\2\2\2\u028e\u0291")
        buf.write("\5\u00eav\2\u028f\u0291\5\u0120\u0091\2\u0290\u028e\3")
        buf.write("\2\2\2\u0290\u028f\3\2\2\2\u0291_\3\2\2\2\u0292\u0293")
        buf.write("\b\61\1\2\u0293\u0294\5\u00eav\2\u0294\u029a\3\2\2\2\u0295")
        buf.write("\u0296\f\3\2\2\u0296\u0297\7\u00d7\2\2\u0297\u0299\5\u00ea")
        buf.write("v\2\u0298\u0295\3\2\2\2\u0299\u029c\3\2\2\2\u029a\u0298")
        buf.write("\3\2\2\2\u029a\u029b\3\2\2\2\u029ba\3\2\2\2\u029c\u029a")
        buf.write("\3\2\2\2\u029d\u02b0\b\62\1\2\u029e\u029f\f\n\2\2\u029f")
        buf.write("\u02af\7\3\2\2\u02a0\u02a1\f\t\2\2\u02a1\u02af\7\'\2\2")
        buf.write("\u02a2\u02a3\f\b\2\2\u02a3\u02af\7(\2\2\u02a4\u02a5\f")
        buf.write("\7\2\2\u02a5\u02af\7;\2\2\u02a6\u02a7\f\6\2\2\u02a7\u02af")
        buf.write("\7\u0084\2\2\u02a8\u02a9\f\5\2\2\u02a9\u02af\7\u0082\2")
        buf.write("\2\u02aa\u02ab\f\4\2\2\u02ab\u02af\7\u0080\2\2\u02ac\u02ad")
        buf.write("\f\3\2\2\u02ad\u02af\7\u0081\2\2\u02ae\u029e\3\2\2\2\u02ae")
        buf.write("\u02a0\3\2\2\2\u02ae\u02a2\3\2\2\2\u02ae\u02a4\3\2\2\2")
        buf.write("\u02ae\u02a6\3\2\2\2\u02ae\u02a8\3\2\2\2\u02ae\u02aa\3")
        buf.write("\2\2\2\u02ae\u02ac\3\2\2\2\u02af\u02b2\3\2\2\2\u02b0\u02ae")
        buf.write("\3\2\2\2\u02b0\u02b1\3\2\2\2\u02b1c\3\2\2\2\u02b2\u02b0")
        buf.write("\3\2\2\2\u02b3\u02b6\5h\65\2\u02b4\u02b6\5\u0082B\2\u02b5")
        buf.write("\u02b3\3\2\2\2\u02b5\u02b4\3\2\2\2\u02b6e\3\2\2\2\u02b7")
        buf.write("\u02be\5h\65\2\u02b8\u02b9\7\u00d5\2\2\u02b9\u02ba\5\u00ea")
        buf.write("v\2\u02ba\u02bb\5d\63\2\u02bb\u02bc\7\u00d6\2\2\u02bc")
        buf.write("\u02be\3\2\2\2\u02bd\u02b7\3\2\2\2\u02bd\u02b8\3\2\2\2")
        buf.write("\u02beg\3\2\2\2\u02bf\u02c9\5t;\2\u02c0\u02c9\5r:\2\u02c1")
        buf.write("\u02c2\5\u009aN\2\u02c2\u02c3\5v<\2\u02c3\u02c4\5p9\2")
        buf.write("\u02c4\u02c9\3\2\2\2\u02c5\u02c9\5j\66\2\u02c6\u02c9\5")
        buf.write("l\67\2\u02c7\u02c9\5\u010a\u0086\2\u02c8\u02bf\3\2\2\2")
        buf.write("\u02c8\u02c0\3\2\2\2\u02c8\u02c1\3\2\2\2\u02c8\u02c5\3")
        buf.write("\2\2\2\u02c8\u02c6\3\2\2\2\u02c8\u02c7\3\2\2\2\u02c9i")
        buf.write("\3\2\2\2\u02ca\u02cb\7\u00d3\2\2\u02cb\u02cc\5j\66\2\u02cc")
        buf.write("\u02cd\7\u00d4\2\2\u02cd\u02d3\3\2\2\2\u02ce\u02cf\7\u00d3")
        buf.write("\2\2\u02cf\u02d0\5\u0082B\2\u02d0\u02d1\7\u00d4\2\2\u02d1")
        buf.write("\u02d3\3\2\2\2\u02d2\u02ca\3\2\2\2\u02d2\u02ce\3\2\2\2")
        buf.write("\u02d3k\3\2\2\2\u02d4\u02d5\7\u00d3\2\2\u02d5\u02d6\5")
        buf.write("l\67\2\u02d6\u02d7\7\u00d4\2\2\u02d7\u02df\3\2\2\2\u02d8")
        buf.write("\u02d9\7\u00d3\2\2\u02d9\u02da\5n8\2\u02da\u02db\7\u00d7")
        buf.write("\2\2\u02db\u02dc\5f\64\2\u02dc\u02dd\7\u00d4\2\2\u02dd")
        buf.write("\u02df\3\2\2\2\u02de\u02d4\3\2\2\2\u02de\u02d8\3\2\2\2")
        buf.write("\u02dfm\3\2\2\2\u02e0\u02e1\b8\1\2\u02e1\u02e2\5f\64\2")
        buf.write("\u02e2\u02e8\3\2\2\2\u02e3\u02e4\f\3\2\2\u02e4\u02e5\7")
        buf.write("\u00d7\2\2\u02e5\u02e7\5f\64\2\u02e6\u02e3\3\2\2\2\u02e7")
        buf.write("\u02ea\3\2\2\2\u02e8\u02e6\3\2\2\2\u02e8\u02e9\3\2\2\2")
        buf.write("\u02e9o\3\2\2\2\u02ea\u02e8\3\2\2\2\u02eb\u02f1\3\2\2")
        buf.write("\2\u02ec\u02ed\7\u00d3\2\2\u02ed\u02ee\5\u0098M\2\u02ee")
        buf.write("\u02ef\7\u00d4\2\2\u02ef\u02f1\3\2\2\2\u02f0\u02eb\3\2")
        buf.write("\2\2\u02f0\u02ec\3\2\2\2\u02f1q\3\2\2\2\u02f2\u02f3\7")
        buf.write("\u00d3\2\2\u02f3\u02f4\5r:\2\u02f4\u02f5\7\u00d4\2\2\u02f5")
        buf.write("\u02fb\3\2\2\2\u02f6\u02f7\7\u00d3\2\2\u02f7\u02f8\5t")
        buf.write(";\2\u02f8\u02f9\7\u00d4\2\2\u02f9\u02fb\3\2\2\2\u02fa")
        buf.write("\u02f2\3\2\2\2\u02fa\u02f6\3\2\2\2\u02fbs\3\2\2\2\u02fc")
        buf.write("\u02fd\5\u0084C\2\u02fd\u02fe\5~@\2\u02fe\u02ff\5v<\2")
        buf.write("\u02ff\u0300\5|?\2\u0300u\3\2\2\2\u0301\u0306\3\2\2\2")
        buf.write("\u0302\u0303\7\5\2\2\u0303\u0306\5\u00eav\2\u0304\u0306")
        buf.write("\5\u00eav\2\u0305\u0301\3\2\2\2\u0305\u0302\3\2\2\2\u0305")
        buf.write("\u0304\3\2\2\2\u0306w\3\2\2\2\u0307\u030a\3\2\2\2\u0308")
        buf.write("\u030a\7\5\2\2\u0309\u0307\3\2\2\2\u0309\u0308\3\2\2\2")
        buf.write("\u030ay\3\2\2\2\u030b\u030c\b>\1\2\u030c\u030d\5\u0092")
        buf.write("J\2\u030d\u0312\3\2\2\2\u030e\u030f\f\3\2\2\u030f\u0311")
        buf.write("\5\u0092J\2\u0310\u030e\3\2\2\2\u0311\u0314\3\2\2\2\u0312")
        buf.write("\u0310\3\2\2\2\u0312\u0313\3\2\2\2\u0313{\3\2\2\2\u0314")
        buf.write("\u0312\3\2\2\2\u0315\u0318\3\2\2\2\u0316\u0318\5z>\2\u0317")
        buf.write("\u0315\3\2\2\2\u0317\u0316\3\2\2\2\u0318}\3\2\2\2\u0319")
        buf.write("\u031c\3\2\2\2\u031a\u031c\5\u0080A\2\u031b\u0319\3\2")
        buf.write("\2\2\u031b\u031a\3\2\2\2\u031c\177\3\2\2\2\u031d\u031e")
        buf.write("\7l\2\2\u031e\u031f\7\u00d3\2\2\u031f\u0320\5\u0098M\2")
        buf.write("\u0320\u0321\7\u00d4\2\2\u0321\u0081\3\2\2\2\u0322\u0323")
        buf.write("\bB\1\2\u0323\u0324\5f\64\2\u0324\u0325\5\u0086D\2\u0325")
        buf.write("\u0326\7J\2\2\u0326\u0327\5h\65\2\u0327\u0328\5\u008e")
        buf.write("H\2\u0328\u0341\3\2\2\2\u0329\u032a\5f\64\2\u032a\u032b")
        buf.write("\7\u0084\2\2\u032b\u032c\5h\65\2\u032c\u0341\3\2\2\2\u032d")
        buf.write("\u032e\5f\64\2\u032e\u032f\7\u0084\2\2\u032f\u0330\5h")
        buf.write("\65\2\u0330\u0331\7e\2\2\u0331\u0332\5\u00ecw\2\u0332")
        buf.write("\u0341\3\2\2\2\u0333\u0334\5f\64\2\u0334\u0335\5\u008a")
        buf.write("F\2\u0335\u0336\5\u0088E\2\u0336\u0337\7J\2\2\u0337\u0338")
        buf.write("\5h\65\2\u0338\u0339\5\u0090I\2\u0339\u0341\3\2\2\2\u033a")
        buf.write("\u033b\5f\64\2\u033b\u033c\7_\2\2\u033c\u033d\5\u008c")
        buf.write("G\2\u033d\u033e\7J\2\2\u033e\u033f\5h\65\2\u033f\u0341")
        buf.write("\3\2\2\2\u0340\u0322\3\2\2\2\u0340\u0329\3\2\2\2\u0340")
        buf.write("\u032d\3\2\2\2\u0340\u0333\3\2\2\2\u0340\u033a\3\2\2\2")
        buf.write("\u0341\u0360\3\2\2\2\u0342\u0343\f\f\2\2\u0343\u0344\5")
        buf.write("\u0086D\2\u0344\u0345\7J\2\2\u0345\u0346\5h\65\2\u0346")
        buf.write("\u0347\5\u008eH\2\u0347\u035f\3\2\2\2\u0348\u0349\f\13")
        buf.write("\2\2\u0349\u034a\7\u0084\2\2\u034a\u035f\5h\65\2\u034b")
        buf.write("\u034c\f\n\2\2\u034c\u034d\7\u0084\2\2\u034d\u034e\5h")
        buf.write("\65\2\u034e\u034f\7e\2\2\u034f\u0350\5\u00ecw\2\u0350")
        buf.write("\u035f\3\2\2\2\u0351\u0352\f\t\2\2\u0352\u0353\5\u008a")
        buf.write("F\2\u0353\u0354\5\u0088E\2\u0354\u0355\7J\2\2\u0355\u0356")
        buf.write("\5h\65\2\u0356\u0357\5\u0090I\2\u0357\u035f\3\2\2\2\u0358")
        buf.write("\u0359\f\b\2\2\u0359\u035a\7_\2\2\u035a\u035b\5\u008c")
        buf.write("G\2\u035b\u035c\7J\2\2\u035c\u035d\5h\65\2\u035d\u035f")
        buf.write("\3\2\2\2\u035e\u0342\3\2\2\2\u035e\u0348\3\2\2\2\u035e")
        buf.write("\u034b\3\2\2\2\u035e\u0351\3\2\2\2\u035e\u0358\3\2\2\2")
        buf.write("\u035f\u0362\3\2\2\2\u0360\u035e\3\2\2\2\u0360\u0361\3")
        buf.write("\2\2\2\u0361\u0083\3\2\2\2\u0362\u0360\3\2\2\2\u0363\u0368")
        buf.write("\5\u00eav\2\u0364\u0365\7\u00d2\2\2\u0365\u0367\5\u00ea")
        buf.write("v\2\u0366\u0364\3\2\2\2\u0367\u036a\3\2\2\2\u0368\u0366")
        buf.write("\3\2\2\2\u0368\u0369\3\2\2\2\u0369\u0085\3\2\2\2\u036a")
        buf.write("\u0368\3\2\2\2\u036b\u036f\3\2\2\2\u036c\u036f\7D\2\2")
        buf.write("\u036d\u036f\7\27\2\2\u036e\u036b\3\2\2\2\u036e\u036c")
        buf.write("\3\2\2\2\u036e\u036d\3\2\2\2\u036f\u0087\3\2\2\2\u0370")
        buf.write("\u0373\3\2\2\2\u0371\u0373\7j\2\2\u0372\u0370\3\2\2\2")
        buf.write("\u0372\u0371\3\2\2\2\u0373\u0089\3\2\2\2\u0374\u0375\t")
        buf.write("\2\2\2\u0375\u008b\3\2\2\2\u0376\u0377\7M\2\2\u0377\u037c")
        buf.write("\5\u0088E\2\u0378\u0379\7t\2\2\u0379\u037c\5\u0088E\2")
        buf.write("\u037a\u037c\3\2\2\2\u037b\u0376\3\2\2\2\u037b\u0378\3")
        buf.write("\2\2\2\u037b\u037a\3\2\2\2\u037c\u008d\3\2\2\2\u037d\u0380")
        buf.write("\5\u0090I\2\u037e\u0380\3\2\2\2\u037f\u037d\3\2\2\2\u037f")
        buf.write("\u037e\3\2\2\2\u0380\u008f\3\2\2\2\u0381\u0382\7e\2\2")
        buf.write("\u0382\u0389\5\u00ecw\2\u0383\u0384\7\u0096\2\2\u0384")
        buf.write("\u0385\7\u00d3\2\2\u0385\u0386\5`\61\2\u0386\u0387\7\u00d4")
        buf.write("\2\2\u0387\u0389\3\2\2\2\u0388\u0381\3\2\2\2\u0388\u0383")
        buf.write("\3\2\2\2\u0389\u0091\3\2\2\2\u038a\u038b\7\u0095\2\2\u038b")
        buf.write("\u038c\5\u0094K\2\u038c\u038d\5\u0096L\2\u038d\u038e\7")
        buf.write("\u00d3\2\2\u038e\u038f\5\u0098M\2\u038f\u0390\7\u00d4")
        buf.write("\2\2\u0390\u03a0\3\2\2\2\u0391\u0392\7A\2\2\u0392\u0393")
        buf.write("\5\u0094K\2\u0393\u0394\5\u0096L\2\u0394\u0395\7\u00d3")
        buf.write("\2\2\u0395\u0396\5\u0098M\2\u0396\u0397\7\u00d4\2\2\u0397")
        buf.write("\u03a0\3\2\2\2\u0398\u0399\7\66\2\2\u0399\u039a\5\u0094")
        buf.write("K\2\u039a\u039b\5\u0096L\2\u039b\u039c\7\u00d3\2\2\u039c")
        buf.write("\u039d\5\u0098M\2\u039d\u039e\7\u00d4\2\2\u039e\u03a0")
        buf.write("\3\2\2\2\u039f\u038a\3\2\2\2\u039f\u0391\3\2\2\2\u039f")
        buf.write("\u0398\3\2\2\2\u03a0\u0093\3\2\2\2\u03a1\u03a2\t\3\2\2")
        buf.write("\u03a2\u0095\3\2\2\2\u03a3\u03ad\3\2\2\2\u03a4\u03a5\7")
        buf.write("\65\2\2\u03a5\u03ad\7J\2\2\u03a6\u03a7\7\65\2\2\u03a7")
        buf.write("\u03a8\7i\2\2\u03a8\u03ad\7\17\2\2\u03a9\u03aa\7\65\2")
        buf.write("\2\u03aa\u03ab\79\2\2\u03ab\u03ad\7\17\2\2\u03ac\u03a3")
        buf.write("\3\2\2\2\u03ac\u03a4\3\2\2\2\u03ac\u03a6\3\2\2\2\u03ac")
        buf.write("\u03a9\3\2\2\2\u03ad\u0097\3\2\2\2\u03ae\u03af\bM\1\2")
        buf.write("\u03af\u03b0\5\u00eav\2\u03b0\u03b6\3\2\2\2\u03b1\u03b2")
        buf.write("\f\3\2\2\u03b2\u03b3\7\u00d7\2\2\u03b3\u03b5\5\u00eav")
        buf.write("\2\u03b4\u03b1\3\2\2\2\u03b5\u03b8\3\2\2\2\u03b6\u03b4")
        buf.write("\3\2\2\2\u03b6\u03b7\3\2\2\2\u03b7\u0099\3\2\2\2\u03b8")
        buf.write("\u03b6\3\2\2\2\u03b9\u03ba\7\u00d3\2\2\u03ba\u03bb\5\b")
        buf.write("\5\2\u03bb\u03bc\7\u00d4\2\2\u03bc\u009b\3\2\2\2\u03bd")
        buf.write("\u03be\7#\2\2\u03be\u03bf\5\u009eP\2\u03bf\u03c0\7\67")
        buf.write("\2\2\u03c0\u03c1\5\u00eav\2\u03c1\u03c2\5\36\20\2\u03c2")
        buf.write("\u03c3\5*\26\2\u03c3\u03c4\5.\30\2\u03c4\u03d5\3\2\2\2")
        buf.write("\u03c5\u03c6\7#\2\2\u03c6\u03c7\5\u009eP\2\u03c7\u03c8")
        buf.write("\5\u00a0Q\2\u03c8\u03c9\7\67\2\2\u03c9\u03ca\5n8\2\u03ca")
        buf.write("\u03cb\5\36\20\2\u03cb\u03d5\3\2\2\2\u03cc\u03cd\7#\2")
        buf.write("\2\u03cd\u03ce\5\u009eP\2\u03ce\u03cf\7\67\2\2\u03cf\u03d0")
        buf.write("\5\u00a0Q\2\u03d0\u03d1\7\u0096\2\2\u03d1\u03d2\5n8\2")
        buf.write("\u03d2\u03d3\5\36\20\2\u03d3\u03d5\3\2\2\2\u03d4\u03bd")
        buf.write("\3\2\2\2\u03d4\u03c5\3\2\2\2\u03d4\u03cc\3\2\2\2\u03d5")
        buf.write("\u009d\3\2\2\2\u03d6\u03df\bP\1\2\u03d7\u03d8\f\6\2\2")
        buf.write("\u03d8\u03de\7T\2\2\u03d9\u03da\f\5\2\2\u03da\u03de\7")
        buf.write("p\2\2\u03db\u03dc\f\4\2\2\u03dc\u03de\7A\2\2\u03dd\u03d7")
        buf.write("\3\2\2\2\u03dd\u03d9\3\2\2\2\u03dd\u03db\3\2\2\2\u03de")
        buf.write("\u03e1\3\2\2\2\u03df\u03dd\3\2\2\2\u03df\u03e0\3\2\2\2")
        buf.write("\u03e0\u009f\3\2\2\2\u03e1\u03df\3\2\2\2\u03e2\u03e3\b")
        buf.write("Q\1\2\u03e3\u03e4\5\u00eav\2\u03e4\u03e5\5\u00a2R\2\u03e5")
        buf.write("\u03ed\3\2\2\2\u03e6\u03e7\f\3\2\2\u03e7\u03e8\7\u00d7")
        buf.write("\2\2\u03e8\u03e9\5\u00eav\2\u03e9\u03ea\5\u00a2R\2\u03ea")
        buf.write("\u03ec\3\2\2\2\u03eb\u03e6\3\2\2\2\u03ec\u03ef\3\2\2\2")
        buf.write("\u03ed\u03eb\3\2\2\2\u03ed\u03ee\3\2\2\2\u03ee\u00a1\3")
        buf.write("\2\2\2\u03ef\u03ed\3\2\2\2\u03f0\u03f4\3\2\2\2\u03f1\u03f2")
        buf.write("\7\u00d2\2\2\u03f2\u03f4\7\u00d9\2\2\u03f3\u03f0\3\2\2")
        buf.write("\2\u03f3\u03f1\3\2\2\2\u03f4\u00a3\3\2\2\2\u03f5\u03f6")
        buf.write("\7%\2\2\u03f6\u03f7\t\4\2\2\u03f7\u03f8\5\u00c0a\2\u03f8")
        buf.write("\u03f9\5\u00eav\2\u03f9\u00a5\3\2\2\2\u03fa\u03fb\7E\2")
        buf.write("\2\u03fb\u03fc\5\u00aaV\2\u03fc\u03fd\5\u00acW\2\u03fd")
        buf.write("\u03fe\5\u00eav\2\u03fe\u03ff\5\u00aeX\2\u03ff\u0400\7")
        buf.write("\u0097\2\2\u0400\u0401\5\u00b0Y\2\u0401\u0402\5\u00a8")
        buf.write("U\2\u0402\u0414\3\2\2\2\u0403\u0404\7E\2\2\u0404\u0405")
        buf.write("\5\u00aaV\2\u0405\u0406\5\u00acW\2\u0406\u0407\5\u00ea")
        buf.write("v\2\u0407\u0408\7z\2\2\u0408\u0409\5\u00b4[\2\u0409\u040a")
        buf.write("\5\u00a8U\2\u040a\u0414\3\2\2\2\u040b\u040c\7E\2\2\u040c")
        buf.write("\u040d\5\u00aaV\2\u040d\u040e\5\u00acW\2\u040e\u040f\5")
        buf.write("\u00eav\2\u040f\u0410\5\u00aeX\2\u0410\u0411\5\b\5\2\u0411")
        buf.write("\u0412\5\u00a8U\2\u0412\u0414\3\2\2\2\u0413\u03fa\3\2")
        buf.write("\2\2\u0413\u0403\3\2\2\2\u0413\u040b\3\2\2\2\u0414\u00a7")
        buf.write("\3\2\2\2\u0415\u041b\3\2\2\2\u0416\u0417\7f\2\2\u0417")
        buf.write("\u0418\7K\2\2\u0418\u0419\7\u0094\2\2\u0419\u041b\5\u00b4")
        buf.write("[\2\u041a\u0415\3\2\2\2\u041a\u0416\3\2\2\2\u041b\u00a9")
        buf.write("\3\2\2\2\u041c\u0427\bV\1\2\u041d\u041e\f\6\2\2\u041e")
        buf.write("\u0426\7T\2\2\u041f\u0420\f\5\2\2\u0420\u0426\7\"\2\2")
        buf.write("\u0421\u0422\f\4\2\2\u0422\u0426\7;\2\2\u0423\u0424\f")
        buf.write("\3\2\2\u0424\u0426\7A\2\2\u0425\u041d\3\2\2\2\u0425\u041f")
        buf.write("\3\2\2\2\u0425\u0421\3\2\2\2\u0425\u0423\3\2\2\2\u0426")
        buf.write("\u0429\3\2\2\2\u0427\u0425\3\2\2\2\u0427\u0428\3\2\2\2")
        buf.write("\u0428\u00ab\3\2\2\2\u0429\u0427\3\2\2\2\u042a\u042d\7")
        buf.write("H\2\2\u042b\u042d\3\2\2\2\u042c\u042a\3\2\2\2\u042c\u042b")
        buf.write("\3\2\2\2\u042d\u00ad\3\2\2\2\u042e\u0434\3\2\2\2\u042f")
        buf.write("\u0430\7\u00d3\2\2\u0430\u0431\5`\61\2\u0431\u0432\7\u00d4")
        buf.write("\2\2\u0432\u0434\3\2\2\2\u0433\u042e\3\2\2\2\u0433\u042f")
        buf.write("\3\2\2\2\u0434\u00af\3\2\2\2\u0435\u0436\bY\1\2\u0436")
        buf.write("\u0437\7\u00d3\2\2\u0437\u0438\5\u00b2Z\2\u0438\u0439")
        buf.write("\7\u00d4\2\2\u0439\u0442\3\2\2\2\u043a\u043b\f\3\2\2\u043b")
        buf.write("\u043c\7\u00d7\2\2\u043c\u043d\7\u00d3\2\2\u043d\u043e")
        buf.write("\5\u00b2Z\2\u043e\u043f\7\u00d4\2\2\u043f\u0441\3\2\2")
        buf.write("\2\u0440\u043a\3\2\2\2\u0441\u0444\3\2\2\2\u0442\u0440")
        buf.write("\3\2\2\2\u0442\u0443\3\2\2\2\u0443\u00b1\3\2\2\2\u0444")
        buf.write("\u0442\3\2\2\2\u0445\u0446\bZ\1\2\u0446\u0449\5\u00ec")
        buf.write("w\2\u0447\u0449\7!\2\2\u0448\u0445\3\2\2\2\u0448\u0447")
        buf.write("\3\2\2\2\u0449\u0452\3\2\2\2\u044a\u044b\f\4\2\2\u044b")
        buf.write("\u044c\7\u00d7\2\2\u044c\u0451\5\u00ecw\2\u044d\u044e")
        buf.write("\f\3\2\2\u044e\u044f\7\u00d7\2\2\u044f\u0451\7!\2\2\u0450")
        buf.write("\u044a\3\2\2\2\u0450\u044d\3\2\2\2\u0451\u0454\3\2\2\2")
        buf.write("\u0452\u0450\3\2\2\2\u0452\u0453\3\2\2\2\u0453\u00b3\3")
        buf.write("\2\2\2\u0454\u0452\3\2\2\2\u0455\u0456\b[\1\2\u0456\u0457")
        buf.write("\5\u00eav\2\u0457\u0458\7\u00e8\2\2\u0458\u0459\5\u00ec")
        buf.write("w\2\u0459\u045f\3\2\2\2\u045a\u045b\5\u00eav\2\u045b\u045c")
        buf.write("\7\u00e8\2\2\u045c\u045d\7!\2\2\u045d\u045f\3\2\2\2\u045e")
        buf.write("\u0455\3\2\2\2\u045e\u045a\3\2\2\2\u045f\u046e\3\2\2\2")
        buf.write("\u0460\u0461\f\4\2\2\u0461\u0462\7\u00d7\2\2\u0462\u0463")
        buf.write("\5\u00eav\2\u0463\u0464\7\u00e8\2\2\u0464\u0465\5\u00ec")
        buf.write("w\2\u0465\u046d\3\2\2\2\u0466\u0467\f\3\2\2\u0467\u0468")
        buf.write("\7\u00d7\2\2\u0468\u0469\5\u00eav\2\u0469\u046a\7\u00e8")
        buf.write("\2\2\u046a\u046b\7!\2\2\u046b\u046d\3\2\2\2\u046c\u0460")
        buf.write("\3\2\2\2\u046c\u0466\3\2\2\2\u046d\u0470\3\2\2\2\u046e")
        buf.write("\u046c\3\2\2\2\u046e\u046f\3\2\2\2\u046f\u00b5\3\2\2\2")
        buf.write("\u0470\u046e\3\2\2\2\u0471\u0472\7s\2\2\u0472\u0473\5")
        buf.write("\u00aaV\2\u0473\u0474\5\u00acW\2\u0474\u0475\5\u00eav")
        buf.write("\2\u0475\u0476\5\u00aeX\2\u0476\u0477\7\u0097\2\2\u0477")
        buf.write("\u0478\5\u00b0Y\2\u0478\u0479\5\u00a8U\2\u0479\u048b\3")
        buf.write("\2\2\2\u047a\u047b\7s\2\2\u047b\u047c\5\u00aaV\2\u047c")
        buf.write("\u047d\5\u00acW\2\u047d\u047e\5\u00eav\2\u047e\u047f\7")
        buf.write("z\2\2\u047f\u0480\5\u00b4[\2\u0480\u0481\5\u00a8U\2\u0481")
        buf.write("\u048b\3\2\2\2\u0482\u0483\7s\2\2\u0483\u0484\5\u00aa")
        buf.write("V\2\u0484\u0485\5\u00acW\2\u0485\u0486\5\u00eav\2\u0486")
        buf.write("\u0487\5\u00aeX\2\u0487\u0488\5\b\5\2\u0488\u0489\5\u00a8")
        buf.write("U\2\u0489\u048b\3\2\2\2\u048a\u0471\3\2\2\2\u048a\u047a")
        buf.write("\3\2\2\2\u048a\u0482\3\2\2\2\u048b\u00b7\3\2\2\2\u048c")
        buf.write("\u048d\7\u0094\2\2\u048d\u048e\5\u00ba^\2\u048e\u048f")
        buf.write("\5n8\2\u048f\u0490\7z\2\2\u0490\u0491\5\u00bc_\2\u0491")
        buf.write("\u0492\5\36\20\2\u0492\u0493\5*\26\2\u0493\u0494\5.\30")
        buf.write("\2\u0494\u00b9\3\2\2\2\u0495\u049d\3\2\2\2\u0496\u0497")
        buf.write("\5\u00aaV\2\u0497\u0498\7T\2\2\u0498\u049d\3\2\2\2\u0499")
        buf.write("\u049a\5\u00aaV\2\u049a\u049b\7A\2\2\u049b\u049d\3\2\2")
        buf.write("\2\u049c\u0495\3\2\2\2\u049c\u0496\3\2\2\2\u049c\u0499")
        buf.write("\3\2\2\2\u049d\u00bb\3\2\2\2\u049e\u049f\b_\1\2\u049f")
        buf.write("\u04a0\5\u00eav\2\u04a0\u04a1\7\u00e8\2\2\u04a1\u04a2")
        buf.write("\5\u00ecw\2\u04a2\u04aa\3\2\2\2\u04a3\u04a4\5\u00eav\2")
        buf.write("\u04a4\u04a5\7\u00d2\2\2\u04a5\u04a6\5\u00eav\2\u04a6")
        buf.write("\u04a7\7\u00e8\2\2\u04a7\u04a8\5\u00ecw\2\u04a8\u04aa")
        buf.write("\3\2\2\2\u04a9\u049e\3\2\2\2\u04a9\u04a3\3\2\2\2\u04aa")
        buf.write("\u04bb\3\2\2\2\u04ab\u04ac\f\4\2\2\u04ac\u04ad\7\u00d7")
        buf.write("\2\2\u04ad\u04ae\5\u00eav\2\u04ae\u04af\7\u00e8\2\2\u04af")
        buf.write("\u04b0\5\u00ecw\2\u04b0\u04ba\3\2\2\2\u04b1\u04b2\f\3")
        buf.write("\2\2\u04b2\u04b3\7\u00d7\2\2\u04b3\u04b4\5\u00eav\2\u04b4")
        buf.write("\u04b5\7\u00d2\2\2\u04b5\u04b6\5\u00eav\2\u04b6\u04b7")
        buf.write("\7\u00e8\2\2\u04b7\u04b8\5\u00ecw\2\u04b8\u04ba\3\2\2")
        buf.write("\2\u04b9\u04ab\3\2\2\2\u04b9\u04b1\3\2\2\2\u04ba\u04bd")
        buf.write("\3\2\2\2\u04bb\u04b9\3\2\2\2\u04bb\u04bc\3\2\2\2\u04bc")
        buf.write("\u00bd\3\2\2\2\u04bd\u04bb\3\2\2\2\u04be\u04bf\7\26\2")
        buf.write("\2\u04bf\u04c0\7\30\2\2\u04c0\u04c1\5\u00c0a\2\u04c1\u04c2")
        buf.write("\5\u00eav\2\u04c2\u04c9\3\2\2\2\u04c3\u04c4\7\26\2\2\u04c4")
        buf.write("\u04c5\7v\2\2\u04c5\u04c6\5\u00c0a\2\u04c6\u04c7\5\u00ea")
        buf.write("v\2\u04c7\u04c9\3\2\2\2\u04c8\u04be\3\2\2\2\u04c8\u04c3")
        buf.write("\3\2\2\2\u04c9\u00bf\3\2\2\2\u04ca\u04ce\3\2\2\2\u04cb")
        buf.write("\u04cc\7@\2\2\u04cc\u04ce\7\62\2\2\u04cd\u04ca\3\2\2\2")
        buf.write("\u04cd\u04cb\3\2\2\2\u04ce\u00c1\3\2\2\2\u04cf\u04d0\7")
        buf.write("\26\2\2\u04d0\u04d1\5\u00dan\2\u04d1\u04d2\7\u0085\2\2")
        buf.write("\u04d2\u04d3\5\u00c0a\2\u04d3\u04d4\5\u00eav\2\u04d4\u04d5")
        buf.write("\7\u00d3\2\2\u04d5\u04d6\5\u00c4c\2\u04d6\u04d7\7\u00d4")
        buf.write("\2\2\u04d7\u0532\3\2\2\2\u04d8\u04d9\7\26\2\2\u04d9\u04da")
        buf.write("\5\u00dan\2\u04da\u04db\7\u0085\2\2\u04db\u04dc\5\u00c0")
        buf.write("a\2\u04dc\u04dd\5\u00eav\2\u04dd\u04de\7\u00d2\2\2\u04de")
        buf.write("\u04df\5\u00eav\2\u04df\u04e0\7\u00d3\2\2\u04e0\u04e1")
        buf.write("\5\u00c4c\2\u04e1\u04e2\7\u00d4\2\2\u04e2\u0532\3\2\2")
        buf.write("\2\u04e3\u04e4\7\26\2\2\u04e4\u04e5\5\u00dan\2\u04e5\u04e6")
        buf.write("\7\u0085\2\2\u04e6\u04e7\5\u00c0a\2\u04e7\u04e8\5\u00ea")
        buf.write("v\2\u04e8\u04e9\7\u00d3\2\2\u04e9\u04ea\5\u00c4c\2\u04ea")
        buf.write("\u04eb\7\u00d4\2\2\u04eb\u04ec\5\u00d6l\2\u04ec\u0532")
        buf.write("\3\2\2\2\u04ed\u04ee\7\26\2\2\u04ee\u04ef\5\u00dan\2\u04ef")
        buf.write("\u04f0\7\u0085\2\2\u04f0\u04f1\5\u00c0a\2\u04f1\u04f2")
        buf.write("\5\u00eav\2\u04f2\u04f3\5\u00d6l\2\u04f3\u0532\3\2\2\2")
        buf.write("\u04f4\u04f5\7\26\2\2\u04f5\u04f6\5\u00dan\2\u04f6\u04f7")
        buf.write("\7\u0085\2\2\u04f7\u04f8\5\u00c0a\2\u04f8\u04f9\5\u00ea")
        buf.write("v\2\u04f9\u04fa\7\u00d2\2\2\u04fa\u04fb\5\u00eav\2\u04fb")
        buf.write("\u04fc\7\u00d3\2\2\u04fc\u04fd\5\u00c4c\2\u04fd\u04fe")
        buf.write("\7\u00d4\2\2\u04fe\u04ff\5\u00d6l\2\u04ff\u0532\3\2\2")
        buf.write("\2\u0500\u0501\7\26\2\2\u0501\u0502\5\u00dan\2\u0502\u0503")
        buf.write("\7\u0085\2\2\u0503\u0504\5\u00c0a\2\u0504\u0505\5\u00ea")
        buf.write("v\2\u0505\u0506\7\u00d2\2\2\u0506\u0507\5\u00eav\2\u0507")
        buf.write("\u0508\5\u00d6l\2\u0508\u0532\3\2\2\2\u0509\u050a\7\26")
        buf.write("\2\2\u050a\u050b\5\u00dan\2\u050b\u050c\7\u0085\2\2\u050c")
        buf.write("\u050d\5\u00c0a\2\u050d\u0512\5\u00eav\2\u050e\u050f\7")
        buf.write("\u00d2\2\2\u050f\u0511\5\u00eav\2\u0510\u050e\3\2\2\2")
        buf.write("\u0511\u0514\3\2\2\2\u0512\u0510\3\2\2\2\u0512\u0513\3")
        buf.write("\2\2\2\u0513\u0515\3\2\2\2\u0514\u0512\3\2\2\2\u0515\u0516")
        buf.write("\7N\2\2\u0516\u051b\5\u00eav\2\u0517\u0518\7\u00d2\2\2")
        buf.write("\u0518\u051a\5\u00eav\2\u0519\u0517\3\2\2\2\u051a\u051d")
        buf.write("\3\2\2\2\u051b\u0519\3\2\2\2\u051b\u051c\3\2\2\2\u051c")
        buf.write("\u0532\3\2\2\2\u051d\u051b\3\2\2\2\u051e\u051f\7\26\2")
        buf.write("\2\u051f\u0520\5\u00dan\2\u0520\u0521\7\u0085\2\2\u0521")
        buf.write("\u0522\5\u00c0a\2\u0522\u0527\5\u00eav\2\u0523\u0524\7")
        buf.write("\u00d2\2\2\u0524\u0526\5\u00eav\2\u0525\u0523\3\2\2\2")
        buf.write("\u0526\u0529\3\2\2\2\u0527\u0525\3\2\2\2\u0527\u0528\3")
        buf.write("\2\2\2\u0528\u052b\3\2\2\2\u0529\u0527\3\2\2\2\u052a\u052c")
        buf.write("\7\5\2\2\u052b\u052a\3\2\2\2\u052b\u052c\3\2\2\2\u052c")
        buf.write("\u052d\3\2\2\2\u052d\u052e\5\b\5\2\u052e\u052f\7$\2\2")
        buf.write("\u052f\u0530\7g\2\2\u0530\u0532\3\2\2\2\u0531\u04cf\3")
        buf.write("\2\2\2\u0531\u04d8\3\2\2\2\u0531\u04e3\3\2\2\2\u0531\u04ed")
        buf.write("\3\2\2\2\u0531\u04f4\3\2\2\2\u0531\u0500\3\2\2\2\u0531")
        buf.write("\u0509\3\2\2\2\u0531\u051e\3\2\2\2\u0532\u00c3\3\2\2\2")
        buf.write("\u0533\u0534\bc\1\2\u0534\u0535\5\u00c6d\2\u0535\u053b")
        buf.write("\3\2\2\2\u0536\u0537\f\3\2\2\u0537\u0538\7\u00d7\2\2\u0538")
        buf.write("\u053a\5\u00c6d\2\u0539\u0536\3\2\2\2\u053a\u053d\3\2")
        buf.write("\2\2\u053b\u0539\3\2\2\2\u053b\u053c\3\2\2\2\u053c\u00c5")
        buf.write("\3\2\2\2\u053d\u053b\3\2\2\2\u053e\u053f\5\u00eav\2\u053f")
        buf.write("\u0540\5\u00d2j\2\u0540\u0541\5\u00c8e\2\u0541\u055f\3")
        buf.write("\2\2\2\u0542\u0543\7n\2\2\u0543\u0544\7K\2\2\u0544\u0545")
        buf.write("\7\u00d3\2\2\u0545\u0546\5`\61\2\u0546\u0547\7\u00d4\2")
        buf.write("\2\u0547\u055f\3\2\2\2\u0548\u0549\7K\2\2\u0549\u054a")
        buf.write("\7\u00d3\2\2\u054a\u054b\5`\61\2\u054b\u054c\7\u00d4\2")
        buf.write("\2\u054c\u055f\3\2\2\2\u054d\u054e\7C\2\2\u054e\u054f")
        buf.write("\7\u00d3\2\2\u054f\u0550\5`\61\2\u0550\u0551\7\u00d4\2")
        buf.write("\2\u0551\u055f\3\2\2\2\u0552\u0553\78\2\2\u0553\u0554")
        buf.write("\7C\2\2\u0554\u0555\7\u00d3\2\2\u0555\u0556\5`\61\2\u0556")
        buf.write("\u0557\7\u00d4\2\2\u0557\u055f\3\2\2\2\u0558\u0559\78")
        buf.write("\2\2\u0559\u055a\7K\2\2\u055a\u055b\7\u00d3\2\2\u055b")
        buf.write("\u055c\5`\61\2\u055c\u055d\7\u00d4\2\2\u055d\u055f\3\2")
        buf.write("\2\2\u055e\u053e\3\2\2\2\u055e\u0542\3\2\2\2\u055e\u0548")
        buf.write("\3\2\2\2\u055e\u054d\3\2\2\2\u055e\u0552\3\2\2\2\u055e")
        buf.write("\u0558\3\2\2\2\u055f\u00c7\3\2\2\2\u0560\u0584\be\1\2")
        buf.write("\u0561\u0562\f\r\2\2\u0562\u0563\7b\2\2\u0563\u0583\7")
        buf.write("c\2\2\u0564\u0565\f\f\2\2\u0565\u0583\7c\2\2\u0566\u0567")
        buf.write("\f\13\2\2\u0567\u0568\7!\2\2\u0568\u0583\5\u0120\u0091")
        buf.write("\2\u0569\u056a\f\n\2\2\u056a\u056b\7!\2\2\u056b\u0583")
        buf.write("\7\u00d1\2\2\u056c\u056d\f\t\2\2\u056d\u056e\7!\2\2\u056e")
        buf.write("\u0583\7\u00d0\2\2\u056f\u0570\f\b\2\2\u0570\u0583\7\7")
        buf.write("\2\2\u0571\u0572\f\7\2\2\u0572\u0573\7\u0092\2\2\u0573")
        buf.write("\u0574\7\u00d3\2\2\u0574\u0575\5`\61\2\u0575\u0576\7\u00d4")
        buf.write("\2\2\u0576\u0583\3\2\2\2\u0577\u0578\f\6\2\2\u0578\u0579")
        buf.write("\7\u0092\2\2\u0579\u0583\7K\2\2\u057a\u057b\f\5\2\2\u057b")
        buf.write("\u057c\7n\2\2\u057c\u0583\7K\2\2\u057d\u057e\f\4\2\2\u057e")
        buf.write("\u0583\7K\2\2\u057f\u0580\f\3\2\2\u0580\u0581\7\23\2\2")
        buf.write("\u0581\u0583\5\u0120\u0091\2\u0582\u0561\3\2\2\2\u0582")
        buf.write("\u0564\3\2\2\2\u0582\u0566\3\2\2\2\u0582\u0569\3\2\2\2")
        buf.write("\u0582\u056c\3\2\2\2\u0582\u056f\3\2\2\2\u0582\u0571\3")
        buf.write("\2\2\2\u0582\u0577\3\2\2\2\u0582\u057a\3\2\2\2\u0582\u057d")
        buf.write("\3\2\2\2\u0582\u057f\3\2\2\2\u0583\u0586\3\2\2\2\u0584")
        buf.write("\u0582\3\2\2\2\u0584\u0585\3\2\2\2\u0585\u00c9\3\2\2\2")
        buf.write("\u0586\u0584\3\2\2\2\u0587\u0591\3\2\2\2\u0588\u0589\7")
        buf.write("\u00d3\2\2\u0589\u058a\7\u00d1\2\2\u058a\u0591\7\u00d4")
        buf.write("\2\2\u058b\u058c\7\u00d3\2\2\u058c\u058d\7\u00d1\2\2\u058d")
        buf.write("\u058e\7\u00d7\2\2\u058e\u058f\7\u00d1\2\2\u058f\u0591")
        buf.write("\7\u00d4\2\2\u0590\u0587\3\2\2\2\u0590\u0588\3\2\2\2\u0590")
        buf.write("\u058b\3\2\2\2\u0591\u00cb\3\2\2\2\u0592\u0595\3\2\2\2")
        buf.write("\u0593\u0595\7\n\2\2\u0594\u0592\3\2\2\2\u0594\u0593\3")
        buf.write("\2\2\2\u0595\u00cd\3\2\2\2\u0596\u059d\bh\1\2\u0597\u0598")
        buf.write("\f\4\2\2\u0598\u059c\7\u0093\2\2\u0599\u059a\f\3\2\2\u059a")
        buf.write("\u059c\7\u00a0\2\2\u059b\u0597\3\2\2\2\u059b\u0599\3\2")
        buf.write("\2\2\u059c\u059f\3\2\2\2\u059d\u059b\3\2\2\2\u059d\u059e")
        buf.write("\3\2\2\2\u059e\u00cf\3\2\2\2\u059f\u059d\3\2\2\2\u05a0")
        buf.write("\u05aa\bi\1\2\u05a1\u05a2\f\4\2\2\u05a2\u05a3\7\21\2\2")
        buf.write("\u05a3\u05a4\7z\2\2\u05a4\u05a9\5\u0120\u0091\2\u05a5")
        buf.write("\u05a6\f\3\2\2\u05a6\u05a7\7\22\2\2\u05a7\u05a9\5\u0120")
        buf.write("\u0091\2\u05a8\u05a1\3\2\2\2\u05a8\u05a5\3\2\2\2\u05a9")
        buf.write("\u05ac\3\2\2\2\u05aa\u05a8\3\2\2\2\u05aa\u05ab\3\2\2\2")
        buf.write("\u05ab\u00d1\3\2\2\2\u05ac\u05aa\3\2\2\2\u05ad\u05ae\7")
        buf.write("\13\2\2\u05ae\u060d\5\u00caf\2\u05af\u05b0\7\u008d\2\2")
        buf.write("\u05b0\u05b1\5\u00caf\2\u05b1\u05b2\5\u00ceh\2\u05b2\u060d")
        buf.write("\3\2\2\2\u05b3\u05b4\7}\2\2\u05b4\u05b5\5\u00caf\2\u05b5")
        buf.write("\u05b6\5\u00ceh\2\u05b6\u060d\3\2\2\2\u05b7\u05b8\7W\2")
        buf.write("\2\u05b8\u05b9\5\u00caf\2\u05b9\u05ba\5\u00ceh\2\u05ba")
        buf.write("\u060d\3\2\2\2\u05bb\u05bc\7F\2\2\u05bc\u05bd\5\u00ca")
        buf.write("f\2\u05bd\u05be\5\u00ceh\2\u05be\u060d\3\2\2\2\u05bf\u05c0")
        buf.write("\7\t\2\2\u05c0\u05c1\5\u00caf\2\u05c1\u05c2\5\u00ceh\2")
        buf.write("\u05c2\u060d\3\2\2\2\u05c3\u05c4\7q\2\2\u05c4\u05c5\5")
        buf.write("\u00caf\2\u05c5\u05c6\5\u00ceh\2\u05c6\u060d\3\2\2\2\u05c7")
        buf.write("\u05c8\7+\2\2\u05c8\u05c9\5\u00caf\2\u05c9\u05ca\5\u00ce")
        buf.write("h\2\u05ca\u060d\3\2\2\2\u05cb\u05cc\7\64\2\2\u05cc\u05cd")
        buf.write("\5\u00caf\2\u05cd\u05ce\5\u00ceh\2\u05ce\u060d\3\2\2\2")
        buf.write("\u05cf\u05d0\7 \2\2\u05d0\u05d1\5\u00caf\2\u05d1\u05d2")
        buf.write("\5\u00ceh\2\u05d2\u060d\3\2\2\2\u05d3\u060d\7\31\2\2\u05d4")
        buf.write("\u060d\7\u008a\2\2\u05d5\u060d\7\u008b\2\2\u05d6\u060d")
        buf.write("\7\32\2\2\u05d7\u060d\7\u009e\2\2\u05d8\u05d9\7\21\2\2")
        buf.write("\u05d9\u05da\5\u00caf\2\u05da\u05db\5\u00d0i\2\u05db\u060d")
        buf.write("\3\2\2\2\u05dc\u05dd\7\u0099\2\2\u05dd\u05de\7\u00d3\2")
        buf.write("\2\u05de\u05df\7\u00d1\2\2\u05df\u05e0\7\u00d4\2\2\u05e0")
        buf.write("\u060d\5\u00d0i\2\u05e1\u05e2\7a\2\2\u05e2\u05e3\7\u00d3")
        buf.write("\2\2\u05e3\u05e4\7\u00d1\2\2\u05e4\u05e5\7\u00d4\2\2\u05e5")
        buf.write("\u060d\5\u00d0i\2\u05e6\u05e7\7\n\2\2\u05e7\u060d\5\u00ca")
        buf.write("f\2\u05e8\u05e9\7\u0098\2\2\u05e9\u05ea\7\u00d3\2\2\u05ea")
        buf.write("\u05eb\7\u00d1\2\2\u05eb\u060d\7\u00d4\2\2\u05ec\u060d")
        buf.write("\7\u008c\2\2\u05ed\u060d\7\f\2\2\u05ee\u060d\7U\2\2\u05ef")
        buf.write("\u060d\7R\2\2\u05f0\u05f1\7\u008e\2\2\u05f1\u05f2\5\u00cc")
        buf.write("g\2\u05f2\u05f3\5\u00d0i\2\u05f3\u060d\3\2\2\2\u05f4\u05f5")
        buf.write("\7\u0088\2\2\u05f5\u05f6\5\u00ccg\2\u05f6\u05f7\5\u00d0")
        buf.write("i\2\u05f7\u060d\3\2\2\2\u05f8\u05f9\7X\2\2\u05f9\u05fa")
        buf.write("\5\u00ccg\2\u05fa\u05fb\5\u00d0i\2\u05fb\u060d\3\2\2\2")
        buf.write("\u05fc\u05fd\7S\2\2\u05fd\u05fe\5\u00ccg\2\u05fe\u05ff")
        buf.write("\5\u00d0i\2\u05ff\u060d\3\2\2\2\u0600\u0601\7/\2\2\u0601")
        buf.write("\u0602\7\u00d3\2\2\u0602\u0603\5\u00d4k\2\u0603\u0604")
        buf.write("\7\u00d4\2\2\u0604\u0605\5\u00d0i\2\u0605\u060d\3\2\2")
        buf.write("\2\u0606\u0607\7z\2\2\u0607\u0608\7\u00d3\2\2\u0608\u0609")
        buf.write("\5\u00d4k\2\u0609\u060a\7\u00d4\2\2\u060a\u060b\5\u00d0")
        buf.write("i\2\u060b\u060d\3\2\2\2\u060c\u05ad\3\2\2\2\u060c\u05af")
        buf.write("\3\2\2\2\u060c\u05b3\3\2\2\2\u060c\u05b7\3\2\2\2\u060c")
        buf.write("\u05bb\3\2\2\2\u060c\u05bf\3\2\2\2\u060c\u05c3\3\2\2\2")
        buf.write("\u060c\u05c7\3\2\2\2\u060c\u05cb\3\2\2\2\u060c\u05cf\3")
        buf.write("\2\2\2\u060c\u05d3\3\2\2\2\u060c\u05d4\3\2\2\2\u060c\u05d5")
        buf.write("\3\2\2\2\u060c\u05d6\3\2\2\2\u060c\u05d7\3\2\2\2\u060c")
        buf.write("\u05d8\3\2\2\2\u060c\u05dc\3\2\2\2\u060c\u05e1\3\2\2\2")
        buf.write("\u060c\u05e6\3\2\2\2\u060c\u05e8\3\2\2\2\u060c\u05ec\3")
        buf.write("\2\2\2\u060c\u05ed\3\2\2\2\u060c\u05ee\3\2\2\2\u060c\u05ef")
        buf.write("\3\2\2\2\u060c\u05f0\3\2\2\2\u060c\u05f4\3\2\2\2\u060c")
        buf.write("\u05f8\3\2\2\2\u060c\u05fc\3\2\2\2\u060c\u0600\3\2\2\2")
        buf.write("\u060c\u0606\3\2\2\2\u060d\u00d3\3\2\2\2\u060e\u060f\b")
        buf.write("k\1\2\u060f\u0610\5\u0120\u0091\2\u0610\u0616\3\2\2\2")
        buf.write("\u0611\u0612\f\3\2\2\u0612\u0613\7\u00d7\2\2\u0613\u0615")
        buf.write("\5\u0120\u0091\2\u0614\u0611\3\2\2\2\u0615\u0618\3\2\2")
        buf.write("\2\u0616\u0614\3\2\2\2\u0616\u0617\3\2\2\2\u0617\u00d5")
        buf.write("\3\2\2\2\u0618\u0616\3\2\2\2\u0619\u061a\5\u00d8m\2\u061a")
        buf.write("\u061b\5x=\2\u061b\u061c\5\b\5\2\u061c\u00d7\3\2\2\2\u061d")
        buf.write("\u0621\3\2\2\2\u061e\u0621\7A\2\2\u061f\u0621\7s\2\2\u0620")
        buf.write("\u061d\3\2\2\2\u0620\u061e\3\2\2\2\u0620\u061f\3\2\2\2")
        buf.write("\u0621\u00d9\3\2\2\2\u0622\u0625\3\2\2\2\u0623\u0625\7")
        buf.write("\u0086\2\2\u0624\u0622\3\2\2\2\u0624\u0623\3\2\2\2\u0625")
        buf.write("\u00db\3\2\2\2\u0626\u0627\7z\2\2\u0627\u0628\5\u00de")
        buf.write("p\2\u0628\u00dd\3\2\2\2\u0629\u062a\bp\1\2\u062a\u062b")
        buf.write("\5\u00e0q\2\u062b\u0631\3\2\2\2\u062c\u062d\f\3\2\2\u062d")
        buf.write("\u062e\7\u00d7\2\2\u062e\u0630\5\u00e0q\2\u062f\u062c")
        buf.write("\3\2\2\2\u0630\u0633\3\2\2\2\u0631\u062f\3\2\2\2\u0631")
        buf.write("\u0632\3\2\2\2\u0632\u00df\3\2\2\2\u0633\u0631\3\2\2\2")
        buf.write("\u0634\u0635\7\u00f1\2\2\u0635\u0636\7\u00e8\2\2\u0636")
        buf.write("\u063b\5\u00ecw\2\u0637\u0638\7\u00f1\2\2\u0638\u0639")
        buf.write("\7\u00ce\2\2\u0639\u063b\5\u00ecw\2\u063a\u0634\3\2\2")
        buf.write("\2\u063a\u0637\3\2\2\2\u063b\u00e1\3\2\2\2\u063c\u063d")
        buf.write("\br\1\2\u063d\u063e\5\u00ecw\2\u063e\u0644\3\2\2\2\u063f")
        buf.write("\u0640\f\3\2\2\u0640\u0641\7\u00d7\2\2\u0641\u0643\5\u00ec")
        buf.write("w\2\u0642\u063f\3\2\2\2\u0643\u0646\3\2\2\2\u0644\u0642")
        buf.write("\3\2\2\2\u0644\u0645\3\2\2\2\u0645\u00e3\3\2\2\2\u0646")
        buf.write("\u0644\3\2\2\2\u0647\u064a\3\2\2\2\u0648\u064a\5\u00e6")
        buf.write("t\2\u0649\u0647\3\2\2\2\u0649\u0648\3\2\2\2\u064a\u00e5")
        buf.write("\3\2\2\2\u064b\u064c\bt\1\2\u064c\u064d\5\u00e8u\2\u064d")
        buf.write("\u0653\3\2\2\2\u064e\u064f\f\3\2\2\u064f\u0650\7\u00d7")
        buf.write("\2\2\u0650\u0652\5\u00e8u\2\u0651\u064e\3\2\2\2\u0652")
        buf.write("\u0655\3\2\2\2\u0653\u0651\3\2\2\2\u0653\u0654\3\2\2\2")
        buf.write("\u0654\u00e7\3\2\2\2\u0655\u0653\3\2\2\2\u0656\u0657\5")
        buf.write("\u00ecw\2\u0657\u0658\5F$\2\u0658\u00e9\3\2\2\2\u0659")
        buf.write("\u065e\7\u00f0\2\2\u065a\u065b\7\u00d2\2\2\u065b\u065d")
        buf.write("\7\u00f0\2\2\u065c\u065a\3\2\2\2\u065d\u0660\3\2\2\2\u065e")
        buf.write("\u065c\3\2\2\2\u065e\u065f\3\2\2\2\u065f\u0664\3\2\2\2")
        buf.write("\u0660\u065e\3\2\2\2\u0661\u0664\7\u00ec\2\2\u0662\u0664")
        buf.write("\5\u0106\u0084\2\u0663\u0659\3\2\2\2\u0663\u0661\3\2\2")
        buf.write("\2\u0663\u0662\3\2\2\2\u0664\u00eb\3\2\2\2\u0665\u0666")
        buf.write("\bw\1\2\u0666\u0667\7b\2\2\u0667\u0675\5\u00ecw\13\u0668")
        buf.write("\u0669\7\u00e2\2\2\u0669\u0675\5\u00ecw\n\u066a\u066b")
        buf.write("\5\u00eex\2\u066b\u066c\7I\2\2\u066c\u066d\7b\2\2\u066d")
        buf.write("\u066e\7\u00d0\2\2\u066e\u0675\3\2\2\2\u066f\u0670\5\u00ee")
        buf.write("x\2\u0670\u0671\7I\2\2\u0671\u0672\7\u00d0\2\2\u0672\u0675")
        buf.write("\3\2\2\2\u0673\u0675\5\u00eex\2\u0674\u0665\3\2\2\2\u0674")
        buf.write("\u0668\3\2\2\2\u0674\u066a\3\2\2\2\u0674\u066f\3\2\2\2")
        buf.write("\u0674\u0673\3\2\2\2\u0675\u0684\3\2\2\2\u0676\u0677\f")
        buf.write("\t\2\2\u0677\u0678\7\u00e6\2\2\u0678\u0683\5\u00ecw\n")
        buf.write("\u0679\u067a\f\b\2\2\u067a\u067b\7\u009d\2\2\u067b\u0683")
        buf.write("\5\u00ecw\t\u067c\u067d\f\7\2\2\u067d\u067e\7\u00e7\2")
        buf.write("\2\u067e\u0683\5\u00ecw\b\u067f\u0680\f\6\2\2\u0680\u0681")
        buf.write("\7\u00cf\2\2\u0681\u0683\5\u011a\u008e\2\u0682\u0676\3")
        buf.write("\2\2\2\u0682\u0679\3\2\2\2\u0682\u067c\3\2\2\2\u0682\u067f")
        buf.write("\3\2\2\2\u0683\u0686\3\2\2\2\u0684\u0682\3\2\2\2\u0684")
        buf.write("\u0685\3\2\2\2\u0685\u00ed\3\2\2\2\u0686\u0684\3\2\2\2")
        buf.write("\u0687\u0688\bx\1\2\u0688\u0689\7\u00f1\2\2\u0689\u068a")
        buf.write("\7\u00ce\2\2\u068a\u068d\5\u00f2z\2\u068b\u068d\5\u00f2")
        buf.write("z\2\u068c\u0687\3\2\2\2\u068c\u068b\3\2\2\2\u068d\u06ec")
        buf.write("\3\2\2\2\u068e\u068f\f\17\2\2\u068f\u0690\7\u00e8\2\2")
        buf.write("\u0690\u06eb\5\u00eex\20\u0691\u0692\f\13\2\2\u0692\u0693")
        buf.write("\7\b\2\2\u0693\u0694\5\u00eex\2\u0694\u0695\7\u00e6\2")
        buf.write("\2\u0695\u0696\5\u00eex\f\u0696\u06eb\3\2\2\2\u0697\u0698")
        buf.write("\f\n\2\2\u0698\u0699\7b\2\2\u0699\u069a\7\b\2\2\u069a")
        buf.write("\u069b\5\u00eex\2\u069b\u069c\7\u00e6\2\2\u069c\u069d")
        buf.write("\5\u00eex\13\u069d\u06eb\3\2\2\2\u069e\u069f\f\t\2\2\u069f")
        buf.write("\u06a0\7\177\2\2\u06a0\u06a1\7N\2\2\u06a1\u06eb\5\u00ee")
        buf.write("x\n\u06a2\u06a3\f\6\2\2\u06a3\u06a4\7r\2\2\u06a4\u06eb")
        buf.write("\5\u00eex\7\u06a5\u06a6\f\5\2\2\u06a6\u06a7\7b\2\2\u06a7")
        buf.write("\u06a8\7r\2\2\u06a8\u06eb\5\u00eex\6\u06a9\u06aa\f\25")
        buf.write("\2\2\u06aa\u06ab\7B\2\2\u06ab\u06ac\7\u00d3\2\2\u06ac")
        buf.write("\u06ad\5\u00e2r\2\u06ad\u06ae\7\u00d4\2\2\u06ae\u06eb")
        buf.write("\3\2\2\2\u06af\u06b0\f\24\2\2\u06b0\u06b1\7b\2\2\u06b1")
        buf.write("\u06b2\7B\2\2\u06b2\u06b3\7\u00d3\2\2\u06b3\u06b4\5\u00e2")
        buf.write("r\2\u06b4\u06b5\7\u00d4\2\2\u06b5\u06eb\3\2\2\2\u06b6")
        buf.write("\u06b7\f\23\2\2\u06b7\u06b8\7B\2\2\u06b8\u06b9\7\u00d3")
        buf.write("\2\2\u06b9\u06ba\5\b\5\2\u06ba\u06bb\7\u00d4\2\2\u06bb")
        buf.write("\u06eb\3\2\2\2\u06bc\u06bd\f\22\2\2\u06bd\u06be\7b\2\2")
        buf.write("\u06be\u06bf\7B\2\2\u06bf\u06c0\7\u00d3\2\2\u06c0\u06c1")
        buf.write("\5\b\5\2\u06c1\u06c2\7\u00d4\2\2\u06c2\u06eb\3\2\2\2\u06c3")
        buf.write("\u06c4\f\21\2\2\u06c4\u06c5\7I\2\2\u06c5\u06eb\7c\2\2")
        buf.write("\u06c6\u06c7\f\20\2\2\u06c7\u06c8\7I\2\2\u06c8\u06c9\7")
        buf.write("b\2\2\u06c9\u06eb\7c\2\2\u06ca\u06cb\f\16\2\2\u06cb\u06cc")
        buf.write("\7\u00e8\2\2\u06cc\u06cd\7\4\2\2\u06cd\u06ce\7\u00d3\2")
        buf.write("\2\u06ce\u06cf\5\b\5\2\u06cf\u06d0\7\u00d4\2\2\u06d0\u06eb")
        buf.write("\3\2\2\2\u06d1\u06d2\f\r\2\2\u06d2\u06d3\7\u00e8\2\2\u06d3")
        buf.write("\u06d4\7~\2\2\u06d4\u06d5\7\u00d3\2\2\u06d5\u06d6\5\b")
        buf.write("\5\2\u06d6\u06d7\7\u00d4\2\2\u06d7\u06eb\3\2\2\2\u06d8")
        buf.write("\u06d9\f\f\2\2\u06d9\u06da\7\u00e8\2\2\u06da\u06db\7\3")
        buf.write("\2\2\u06db\u06dc\7\u00d3\2\2\u06dc\u06dd\5\b\5\2\u06dd")
        buf.write("\u06de\7\u00d4\2\2\u06de\u06eb\3\2\2\2\u06df\u06e0\f\b")
        buf.write("\2\2\u06e0\u06e1\7N\2\2\u06e1\u06e2\5\u00eex\2\u06e2\u06e3")
        buf.write("\5\u00f0y\2\u06e3\u06eb\3\2\2\2\u06e4\u06e5\f\7\2\2\u06e5")
        buf.write("\u06e6\7b\2\2\u06e6\u06e7\7N\2\2\u06e7\u06e8\5\u00eex")
        buf.write("\2\u06e8\u06e9\5\u00f0y\2\u06e9\u06eb\3\2\2\2\u06ea\u068e")
        buf.write("\3\2\2\2\u06ea\u0691\3\2\2\2\u06ea\u0697\3\2\2\2\u06ea")
        buf.write("\u069e\3\2\2\2\u06ea\u06a2\3\2\2\2\u06ea\u06a5\3\2\2\2")
        buf.write("\u06ea\u06a9\3\2\2\2\u06ea\u06af\3\2\2\2\u06ea\u06b6\3")
        buf.write("\2\2\2\u06ea\u06bc\3\2\2\2\u06ea\u06c3\3\2\2\2\u06ea\u06c6")
        buf.write("\3\2\2\2\u06ea\u06ca\3\2\2\2\u06ea\u06d1\3\2\2\2\u06ea")
        buf.write("\u06d8\3\2\2\2\u06ea\u06df\3\2\2\2\u06ea\u06e4\3\2\2\2")
        buf.write("\u06eb\u06ee\3\2\2\2\u06ec\u06ea\3\2\2\2\u06ec\u06ed\3")
        buf.write("\2\2\2\u06ed\u00ef\3\2\2\2\u06ee\u06ec\3\2\2\2\u06ef\u06f3")
        buf.write("\3\2\2\2\u06f0\u06f1\7\60\2\2\u06f1\u06f3\5\u0120\u0091")
        buf.write("\2\u06f2\u06ef\3\2\2\2\u06f2\u06f0\3\2\2\2\u06f3\u00f1")
        buf.write("\3\2\2\2\u06f4\u06f5\bz\1\2\u06f5\u070e\5\u00f4{\2\u06f6")
        buf.write("\u070e\5\u00f6|\2\u06f7\u070e\5\u010a\u0086\2\u06f8\u070e")
        buf.write("\7\u00f1\2\2\u06f9\u06fa\7\u00dd\2\2\u06fa\u070e\5\u00f2")
        buf.write("z\t\u06fb\u06fc\7\u00dc\2\2\u06fc\u070e\5\u00f2z\b\u06fd")
        buf.write("\u06fe\7\u00de\2\2\u06fe\u070e\5\u00f2z\7\u06ff\u0700")
        buf.write("\7\n\2\2\u0700\u070e\5\u00f2z\6\u0701\u0702\7\u00d3\2")
        buf.write("\2\u0702\u0703\5\u00e2r\2\u0703\u0704\7\u00d4\2\2\u0704")
        buf.write("\u070e\3\2\2\2\u0705\u0706\7\u00d3\2\2\u0706\u0707\5\b")
        buf.write("\5\2\u0707\u0708\7\u00d4\2\2\u0708\u070e\3\2\2\2\u0709")
        buf.write("\u070a\7G\2\2\u070a\u070b\5\u00ecw\2\u070b\u070c\5\u0108")
        buf.write("\u0085\2\u070c\u070e\3\2\2\2\u070d\u06f4\3\2\2\2\u070d")
        buf.write("\u06f6\3\2\2\2\u070d\u06f7\3\2\2\2\u070d\u06f8\3\2\2\2")
        buf.write("\u070d\u06f9\3\2\2\2\u070d\u06fb\3\2\2\2\u070d\u06fd\3")
        buf.write("\2\2\2\u070d\u06ff\3\2\2\2\u070d\u0701\3\2\2\2\u070d\u0705")
        buf.write("\3\2\2\2\u070d\u0709\3\2\2\2\u070e\u0735\3\2\2\2\u070f")
        buf.write("\u0710\f\24\2\2\u0710\u0711\7\u00e0\2\2\u0711\u0734\5")
        buf.write("\u00f2z\25\u0712\u0713\f\23\2\2\u0713\u0714\7\u00df\2")
        buf.write("\2\u0714\u0734\5\u00f2z\24\u0715\u0716\f\22\2\2\u0716")
        buf.write("\u0717\7\u00e1\2\2\u0717\u0734\5\u00f2z\23\u0718\u0719")
        buf.write("\f\21\2\2\u0719\u071a\7\u00e9\2\2\u071a\u0734\5\u00f2")
        buf.write("z\22\u071b\u071c\f\20\2\2\u071c\u071d\7\u00dc\2\2\u071d")
        buf.write("\u0734\5\u00f2z\21\u071e\u071f\f\17\2\2\u071f\u0720\7")
        buf.write("\u00dd\2\2\u0720\u0734\5\u00f2z\20\u0721\u0722\f\16\2")
        buf.write("\2\u0722\u0723\7\u00d9\2\2\u0723\u0734\5\u00f2z\17\u0724")
        buf.write("\u0725\f\r\2\2\u0725\u0726\7\u00da\2\2\u0726\u0734\5\u00f2")
        buf.write("z\16\u0727\u0728\f\f\2\2\u0728\u0729\7\u00db\2\2\u0729")
        buf.write("\u0734\5\u00f2z\r\u072a\u072b\f\13\2\2\u072b\u072c\7\\")
        buf.write("\2\2\u072c\u0734\5\u00f2z\f\u072d\u072e\f\n\2\2\u072e")
        buf.write("\u072f\7)\2\2\u072f\u0734\5\u00f2z\13\u0730\u0731\f\26")
        buf.write("\2\2\u0731\u0732\7\22\2\2\u0732\u0734\5\u0102\u0082\2")
        buf.write("\u0733\u070f\3\2\2\2\u0733\u0712\3\2\2\2\u0733\u0715\3")
        buf.write("\2\2\2\u0733\u0718\3\2\2\2\u0733\u071b\3\2\2\2\u0733\u071e")
        buf.write("\3\2\2\2\u0733\u0721\3\2\2\2\u0733\u0724\3\2\2\2\u0733")
        buf.write("\u0727\3\2\2\2\u0733\u072a\3\2\2\2\u0733\u072d\3\2\2\2")
        buf.write("\u0733\u0730\3\2\2\2\u0734\u0737\3\2\2\2\u0735\u0733\3")
        buf.write("\2\2\2\u0735\u0736\3\2\2\2\u0736\u00f3\3\2\2\2\u0737\u0735")
        buf.write("\3\2\2\2\u0738\u0740\5\u00fc\177\2\u0739\u0740\7\u00d1")
        buf.write("\2\2\u073a\u0740\5\u00f8}\2\u073b\u0740\5\u00fa~\2\u073c")
        buf.write("\u0740\7c\2\2\u073d\u0740\7\u00d0\2\2\u073e\u0740\7\u00d9")
        buf.write("\2\2\u073f\u0738\3\2\2\2\u073f\u0739\3\2\2\2\u073f\u073a")
        buf.write("\3\2\2\2\u073f\u073b\3\2\2\2\u073f\u073c\3\2\2\2\u073f")
        buf.write("\u073d\3\2\2\2\u073f\u073e\3\2\2\2\u0740\u00f5\3\2\2\2")
        buf.write("\u0741\u0746\5\u00eav\2\u0742\u0743\7\u00d2\2\2\u0743")
        buf.write("\u0745\5\u00eav\2\u0744\u0742\3\2\2\2\u0745\u0748\3\2")
        buf.write("\2\2\u0746\u0744\3\2\2\2\u0746\u0747\3\2\2\2\u0747\u00f7")
        buf.write("\3\2\2\2\u0748\u0746\3\2\2\2\u0749\u074f\7\u00ed\2\2\u074a")
        buf.write("\u074b\7\u00e4\2\2\u074b\u074c\5\u0122\u0092\2\u074c\u074d")
        buf.write("\7\u00ed\2\2\u074d\u074f\3\2\2\2\u074e\u0749\3\2\2\2\u074e")
        buf.write("\u074a\3\2\2\2\u074f\u00f9\3\2\2\2\u0750\u0756\7\u00ee")
        buf.write("\2\2\u0751\u0752\7\u00e4\2\2\u0752\u0753\5\u0122\u0092")
        buf.write("\2\u0753\u0754\7\u00ee\2\2\u0754\u0756\3\2\2\2\u0755\u0750")
        buf.write("\3\2\2\2\u0755\u0751\3\2\2\2\u0756\u00fb\3\2\2\2\u0757")
        buf.write("\u076b\5\u0100\u0081\2\u0758\u0759\5\u0120\u0091\2\u0759")
        buf.write("\u075a\7\22\2\2\u075a\u075b\5\u0102\u0082\2\u075b\u076b")
        buf.write("\3\2\2\2\u075c\u076b\7\u00ef\2\2\u075d\u075e\7\u00ef\2")
        buf.write("\2\u075e\u076b\5\u0100\u0081\2\u075f\u0760\7\u00ef\2\2")
        buf.write("\u0760\u0761\7\22\2\2\u0761\u076b\5\u0102\u0082\2\u0762")
        buf.write("\u0763\5\u00fe\u0080\2\u0763\u0764\5\u0100\u0081\2\u0764")
        buf.write("\u076b\3\2\2\2\u0765\u0766\5\u00fe\u0080\2\u0766\u0767")
        buf.write("\5\u0120\u0091\2\u0767\u0768\7\22\2\2\u0768\u0769\5\u0102")
        buf.write("\u0082\2\u0769\u076b\3\2\2\2\u076a\u0757\3\2\2\2\u076a")
        buf.write("\u0758\3\2\2\2\u076a\u075c\3\2\2\2\u076a\u075d\3\2\2\2")
        buf.write("\u076a\u075f\3\2\2\2\u076a\u0762\3\2\2\2\u076a\u0765\3")
        buf.write("\2\2\2\u076b\u00fd\3\2\2\2\u076c\u076d\7\u00e4\2\2\u076d")
        buf.write("\u076e\5\u0122\u0092\2\u076e\u00ff\3\2\2\2\u076f\u0770")
        buf.write("\b\u0081\1\2\u0770\u0771\5\u0120\u0091\2\u0771\u0776\3")
        buf.write("\2\2\2\u0772\u0773\f\4\2\2\u0773\u0775\5\u0120\u0091\2")
        buf.write("\u0774\u0772\3\2\2\2\u0775\u0778\3\2\2\2\u0776\u0774\3")
        buf.write("\2\2\2\u0776\u0777\3\2\2\2\u0777\u0101\3\2\2\2\u0778\u0776")
        buf.write("\3\2\2\2\u0779\u077c\5\u00eav\2\u077a\u077c\5\u0120\u0091")
        buf.write("\2\u077b\u0779\3\2\2\2\u077b\u077a\3\2\2\2\u077c\u0103")
        buf.write("\3\2\2\2\u077d\u077e\t\5\2\2\u077e\u0105\3\2\2\2\u077f")
        buf.write("\u0780\t\6\2\2\u0780\u0107\3\2\2\2\u0781\u0782\t\7\2\2")
        buf.write("\u0782\u0109\3\2\2\2\u0783\u0786\5\u0112\u008a\2\u0784")
        buf.write("\u0786\5\u010c\u0087\2\u0785\u0783\3\2\2\2\u0785\u0784")
        buf.write("\3\2\2\2\u0786\u010b\3\2\2\2\u0787\u0788\5\u00eav\2\u0788")
        buf.write("\u0789\7\u00d3\2\2\u0789\u078a\5\u00e4s\2\u078a\u078b")
        buf.write("\7\u00d4\2\2\u078b\u079f\3\2\2\2\u078c\u0791\5\u00eav")
        buf.write("\2\u078d\u078e\7\u00d2\2\2\u078e\u0790\5\u00eav\2\u078f")
        buf.write("\u078d\3\2\2\2\u0790\u0793\3\2\2\2\u0791\u078f\3\2\2\2")
        buf.write("\u0791\u0792\3\2\2\2\u0792\u0794\3\2\2\2\u0793\u0791\3")
        buf.write("\2\2\2\u0794\u0795\7\u00d3\2\2\u0795\u0796\5\u0110\u0089")
        buf.write("\2\u0796\u0797\7\u00d4\2\2\u0797\u079f\3\2\2\2\u0798\u0799")
        buf.write("\5\u010e\u0088\2\u0799\u079a\7\u00d3\2\2\u079a\u079b\5")
        buf.write("\u0110\u0089\2\u079b\u079c\7\u00d4\2\2\u079c\u079f\3\2")
        buf.write("\2\2\u079d\u079f\7\u00f2\2\2\u079e\u0787\3\2\2\2\u079e")
        buf.write("\u078c\3\2\2\2\u079e\u0798\3\2\2\2\u079e\u079d\3\2\2\2")
        buf.write("\u079f\u010d\3\2\2\2\u07a0\u07a1\t\b\2\2\u07a1\u010f\3")
        buf.write("\2\2\2\u07a2\u07a5\3\2\2\2\u07a3\u07a5\5\u00e2r\2\u07a4")
        buf.write("\u07a2\3\2\2\2\u07a4\u07a3\3\2\2\2\u07a5\u0111\3\2\2\2")
        buf.write("\u07a6\u07a7\7\u00cb\2\2\u07a7\u07a8\7\u00d3\2\2\u07a8")
        buf.write("\u07a9\5\u00ecw\2\u07a9\u07aa\7\5\2\2\u07aa\u07ab\5\u011a")
        buf.write("\u008e\2\u07ab\u07ac\7\u00d4\2\2\u07ac\u0889\3\2\2\2\u07ad")
        buf.write("\u07ae\7\20\2\2\u07ae\u07af\5\u0114\u008b\2\u07af\u07b0")
        buf.write("\5\u0116\u008c\2\u07b0\u07b1\5\u0118\u008d\2\u07b1\u07b2")
        buf.write("\7-\2\2\u07b2\u0889\3\2\2\2\u07b3\u07b4\7\24\2\2\u07b4")
        buf.write("\u07b5\7\u00d3\2\2\u07b5\u07b6\5\u00ecw\2\u07b6\u07b7")
        buf.write("\7\u00d7\2\2\u07b7\u07b8\5\u011a\u008e\2\u07b8\u07b9\7")
        buf.write("\u00d4\2\2\u07b9\u0889\3\2\2\2\u07ba\u07bb\7\24\2\2\u07bb")
        buf.write("\u07bc\7\u00d3\2\2\u07bc\u07bd\5\u00ecw\2\u07bd\u07be")
        buf.write("\7\u0096\2\2\u07be\u07bf\5\u011e\u0090\2\u07bf\u07c0\7")
        buf.write("\u00d4\2\2\u07c0\u0889\3\2\2\2\u07c1\u07c2\7\24\2\2\u07c2")
        buf.write("\u07c3\7\u00d3\2\2\u07c3\u07c4\7F\2\2\u07c4\u07c5\7\u00d7")
        buf.write("\2\2\u07c5\u07c6\5\u00ecw\2\u07c6\u07c7\7\u00d4\2\2\u07c7")
        buf.write("\u0889\3\2\2\2\u07c8\u07c9\7\21\2\2\u07c9\u07ca\7\u00d3")
        buf.write("\2\2\u07ca\u07cb\5\u00e2r\2\u07cb\u07cc\7\u00d4\2\2\u07cc")
        buf.write("\u0889\3\2\2\2\u07cd\u07ce\7\21\2\2\u07ce\u07cf\7\u00d3")
        buf.write("\2\2\u07cf\u07d0\5\u00e2r\2\u07d0\u07d1\7\u0096\2\2\u07d1")
        buf.write("\u07d2\5\u011e\u0090\2\u07d2\u07d3\7\u00d4\2\2\u07d3\u0889")
        buf.write("\3\2\2\2\u07d4\u07d5\7\25\2\2\u07d5\u07d6\7\u00d3\2\2")
        buf.write("\u07d6\u07d7\7\u00d9\2\2\u07d7\u0889\7\u00d4\2\2\u07d8")
        buf.write("\u07d9\7\25\2\2\u07d9\u07da\7\u00d3\2\2\u07da\u07db\7")
        buf.write("\3\2\2\u07db\u07dc\7\u00d9\2\2\u07dc\u0889\7\u00d4\2\2")
        buf.write("\u07dd\u07de\7\25\2\2\u07de\u07df\7\u00d3\2\2\u07df\u07e0")
        buf.write("\5\u00ecw\2\u07e0\u07e1\7\u00d4\2\2\u07e1\u0889\3\2\2")
        buf.write("\2\u07e2\u07e3\7\25\2\2\u07e3\u07e4\7\u00d3\2\2\u07e4")
        buf.write("\u07e5\7\3\2\2\u07e5\u07e6\5\u00ecw\2\u07e6\u07e7\7\u00d4")
        buf.write("\2\2\u07e7\u0889\3\2\2\2\u07e8\u07e9\7\25\2\2\u07e9\u07ea")
        buf.write("\7\u00d3\2\2\u07ea\u07eb\7\'\2\2\u07eb\u07ec\5\u00e2r")
        buf.write("\2\u07ec\u07ed\7\u00d4\2\2\u07ed\u0889\3\2\2\2\u07ee\u07ef")
        buf.write("\7\30\2\2\u07ef\u07f0\7\u00d3\2\2\u07f0\u0889\7\u00d4")
        buf.write("\2\2\u07f1\u07f2\7\62\2\2\u07f2\u07f3\7\u00d3\2\2\u07f3")
        buf.write("\u07f4\5\b\5\2\u07f4\u07f5\7\u00d4\2\2\u07f5\u0889\3\2")
        buf.write("\2\2\u07f6\u07f7\7\u00cc\2\2\u07f7\u07f8\7\u00d3\2\2\u07f8")
        buf.write("\u07f9\5\u0108\u0085\2\u07f9\u07fa\7\67\2\2\u07fa\u07fb")
        buf.write("\5\u00ecw\2\u07fb\u07fc\7\u00d4\2\2\u07fc\u0889\3\2\2")
        buf.write("\2\u07fd\u07fe\7m\2\2\u07fe\u07ff\7\u00d3\2\2\u07ff\u0800")
        buf.write("\5\u00ecw\2\u0800\u0801\7B\2\2\u0801\u0802\5\u00ecw\2")
        buf.write("\u0802\u0803\7\u00d4\2\2\u0803\u0889\3\2\2\2\u0804\u0805")
        buf.write("\7u\2\2\u0805\u0806\7\u00d3\2\2\u0806\u0807\5\u00ecw\2")
        buf.write("\u0807\u0808\7\u00d7\2\2\u0808\u0809\5\u00e2r\2\u0809")
        buf.write("\u080a\7\u00d4\2\2\u080a\u0889\3\2\2\2\u080b\u080c\7\u00c9")
        buf.write("\2\2\u080c\u080d\7\u00d3\2\2\u080d\u080e\5\u00ecw\2\u080e")
        buf.write("\u080f\7\u00d7\2\2\u080f\u0810\5\u00ecw\2\u0810\u0811")
        buf.write("\7\u00d7\2\2\u0811\u0812\5\u00ecw\2\u0812\u0813\7\u00d4")
        buf.write("\2\2\u0813\u0889\3\2\2\2\u0814\u0815\7\u00c9\2\2\u0815")
        buf.write("\u0816\7\u00d3\2\2\u0816\u0817\5\u00ecw\2\u0817\u0818")
        buf.write("\7\u00d7\2\2\u0818\u0819\5\u00ecw\2\u0819\u081a\7\u00d4")
        buf.write("\2\2\u081a\u0889\3\2\2\2\u081b\u081c\7\u00c9\2\2\u081c")
        buf.write("\u081d\7\u00d3\2\2\u081d\u081e\5\u00ecw\2\u081e\u081f")
        buf.write("\7\67\2\2\u081f\u0820\5\u00ecw\2\u0820\u0821\7\65\2\2")
        buf.write("\u0821\u0822\5\u00ecw\2\u0822\u0823\7\u00d4\2\2\u0823")
        buf.write("\u0889\3\2\2\2\u0824\u0825\7\u00c9\2\2\u0825\u0826\7\u00d3")
        buf.write("\2\2\u0826\u0827\5\u00ecw\2\u0827\u0828\7\67\2\2\u0828")
        buf.write("\u0829\5\u00ecw\2\u0829\u082a\7\u00d4\2\2\u082a\u0889")
        buf.write("\3\2\2\2\u082b\u082c\7\u00ca\2\2\u082c\u082d\7\u00d3\2")
        buf.write("\2\u082d\u082e\5\u00ecw\2\u082e\u082f\7\u00d4\2\2\u082f")
        buf.write("\u0889\3\2\2\2\u0830\u0831\7\u00ca\2\2\u0831\u0832\7\u00d3")
        buf.write("\2\2\u0832\u0833\7\16\2\2\u0833\u0834\5\u00ecw\2\u0834")
        buf.write("\u0835\7\67\2\2\u0835\u0836\5\u00ecw\2\u0836\u0837\7\u00d4")
        buf.write("\2\2\u0837\u0889\3\2\2\2\u0838\u0839\7\u00ca\2\2\u0839")
        buf.write("\u083a\7\u00d3\2\2\u083a\u083b\7L\2\2\u083b\u083c\5\u00ec")
        buf.write("w\2\u083c\u083d\7\67\2\2\u083d\u083e\5\u00ecw\2\u083e")
        buf.write("\u083f\7\u00d4\2\2\u083f\u0889\3\2\2\2\u0840\u0841\7\u00ca")
        buf.write("\2\2\u0841\u0842\7\u00d3\2\2\u0842\u0843\7\u008f\2\2\u0843")
        buf.write("\u0844\5\u00ecw\2\u0844\u0845\7\67\2\2\u0845\u0846\5\u00ec")
        buf.write("w\2\u0846\u0847\7\u00d4\2\2\u0847\u0889\3\2\2\2\u0848")
        buf.write("\u0849\7\u00ca\2\2\u0849\u084a\7\u00d3\2\2\u084a\u084b")
        buf.write("\7\16\2\2\u084b\u084c\7\67\2\2\u084c\u084d\5\u00ecw\2")
        buf.write("\u084d\u084e\7\u00d4\2\2\u084e\u0889\3\2\2\2\u084f\u0850")
        buf.write("\7\u00ca\2\2\u0850\u0851\7\u00d3\2\2\u0851\u0852\7L\2")
        buf.write("\2\u0852\u0853\7\67\2\2\u0853\u0854\5\u00ecw\2\u0854\u0855")
        buf.write("\7\u00d4\2\2\u0855\u0889\3\2\2\2\u0856\u0857\7\u00ca\2")
        buf.write("\2\u0857\u0858\7\u00d3\2\2\u0858\u0859\7\u008f\2\2\u0859")
        buf.write("\u085a\7\67\2\2\u085a\u085b\5\u00ecw\2\u085b\u085c\7\u00d4")
        buf.write("\2\2\u085c\u0889\3\2\2\2\u085d\u085e\7\u00ca\2\2\u085e")
        buf.write("\u085f\7\u00d3\2\2\u085f\u0860\5\u00ecw\2\u0860\u0861")
        buf.write("\7\67\2\2\u0861\u0862\5\u00ecw\2\u0862\u0863\7\u00d4\2")
        buf.write("\2\u0863\u0889\3\2\2\2\u0864\u0865\7\u00cd\2\2\u0865\u0866")
        buf.write("\7\u00d3\2\2\u0866\u0867\5\u00ecw\2\u0867\u0868\7\u00d4")
        buf.write("\2\2\u0868\u0889\3\2\2\2\u0869\u086a\7\u00cd\2\2\u086a")
        buf.write("\u086b\7\u00d3\2\2\u086b\u086c\5\u00ecw\2\u086c\u086d")
        buf.write("\7\5\2\2\u086d\u086e\7\21\2\2\u086e\u086f\7\u00d3\2\2")
        buf.write("\u086f\u0870\7\u00d1\2\2\u0870\u0871\7\u00d4\2\2\u0871")
        buf.write("\u0872\7\u00d4\2\2\u0872\u0889\3\2\2\2\u0873\u0874\7\u00cd")
        buf.write("\2\2\u0874\u0875\7\u00d3\2\2\u0875\u0876\5\u00ecw\2\u0876")
        buf.write("\u0877\7\5\2\2\u0877\u0878\7\n\2\2\u0878\u0879\7\u00d3")
        buf.write("\2\2\u0879\u087a\7\u00d1\2\2\u087a\u087b\7\u00d4\2\2\u087b")
        buf.write("\u087c\7\u00d4\2\2\u087c\u0889\3\2\2\2\u087d\u087e\7\u00cd")
        buf.write("\2\2\u087e\u087f\7\u00d3\2\2\u087f\u0880\5\u00ecw\2\u0880")
        buf.write("\u0881\7\u00d7\2\2\u0881\u0882\7\u00d1\2\2\u0882\u0883")
        buf.write("\7\u00d7\2\2\u0883\u0884\7\u00d1\2\2\u0884\u0885\7\u00d7")
        buf.write("\2\2\u0885\u0886\7\u00d1\2\2\u0886\u0887\7\u00d4\2\2\u0887")
        buf.write("\u0889\3\2\2\2\u0888\u07a6\3\2\2\2\u0888\u07ad\3\2\2\2")
        buf.write("\u0888\u07b3\3\2\2\2\u0888\u07ba\3\2\2\2\u0888\u07c1\3")
        buf.write("\2\2\2\u0888\u07c8\3\2\2\2\u0888\u07cd\3\2\2\2\u0888\u07d4")
        buf.write("\3\2\2\2\u0888\u07d8\3\2\2\2\u0888\u07dd\3\2\2\2\u0888")
        buf.write("\u07e2\3\2\2\2\u0888\u07e8\3\2\2\2\u0888\u07ee\3\2\2\2")
        buf.write("\u0888\u07f1\3\2\2\2\u0888\u07f6\3\2\2\2\u0888\u07fd\3")
        buf.write("\2\2\2\u0888\u0804\3\2\2\2\u0888\u080b\3\2\2\2\u0888\u0814")
        buf.write("\3\2\2\2\u0888\u081b\3\2\2\2\u0888\u0824\3\2\2\2\u0888")
        buf.write("\u082b\3\2\2\2\u0888\u0830\3\2\2\2\u0888\u0838\3\2\2\2")
        buf.write("\u0888\u0840\3\2\2\2\u0888\u0848\3\2\2\2\u0888\u084f\3")
        buf.write("\2\2\2\u0888\u0856\3\2\2\2\u0888\u085d\3\2\2\2\u0888\u0864")
        buf.write("\3\2\2\2\u0888\u0869\3\2\2\2\u0888\u0873\3\2\2\2\u0888")
        buf.write("\u087d\3\2\2\2\u0889\u0113\3\2\2\2\u088a\u088d\3\2\2\2")
        buf.write("\u088b\u088d\5\u00ecw\2\u088c\u088a\3\2\2\2\u088c\u088b")
        buf.write("\3\2\2\2\u088d\u0115\3\2\2\2\u088e\u088f\b\u008c\1\2\u088f")
        buf.write("\u0890\7\u009b\2\2\u0890\u0891\5\u00ecw\2\u0891\u0892")
        buf.write("\7\u0089\2\2\u0892\u0893\5\u00ecw\2\u0893\u089c\3\2\2")
        buf.write("\2\u0894\u0895\f\3\2\2\u0895\u0896\7\u009b\2\2\u0896\u0897")
        buf.write("\5\u00ecw\2\u0897\u0898\7\u0089\2\2\u0898\u0899\5\u00ec")
        buf.write("w\2\u0899\u089b\3\2\2\2\u089a\u0894\3\2\2\2\u089b\u089e")
        buf.write("\3\2\2\2\u089c\u089a\3\2\2\2\u089c\u089d\3\2\2\2\u089d")
        buf.write("\u0117\3\2\2\2\u089e\u089c\3\2\2\2\u089f\u08a3\3\2\2\2")
        buf.write("\u08a0\u08a1\7,\2\2\u08a1\u08a3\5\u00ecw\2\u08a2\u089f")
        buf.write("\3\2\2\2\u08a2\u08a0\3\2\2\2\u08a3\u0119\3\2\2\2\u08a4")
        buf.write("\u08a5\7\n\2\2\u08a5\u08b6\5\u0128\u0095\2\u08a6\u08a7")
        buf.write("\7`\2\2\u08a7\u08b6\5\u0128\u0095\2\u08a8\u08a9\7\21\2")
        buf.write("\2\u08a9\u08aa\5\u0128\u0095\2\u08aa\u08ab\5\u011c\u008f")
        buf.write("\2\u08ab\u08b6\3\2\2\2\u08ac\u08ad\7\u0099\2\2\u08ad\u08b6")
        buf.write("\5\u0128\u0095\2\u08ae\u08af\7|\2\2\u08af\u08b6\7F\2\2")
        buf.write("\u08b0\u08b1\7\u0093\2\2\u08b1\u08b6\7F\2\2\u08b2\u08b3")
        buf.write("\7 \2\2\u08b3\u08b6\5\u012a\u0096\2\u08b4\u08b6\5\u00ea")
        buf.write("v\2\u08b5\u08a4\3\2\2\2\u08b5\u08a6\3\2\2\2\u08b5\u08a8")
        buf.write("\3\2\2\2\u08b5\u08ac\3\2\2\2\u08b5\u08ae\3\2\2\2\u08b5")
        buf.write("\u08b0\3\2\2\2\u08b5\u08b2\3\2\2\2\u08b5\u08b4\3\2\2\2")
        buf.write("\u08b6\u011b\3\2\2\2\u08b7\u08be\3\2\2\2\u08b8\u08be\7")
        buf.write("\u00a2\2\2\u08b9\u08be\7\u0090\2\2\u08ba\u08bb\5\u0124")
        buf.write("\u0093\2\u08bb\u08bc\5\u011e\u0090\2\u08bc\u08be\3\2\2")
        buf.write("\2\u08bd\u08b7\3\2\2\2\u08bd\u08b8\3\2\2\2\u08bd\u08b9")
        buf.write("\3\2\2\2\u08bd\u08ba\3\2\2\2\u08be\u011d\3\2\2\2\u08bf")
        buf.write("\u08c7\7\n\2\2\u08c0\u08c7\5\u0122\u0092\2\u08c1\u08c7")
        buf.write("\5\u0120\u0091\2\u08c2\u08c3\7\u00e5\2\2\u08c3\u08c4\5")
        buf.write("\u0122\u0092\2\u08c4\u08c5\7\u00e5\2\2\u08c5\u08c7\3\2")
        buf.write("\2\2\u08c6\u08bf\3\2\2\2\u08c6\u08c0\3\2\2\2\u08c6\u08c1")
        buf.write("\3\2\2\2\u08c6\u08c2\3\2\2\2\u08c7\u011f\3\2\2\2\u08c8")
        buf.write("\u08d3\7\u00ea\2\2\u08c9\u08d3\7\u00eb\2\2\u08ca\u08cb")
        buf.write("\7\u00ea\2\2\u08cb\u08cc\7B\2\2\u08cc\u08cd\7\r\2\2\u08cd")
        buf.write("\u08d3\7]\2\2\u08ce\u08cf\7\u00eb\2\2\u08cf\u08d0\7B\2")
        buf.write("\2\u08d0\u08d1\7\r\2\2\u08d1\u08d3\7]\2\2\u08d2\u08c8")
        buf.write("\3\2\2\2\u08d2\u08c9\3\2\2\2\u08d2\u08ca\3\2\2\2\u08d2")
        buf.write("\u08ce\3\2\2\2\u08d3\u0121\3\2\2\2\u08d4\u08d5\t\t\2\2")
        buf.write("\u08d5\u0123\3\2\2\2\u08d6\u08d7\7\21\2\2\u08d7\u08d8")
        buf.write("\7z\2\2\u08d8\u0125\3\2\2\2\u08d9\u08da\7\u00d3\2\2\u08da")
        buf.write("\u08db\7\u00d1\2\2\u08db\u08dc\7\u00d7\2\2\u08dc\u08dd")
        buf.write("\7\u00d1\2\2\u08dd\u08de\7\u00d4\2\2\u08de\u0127\3\2\2")
        buf.write("\2\u08df\u08e0\7\u00d3\2\2\u08e0\u08e1\7\u00d1\2\2\u08e1")
        buf.write("\u08e2\7\u00d4\2\2\u08e2\u0129\3\2\2\2\u08e3\u08e7\3\2")
        buf.write("\2\2\u08e4\u08e7\5\u0128\u0095\2\u08e5\u08e7\5\u0126\u0094")
        buf.write("\2\u08e6\u08e3\3\2\2\2\u08e6\u08e4\3\2\2\2\u08e6\u08e5")
        buf.write("\3\2\2\2\u08e7\u012b\3\2\2\2\u0097\u012f\u0139\u0145\u014b")
        buf.write("\u0155\u0168\u016f\u0175\u0180\u0184\u018c\u0191\u01a4")
        buf.write("\u01a8\u01af\u01b6\u01be\u01c5\u01cd\u01da\u01e5\u01ee")
        buf.write("\u01f9\u0200\u0207\u021a\u021e\u022a\u0233\u0241\u0247")
        buf.write("\u024c\u0255\u0265\u026a\u0273\u027c\u0286\u028c\u0290")
        buf.write("\u029a\u02ae\u02b0\u02b5\u02bd\u02c8\u02d2\u02de\u02e8")
        buf.write("\u02f0\u02fa\u0305\u0309\u0312\u0317\u031b\u0340\u035e")
        buf.write("\u0360\u0368\u036e\u0372\u037b\u037f\u0388\u039f\u03ac")
        buf.write("\u03b6\u03d4\u03dd\u03df\u03ed\u03f3\u0413\u041a\u0425")
        buf.write("\u0427\u042c\u0433\u0442\u0448\u0450\u0452\u045e\u046c")
        buf.write("\u046e\u048a\u049c\u04a9\u04b9\u04bb\u04c8\u04cd\u0512")
        buf.write("\u051b\u0527\u052b\u0531\u053b\u055e\u0582\u0584\u0590")
        buf.write("\u0594\u059b\u059d\u05a8\u05aa\u060c\u0616\u0620\u0624")
        buf.write("\u0631\u063a\u0644\u0649\u0653\u065e\u0663\u0674\u0682")
        buf.write("\u0684\u068c\u06ea\u06ec\u06f2\u070d\u0733\u0735\u073f")
        buf.write("\u0746\u074e\u0755\u076a\u0776\u077b\u0785\u0791\u079e")
        buf.write("\u07a4\u0888\u088c\u089c\u08a2\u08b5\u08bd\u08c6\u08d2")
        buf.write("\u08e6")
        return buf.getvalue()


class SQLParser ( Parser ):

    grammarFileName = "SQLParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "'ANY'", "'AS'", "'ASC'", 
                     "'AUTO_INCREMENT'", "'BETWEEN'", "'BIGINT|INT8'", "'BINARY'", 
                     "'BIT'", "'BLOB'", "'BOOLEAN'", "'BOTH'", "'BY'", "'CASE'", 
                     "<INVALID>", "'COLLATE'", "'COMMENT'", "'CONVERT'", 
                     "'COUNT'", "'CREATE'", "'CROSS'", "'DATABASE'", "'DATE'", 
                     "'DATETIME'", "'DAY'", "'DAY_HOUR'", "'DAY_MICROSECOND'", 
                     "'DAY_MINUTE'", "'DAY_SECOND'", "<INVALID>", "'DEFAULT'", 
                     "'DELAYED'", "'DELETE'", "'DEFINITION'", "'DROP'", 
                     "'DESC'", "'DISTINCT'", "'DISTINCTROW'", "'DIV'", "'DUMPFILE'", 
                     "<INVALID>", "'ELSE'", "'END'", "'ENCLOSED'", "'ENUM'", 
                     "'ESCAPE'", "'ESCAPED'", "<INVALID>", "'FIELDS'", "<INVALID>", 
                     "'FOR'", "'FORCE'", "<INVALID>", "'FULLTEXT'", "'GROUP'", 
                     "'HAVING'", "'HIGH_PRIORITY'", "'HOUR'", "'HOUR_MICROSECOND'", 
                     "'HOUR_MINUTE'", "'HOUR_SECOND'", "'IF'", "'IGNORE'", 
                     "'IN'", "'INDEX'", "'INNER'", "'INSERT'", "<INVALID>", 
                     "'INTERVAL'", "'INTO'", "'IS'", "'JOIN'", "'KEY'", 
                     "'LEADING'", "'LEFT'", "'LIKE'", "'LIMIT'", "'LINES'", 
                     "'LOCK'", "'LONGBLOB'", "'LONGTEXT'", "'LOW_PRIORITY'", 
                     "'MEDIUMBLOB'", "'MICROSECOND'", "<INVALID>", "'MEDIUMTEXT'", 
                     "'MINUTE'", "'MINUTE_MICROSECOND'", "'MINUTE_SECOND'", 
                     "'MOD'", "'MODE'", "'MONTH'", "'NATURAL'", "'NCHAR'", 
                     "'NVARCHAR'", "'NOT'", "'NULL'", "'OFFSET'", "'ON'", 
                     "<INVALID>", "'ONLY'", "'OPTIONALLY'", "'ORDER'", "'OUTER'", 
                     "'OUTFILE'", "'PARTITION'", "'POSITION'", "'PRIMARY'", 
                     "'QUARTER'", "'QUICK'", "'REAL'", "<INVALID>", "'REPLACE'", 
                     "'RIGHT'", "'ROW'", "'SCHEMA'", "'SECOND'", "'SECOND_MICROSECOND'", 
                     "<INVALID>", "'SET'", "'SHARE'", "'SIGNED'", "<INVALID>", 
                     "'SOME'", "'SOUNDS'", "'SQL_BIG_RESULT'", "'SQL_CALC_FOUND_ROWS'", 
                     "'SQL_SMALL_RESULT'", "'STARTING'", "'STRAIGHT_JOIN'", 
                     "'TABLE'", "'TEMPORARY'", "'TERMINATED'", "'TEXT'", 
                     "'THEN'", "'TIME'", "'TIMESTAMP'", "'TINYBLOB'", "<INVALID>", 
                     "'TINYTEXT'", "'TRAILING'", "'UNICODE'", "<INVALID>", 
                     "'UNIQUE'", "'UNSIGNED'", "'UPDATE'", "'USE'", "'USING'", 
                     "'VALUES'", "'VARBINARY'", "<INVALID>", "'WEEK'", "'WHEN'", 
                     "<INVALID>", "'XOR'", "'YEAR'", "'YEAR_MONTH'", "'ZEROFILL'", 
                     "'ARMSCII8'", "'ASCII'", "'BIG5'", "'CP1250'", "'CP1251'", 
                     "'CP1256'", "'CP1257'", "'CP850'", "'CP852'", "'CP866'", 
                     "'CP932'", "'DEC8'", "'EUCJPMS'", "'EUCKR'", "'GB2312'", 
                     "'GBK'", "'GEOSTD8'", "'GREEK'", "'HEBREW'", "'HP8'", 
                     "'KEYBCS2'", "'KOI8R'", "'KOI8U'", "'LATIN1'", "'LATIN2'", 
                     "'LATIN5'", "'LATIN7'", "'MACCE'", "'MACROMAN'", "'SJIS'", 
                     "'SWE7'", "'TIS620'", "'UCS2'", "'UJIS'", "'UTF16'", 
                     "'UTF16LE'", "'UTF32'", "'UTF8'", "'UTF8MB3'", "'UTF8MB4'", 
                     "<INVALID>", "'TRIM'", "'CAST'", "'EXTRACT'", "'WEIGHT_STRING'", 
                     "':='", "'::'", "<INVALID>", "<INVALID>", "'.'", "'('", 
                     "')'", "'{'", "'}'", "','", "';'", "'*'", "'/'", "'%'", 
                     "'+'", "'-'", "'~'", "'|'", "'&'", "'^'", "'!'", "'@'", 
                     "'_'", "'`'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'/*!'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'*/'", "'SELECT'", 
                     "'UNION'", "'ALL'", "'FROM'", "'WHERE'" ]

    symbolicNames = [ "<INVALID>", "ALL", "ANY", "AS", "ASC", "AUTO_INCREMENT", 
                      "BETWEEN", "BIGINT", "BINARY", "BIT", "BLOB", "BOOLEAN", 
                      "BOTH", "BY", "CASE", "CHAR", "COLLATE", "COMMENT", 
                      "CONVERT", "COUNT", "CREATE", "CROSS", "DATABASE", 
                      "DATE", "DATETIME", "DAY", "DAY_HOUR", "DAY_MICROSECOND", 
                      "DAY_MINUTE", "DAY_SECOND", "DECIMAL", "DEFAULT", 
                      "DELAYED", "DELETE", "DEFINITION", "DROP", "DESC", 
                      "DISTINCT", "DISTINCTROW", "DIV", "DUMPFILE", "DOUBLE", 
                      "ELSE", "END", "ENCLOSED", "ENUM", "ESCAPE", "ESCAPED", 
                      "EXISTS", "FIELDS", "FLOAT", "FOR", "FORCE", "FROM", 
                      "FULLTEXT", "GROUP", "HAVING", "HIGH_PRIORITY", "HOUR", 
                      "HOUR_MICROSECOND", "HOUR_MINUTE", "HOUR_SECOND", 
                      "IF", "IGNORE", "IN", "INDEX", "INNER", "INSERT", 
                      "INTEGER", "INTERVAL", "INTO", "IS", "JOIN", "KEY", 
                      "LEADING", "LEFT", "LIKE", "LIMIT", "LINES", "LOCK", 
                      "LONGBLOB", "LONGTEXT", "LOW_PRIORITY", "MEDIUMBLOB", 
                      "MICROSECOND", "MEDIUMINT", "MEDIUMTEXT", "MINUTE", 
                      "MINUTE_MICROSECOND", "MINUTE_SECOND", "MOD", "MODE", 
                      "MONTH", "NATURAL", "NCHAR", "NVARCHAR", "NOT", "NULLX", 
                      "OFFSET", "ON", "ONDUPLICATE", "ONLY", "OPTIONALLY", 
                      "ORDER", "OUTER", "OUTFILE", "PARTITION", "POSITION", 
                      "PRIMARY", "QUARTER", "QUICK", "REAL", "REGEXP", "REPLACE", 
                      "RIGHT", "ROW", "SCHEMA", "SECOND", "SECOND_MICROSECOND", 
                      "SELECT", "SET", "SHARE", "SIGNED", "SMALLINT", "SOME", 
                      "SOUNDS", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", 
                      "SQL_SMALL_RESULT", "STARTING", "STRAIGHT_JOIN", "TABLE", 
                      "TEMPORARY", "TERMINATED", "TEXT", "THEN", "TIME", 
                      "TIMESTAMP", "TINYBLOB", "TINYINT", "TINYTEXT", "TRAILING", 
                      "UNICODE", "UNION", "UNIQUE", "UNSIGNED", "UPDATE", 
                      "USE", "USING", "VALUES", "VARBINARY", "VARCHAR", 
                      "WEEK", "WHEN", "WHERE", "XOR", "YEAR", "YEAR_MONTH", 
                      "ZEROFILL", "ARMSCII8", "ASCII", "BIG5", "CP1250", 
                      "CP1251", "CP1256", "CP1257", "CP850", "CP852", "CP866", 
                      "CP932", "DEC8", "EUCJPMS", "EUCKR", "GB2312", "GBK", 
                      "GEOSTD8", "GREEK", "HEBREW", "HP8", "KEYBCS2", "KOI8R", 
                      "KOI8U", "LATIN1", "LATIN2", "LATIN5", "LATIN7", "MACCE", 
                      "MACROMAN", "SJIS", "SWE7", "TIS620", "UCS2", "UJIS", 
                      "UTF16", "UTF16LE", "UTF32", "UTF8", "UTF8MB3", "UTF8MB4", 
                      "SUBSTRING", "TRIM", "CAST", "EXTRACT", "WEIGHT_STRING", 
                      "ASSIGN", "TYPECAST", "BOOL", "NUM", "DOT", "LR_BRACKET", 
                      "RR_BRACKET", "BIG_LR_BRACKET", "BIG_RR_BRACKET", 
                      "COMMA", "SEMI", "STAR", "DIVIDE", "MODULE", "PLUS", 
                      "MINUS", "BIT_NOT", "BIT_OR", "BIT_AND", "BIT_XOR", 
                      "EXCLAMATION", "AT", "UNDERLINE", "HYPHEN", "AND", 
                      "OR", "COMPARISON", "SHIFT", "QUOTA_STRING", "DOUBLE_QUOTA_STRING", 
                      "BQUOTA_STRING", "HEX_STRING", "BIT_STRING", "START_NATIONAL_STRING_LITERAL", 
                      "IDENT", "USERVAR", "SYSVAR", "OPEN", "COMMENT1", 
                      "COMMENT2", "COMMENT3", "NEWLINE", "WS", "CLOSE", 
                      "Select", "Union", "All", "From", "Where", "S" ]

    RULE_prog = 0
    RULE_stmt_list = 1
    RULE_stmt = 2
    RULE_select_stmt = 3
    RULE_query_expression_parens = 4
    RULE_query_expression = 5
    RULE_query_expression_body = 6
    RULE_union_select_stmt = 7
    RULE_opt_locking_clause = 8
    RULE_locking_clause = 9
    RULE_union_option = 10
    RULE_query_specification = 11
    RULE_opt_from_clause = 12
    RULE_from_clause = 13
    RULE_opt_where_clause = 14
    RULE_where_clause = 15
    RULE_opt_group_clause = 16
    RULE_group_clause = 17
    RULE_opt_having_clause = 18
    RULE_having_clause = 19
    RULE_opt_order_clause = 20
    RULE_order_clause = 21
    RULE_opt_limit_clause = 22
    RULE_limit_clause = 23
    RULE_group_list = 24
    RULE_order_list = 25
    RULE_order_expr = 26
    RULE_opt_ordering_direction = 27
    RULE_limit_options = 28
    RULE_limit_option = 29
    RULE_select_item_list = 30
    RULE_select_item = 31
    RULE_collabel = 32
    RULE_table_wild = 33
    RULE_opt_alias = 34
    RULE_into_clause = 35
    RULE_into_destination = 36
    RULE_opt_load_data_charset = 37
    RULE_opt_field_term = 38
    RULE_field_term_list = 39
    RULE_field_term = 40
    RULE_opt_line_term = 41
    RULE_line_term_list = 42
    RULE_line_term = 43
    RULE_select_var_list = 44
    RULE_select_var_ident = 45
    RULE_ident_or_text = 46
    RULE_column_list = 47
    RULE_select_opts = 48
    RULE_esc_table_reference = 49
    RULE_table_reference = 50
    RULE_table_factor = 51
    RULE_joined_table_parens = 52
    RULE_table_reference_list_parens = 53
    RULE_table_reference_list = 54
    RULE_opt_derived_column_list = 55
    RULE_single_table_parens = 56
    RULE_single_table = 57
    RULE_opt_table_alias = 58
    RULE_opt_as = 59
    RULE_index_hints_list = 60
    RULE_opt_index_hints_list = 61
    RULE_opt_use_partition = 62
    RULE_use_partition = 63
    RULE_joined_table = 64
    RULE_tbl_name = 65
    RULE_opt_inner_cross = 66
    RULE_opt_outer = 67
    RULE_left_or_right = 68
    RULE_opt_left_or_right_outer = 69
    RULE_opt_join_condition = 70
    RULE_join_condition = 71
    RULE_index_hint = 72
    RULE_key_or_index = 73
    RULE_opt_index_hint_clause = 74
    RULE_index_list = 75
    RULE_table_subquery = 76
    RULE_delete_stmt = 77
    RULE_delete_opts = 78
    RULE_delete_list = 79
    RULE_opt_dot_star = 80
    RULE_drop_stmt = 81
    RULE_insert_stmt = 82
    RULE_opt_ondupupdate = 83
    RULE_insert_opts = 84
    RULE_opt_into = 85
    RULE_opt_col_names = 86
    RULE_insert_vals_list = 87
    RULE_insert_vals = 88
    RULE_insert_asgn_list = 89
    RULE_replace_stmt = 90
    RULE_update_stmt = 91
    RULE_update_opts = 92
    RULE_update_asgn_list = 93
    RULE_create_database_stmt = 94
    RULE_opt_if_not_exists = 95
    RULE_create_table_stmt = 96
    RULE_create_col_list = 97
    RULE_create_definition = 98
    RULE_column_atts = 99
    RULE_opt_length = 100
    RULE_opt_binary = 101
    RULE_opt_uz = 102
    RULE_opt_csc = 103
    RULE_data_type = 104
    RULE_enum_list = 105
    RULE_create_select_statement = 106
    RULE_opt_ignore_replace = 107
    RULE_opt_temporary = 108
    RULE_set_stmt = 109
    RULE_set_list = 110
    RULE_set_expr = 111
    RULE_expr_list = 112
    RULE_opt_udf_expr_list = 113
    RULE_udf_expr_list = 114
    RULE_udf_expr = 115
    RULE_ident = 116
    RULE_expr = 117
    RULE_predicate = 118
    RULE_opt_escape = 119
    RULE_expressionAtom = 120
    RULE_constant = 121
    RULE_fullColumnName = 122
    RULE_hexadecimalLiteral = 123
    RULE_bitValueLiteral = 124
    RULE_stringLiteral = 125
    RULE_stringCharsetName = 126
    RULE_string_literal_list = 127
    RULE_collationName = 128
    RULE_reserved_keyword = 129
    RULE_unreserved_keyword = 130
    RULE_interval = 131
    RULE_functionCall = 132
    RULE_function_call_generic = 133
    RULE_function_name = 134
    RULE_opt_expr_list = 135
    RULE_function_call_specific = 136
    RULE_opt_expr = 137
    RULE_when_list = 138
    RULE_opt_else = 139
    RULE_cast_type = 140
    RULE_opt_charset_with_opt_binary = 141
    RULE_charset_name = 142
    RULE_string_literal = 143
    RULE_charsetNameBase = 144
    RULE_character_set = 145
    RULE_precision = 146
    RULE_field_length = 147
    RULE_opt_float_options = 148

    ruleNames =  [ "prog", "stmt_list", "stmt", "select_stmt", "query_expression_parens", 
                   "query_expression", "query_expression_body", "union_select_stmt", 
                   "opt_locking_clause", "locking_clause", "union_option", 
                   "query_specification", "opt_from_clause", "from_clause", 
                   "opt_where_clause", "where_clause", "opt_group_clause", 
                   "group_clause", "opt_having_clause", "having_clause", 
                   "opt_order_clause", "order_clause", "opt_limit_clause", 
                   "limit_clause", "group_list", "order_list", "order_expr", 
                   "opt_ordering_direction", "limit_options", "limit_option", 
                   "select_item_list", "select_item", "collabel", "table_wild", 
                   "opt_alias", "into_clause", "into_destination", "opt_load_data_charset", 
                   "opt_field_term", "field_term_list", "field_term", "opt_line_term", 
                   "line_term_list", "line_term", "select_var_list", "select_var_ident", 
                   "ident_or_text", "column_list", "select_opts", "esc_table_reference", 
                   "table_reference", "table_factor", "joined_table_parens", 
                   "table_reference_list_parens", "table_reference_list", 
                   "opt_derived_column_list", "single_table_parens", "single_table", 
                   "opt_table_alias", "opt_as", "index_hints_list", "opt_index_hints_list", 
                   "opt_use_partition", "use_partition", "joined_table", 
                   "tbl_name", "opt_inner_cross", "opt_outer", "left_or_right", 
                   "opt_left_or_right_outer", "opt_join_condition", "join_condition", 
                   "index_hint", "key_or_index", "opt_index_hint_clause", 
                   "index_list", "table_subquery", "delete_stmt", "delete_opts", 
                   "delete_list", "opt_dot_star", "drop_stmt", "insert_stmt", 
                   "opt_ondupupdate", "insert_opts", "opt_into", "opt_col_names", 
                   "insert_vals_list", "insert_vals", "insert_asgn_list", 
                   "replace_stmt", "update_stmt", "update_opts", "update_asgn_list", 
                   "create_database_stmt", "opt_if_not_exists", "create_table_stmt", 
                   "create_col_list", "create_definition", "column_atts", 
                   "opt_length", "opt_binary", "opt_uz", "opt_csc", "data_type", 
                   "enum_list", "create_select_statement", "opt_ignore_replace", 
                   "opt_temporary", "set_stmt", "set_list", "set_expr", 
                   "expr_list", "opt_udf_expr_list", "udf_expr_list", "udf_expr", 
                   "ident", "expr", "predicate", "opt_escape", "expressionAtom", 
                   "constant", "fullColumnName", "hexadecimalLiteral", "bitValueLiteral", 
                   "stringLiteral", "stringCharsetName", "string_literal_list", 
                   "collationName", "reserved_keyword", "unreserved_keyword", 
                   "interval", "functionCall", "function_call_generic", 
                   "function_name", "opt_expr_list", "function_call_specific", 
                   "opt_expr", "when_list", "opt_else", "cast_type", "opt_charset_with_opt_binary", 
                   "charset_name", "string_literal", "charsetNameBase", 
                   "character_set", "precision", "field_length", "opt_float_options" ]

    EOF = Token.EOF
    ALL=1
    ANY=2
    AS=3
    ASC=4
    AUTO_INCREMENT=5
    BETWEEN=6
    BIGINT=7
    BINARY=8
    BIT=9
    BLOB=10
    BOOLEAN=11
    BOTH=12
    BY=13
    CASE=14
    CHAR=15
    COLLATE=16
    COMMENT=17
    CONVERT=18
    COUNT=19
    CREATE=20
    CROSS=21
    DATABASE=22
    DATE=23
    DATETIME=24
    DAY=25
    DAY_HOUR=26
    DAY_MICROSECOND=27
    DAY_MINUTE=28
    DAY_SECOND=29
    DECIMAL=30
    DEFAULT=31
    DELAYED=32
    DELETE=33
    DEFINITION=34
    DROP=35
    DESC=36
    DISTINCT=37
    DISTINCTROW=38
    DIV=39
    DUMPFILE=40
    DOUBLE=41
    ELSE=42
    END=43
    ENCLOSED=44
    ENUM=45
    ESCAPE=46
    ESCAPED=47
    EXISTS=48
    FIELDS=49
    FLOAT=50
    FOR=51
    FORCE=52
    FROM=53
    FULLTEXT=54
    GROUP=55
    HAVING=56
    HIGH_PRIORITY=57
    HOUR=58
    HOUR_MICROSECOND=59
    HOUR_MINUTE=60
    HOUR_SECOND=61
    IF=62
    IGNORE=63
    IN=64
    INDEX=65
    INNER=66
    INSERT=67
    INTEGER=68
    INTERVAL=69
    INTO=70
    IS=71
    JOIN=72
    KEY=73
    LEADING=74
    LEFT=75
    LIKE=76
    LIMIT=77
    LINES=78
    LOCK=79
    LONGBLOB=80
    LONGTEXT=81
    LOW_PRIORITY=82
    MEDIUMBLOB=83
    MICROSECOND=84
    MEDIUMINT=85
    MEDIUMTEXT=86
    MINUTE=87
    MINUTE_MICROSECOND=88
    MINUTE_SECOND=89
    MOD=90
    MODE=91
    MONTH=92
    NATURAL=93
    NCHAR=94
    NVARCHAR=95
    NOT=96
    NULLX=97
    OFFSET=98
    ON=99
    ONDUPLICATE=100
    ONLY=101
    OPTIONALLY=102
    ORDER=103
    OUTER=104
    OUTFILE=105
    PARTITION=106
    POSITION=107
    PRIMARY=108
    QUARTER=109
    QUICK=110
    REAL=111
    REGEXP=112
    REPLACE=113
    RIGHT=114
    ROW=115
    SCHEMA=116
    SECOND=117
    SECOND_MICROSECOND=118
    SELECT=119
    SET=120
    SHARE=121
    SIGNED=122
    SMALLINT=123
    SOME=124
    SOUNDS=125
    SQL_BIG_RESULT=126
    SQL_CALC_FOUND_ROWS=127
    SQL_SMALL_RESULT=128
    STARTING=129
    STRAIGHT_JOIN=130
    TABLE=131
    TEMPORARY=132
    TERMINATED=133
    TEXT=134
    THEN=135
    TIME=136
    TIMESTAMP=137
    TINYBLOB=138
    TINYINT=139
    TINYTEXT=140
    TRAILING=141
    UNICODE=142
    UNION=143
    UNIQUE=144
    UNSIGNED=145
    UPDATE=146
    USE=147
    USING=148
    VALUES=149
    VARBINARY=150
    VARCHAR=151
    WEEK=152
    WHEN=153
    WHERE=154
    XOR=155
    YEAR=156
    YEAR_MONTH=157
    ZEROFILL=158
    ARMSCII8=159
    ASCII=160
    BIG5=161
    CP1250=162
    CP1251=163
    CP1256=164
    CP1257=165
    CP850=166
    CP852=167
    CP866=168
    CP932=169
    DEC8=170
    EUCJPMS=171
    EUCKR=172
    GB2312=173
    GBK=174
    GEOSTD8=175
    GREEK=176
    HEBREW=177
    HP8=178
    KEYBCS2=179
    KOI8R=180
    KOI8U=181
    LATIN1=182
    LATIN2=183
    LATIN5=184
    LATIN7=185
    MACCE=186
    MACROMAN=187
    SJIS=188
    SWE7=189
    TIS620=190
    UCS2=191
    UJIS=192
    UTF16=193
    UTF16LE=194
    UTF32=195
    UTF8=196
    UTF8MB3=197
    UTF8MB4=198
    SUBSTRING=199
    TRIM=200
    CAST=201
    EXTRACT=202
    WEIGHT_STRING=203
    ASSIGN=204
    TYPECAST=205
    BOOL=206
    NUM=207
    DOT=208
    LR_BRACKET=209
    RR_BRACKET=210
    BIG_LR_BRACKET=211
    BIG_RR_BRACKET=212
    COMMA=213
    SEMI=214
    STAR=215
    DIVIDE=216
    MODULE=217
    PLUS=218
    MINUS=219
    BIT_NOT=220
    BIT_OR=221
    BIT_AND=222
    BIT_XOR=223
    EXCLAMATION=224
    AT=225
    UNDERLINE=226
    HYPHEN=227
    AND=228
    OR=229
    COMPARISON=230
    SHIFT=231
    QUOTA_STRING=232
    DOUBLE_QUOTA_STRING=233
    BQUOTA_STRING=234
    HEX_STRING=235
    BIT_STRING=236
    START_NATIONAL_STRING_LITERAL=237
    IDENT=238
    USERVAR=239
    SYSVAR=240
    OPEN=241
    COMMENT1=242
    COMMENT2=243
    COMMENT3=244
    NEWLINE=245
    WS=246
    CLOSE=247
    Select=248
    Union=249
    All=250
    From=251
    Where=252
    S=253

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class ProgContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.Stmt_listContext)
            else:
                return self.getTypedRuleContext(SQLParser.Stmt_listContext,i)


        def getRuleIndex(self):
            return SQLParser.RULE_prog

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProg" ):
                listener.enterProg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProg" ):
                listener.exitProg(self)




    def prog(self):

        localctx = SQLParser.ProgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_prog)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 299 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 298
                self.stmt_list()
                self.state = 301 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLParser.ANY) | (1 << SQLParser.AUTO_INCREMENT) | (1 << SQLParser.BIT) | (1 << SQLParser.BOOLEAN) | (1 << SQLParser.CASE) | (1 << SQLParser.CHAR) | (1 << SQLParser.COMMENT) | (1 << SQLParser.CONVERT) | (1 << SQLParser.COUNT) | (1 << SQLParser.CREATE) | (1 << SQLParser.DATABASE) | (1 << SQLParser.DATE) | (1 << SQLParser.DATETIME) | (1 << SQLParser.DAY) | (1 << SQLParser.DELETE) | (1 << SQLParser.DROP) | (1 << SQLParser.DUMPFILE) | (1 << SQLParser.END) | (1 << SQLParser.ENUM) | (1 << SQLParser.ESCAPE) | (1 << SQLParser.EXISTS) | (1 << SQLParser.FIELDS) | (1 << SQLParser.FROM) | (1 << SQLParser.GROUP) | (1 << SQLParser.HAVING) | (1 << SQLParser.HOUR) | (1 << SQLParser.IF))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (SQLParser.INSERT - 67)) | (1 << (SQLParser.LIKE - 67)) | (1 << (SQLParser.LIMIT - 67)) | (1 << (SQLParser.MICROSECOND - 67)) | (1 << (SQLParser.MINUTE - 67)) | (1 << (SQLParser.MODE - 67)) | (1 << (SQLParser.MONTH - 67)) | (1 << (SQLParser.NCHAR - 67)) | (1 << (SQLParser.OFFSET - 67)) | (1 << (SQLParser.ONDUPLICATE - 67)) | (1 << (SQLParser.ORDER - 67)) | (1 << (SQLParser.PARTITION - 67)) | (1 << (SQLParser.POSITION - 67)) | (1 << (SQLParser.QUARTER - 67)) | (1 << (SQLParser.QUICK - 67)) | (1 << (SQLParser.REPLACE - 67)) | (1 << (SQLParser.ROW - 67)) | (1 << (SQLParser.SECOND - 67)) | (1 << (SQLParser.SELECT - 67)) | (1 << (SQLParser.SET - 67)) | (1 << (SQLParser.SHARE - 67)) | (1 << (SQLParser.SIGNED - 67)) | (1 << (SQLParser.SOME - 67)) | (1 << (SQLParser.SOUNDS - 67)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (SQLParser.TEMPORARY - 132)) | (1 << (SQLParser.TEXT - 132)) | (1 << (SQLParser.TIME - 132)) | (1 << (SQLParser.TIMESTAMP - 132)) | (1 << (SQLParser.UNICODE - 132)) | (1 << (SQLParser.UNION - 132)) | (1 << (SQLParser.UNSIGNED - 132)) | (1 << (SQLParser.UPDATE - 132)) | (1 << (SQLParser.WEEK - 132)) | (1 << (SQLParser.WHERE - 132)) | (1 << (SQLParser.YEAR - 132)) | (1 << (SQLParser.ASCII - 132)))) != 0) or ((((_la - 199)) & ~0x3f) == 0 and ((1 << (_la - 199)) & ((1 << (SQLParser.SUBSTRING - 199)) | (1 << (SQLParser.TRIM - 199)) | (1 << (SQLParser.CAST - 199)) | (1 << (SQLParser.EXTRACT - 199)) | (1 << (SQLParser.WEIGHT_STRING - 199)) | (1 << (SQLParser.LR_BRACKET - 199)) | (1 << (SQLParser.BQUOTA_STRING - 199)) | (1 << (SQLParser.IDENT - 199)) | (1 << (SQLParser.SYSVAR - 199)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Stmt_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt(self):
            return self.getTypedRuleContext(SQLParser.StmtContext,0)


        def functionCall(self):
            return self.getTypedRuleContext(SQLParser.FunctionCallContext,0)


        def from_clause(self):
            return self.getTypedRuleContext(SQLParser.From_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(SQLParser.Where_clauseContext,0)


        def group_clause(self):
            return self.getTypedRuleContext(SQLParser.Group_clauseContext,0)


        def having_clause(self):
            return self.getTypedRuleContext(SQLParser.Having_clauseContext,0)


        def order_clause(self):
            return self.getTypedRuleContext(SQLParser.Order_clauseContext,0)


        def limit_clause(self):
            return self.getTypedRuleContext(SQLParser.Limit_clauseContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_stmt_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt_list" ):
                listener.enterStmt_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt_list" ):
                listener.exitStmt_list(self)




    def stmt_list(self):

        localctx = SQLParser.Stmt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_stmt_list)
        try:
            self.state = 311
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.CREATE, SQLParser.DELETE, SQLParser.DROP, SQLParser.INSERT, SQLParser.REPLACE, SQLParser.SELECT, SQLParser.SET, SQLParser.UNION, SQLParser.UPDATE, SQLParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 303
                self.stmt()
                pass
            elif token in [SQLParser.ANY, SQLParser.AUTO_INCREMENT, SQLParser.BIT, SQLParser.BOOLEAN, SQLParser.CASE, SQLParser.CHAR, SQLParser.COMMENT, SQLParser.CONVERT, SQLParser.COUNT, SQLParser.DATABASE, SQLParser.DATE, SQLParser.DATETIME, SQLParser.DAY, SQLParser.DUMPFILE, SQLParser.END, SQLParser.ENUM, SQLParser.ESCAPE, SQLParser.EXISTS, SQLParser.FIELDS, SQLParser.HOUR, SQLParser.IF, SQLParser.LIKE, SQLParser.MICROSECOND, SQLParser.MINUTE, SQLParser.MODE, SQLParser.MONTH, SQLParser.NCHAR, SQLParser.OFFSET, SQLParser.ONDUPLICATE, SQLParser.PARTITION, SQLParser.POSITION, SQLParser.QUARTER, SQLParser.QUICK, SQLParser.ROW, SQLParser.SECOND, SQLParser.SHARE, SQLParser.SIGNED, SQLParser.SOME, SQLParser.SOUNDS, SQLParser.TEMPORARY, SQLParser.TEXT, SQLParser.TIME, SQLParser.TIMESTAMP, SQLParser.UNICODE, SQLParser.UNSIGNED, SQLParser.WEEK, SQLParser.YEAR, SQLParser.ASCII, SQLParser.SUBSTRING, SQLParser.TRIM, SQLParser.CAST, SQLParser.EXTRACT, SQLParser.WEIGHT_STRING, SQLParser.BQUOTA_STRING, SQLParser.IDENT, SQLParser.SYSVAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 304
                self.functionCall()
                pass
            elif token in [SQLParser.FROM]:
                self.enterOuterAlt(localctx, 3)
                self.state = 305
                self.from_clause()
                pass
            elif token in [SQLParser.WHERE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 306
                self.where_clause()
                pass
            elif token in [SQLParser.GROUP]:
                self.enterOuterAlt(localctx, 5)
                self.state = 307
                self.group_clause()
                pass
            elif token in [SQLParser.HAVING]:
                self.enterOuterAlt(localctx, 6)
                self.state = 308
                self.having_clause()
                pass
            elif token in [SQLParser.ORDER]:
                self.enterOuterAlt(localctx, 7)
                self.state = 309
                self.order_clause()
                pass
            elif token in [SQLParser.LIMIT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 310
                self.limit_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def union_select_stmt(self):
            return self.getTypedRuleContext(SQLParser.Union_select_stmtContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLParser.Select_stmtContext,0)


        def delete_stmt(self):
            return self.getTypedRuleContext(SQLParser.Delete_stmtContext,0)


        def drop_stmt(self):
            return self.getTypedRuleContext(SQLParser.Drop_stmtContext,0)


        def insert_stmt(self):
            return self.getTypedRuleContext(SQLParser.Insert_stmtContext,0)


        def replace_stmt(self):
            return self.getTypedRuleContext(SQLParser.Replace_stmtContext,0)


        def update_stmt(self):
            return self.getTypedRuleContext(SQLParser.Update_stmtContext,0)


        def create_database_stmt(self):
            return self.getTypedRuleContext(SQLParser.Create_database_stmtContext,0)


        def create_table_stmt(self):
            return self.getTypedRuleContext(SQLParser.Create_table_stmtContext,0)


        def set_stmt(self):
            return self.getTypedRuleContext(SQLParser.Set_stmtContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)




    def stmt(self):

        localctx = SQLParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_stmt)
        try:
            self.state = 323
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 313
                self.union_select_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 314
                self.select_stmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 315
                self.delete_stmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 316
                self.drop_stmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 317
                self.insert_stmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 318
                self.replace_stmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 319
                self.update_stmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 320
                self.create_database_stmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 321
                self.create_table_stmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 322
                self.set_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_expression(self):
            return self.getTypedRuleContext(SQLParser.Query_expressionContext,0)


        def into_clause(self):
            return self.getTypedRuleContext(SQLParser.Into_clauseContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_stmt" ):
                listener.enterSelect_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_stmt" ):
                listener.exitSelect_stmt(self)




    def select_stmt(self):

        localctx = SQLParser.Select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_select_stmt)
        try:
            self.state = 329
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 325
                self.query_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 326
                self.query_expression()
                self.state = 327
                self.into_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Query_expression_parensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_expression_parens(self):
            return self.getTypedRuleContext(SQLParser.Query_expression_parensContext,0)


        def query_expression(self):
            return self.getTypedRuleContext(SQLParser.Query_expressionContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_query_expression_parens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_expression_parens" ):
                listener.enterQuery_expression_parens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_expression_parens" ):
                listener.exitQuery_expression_parens(self)




    def query_expression_parens(self):

        localctx = SQLParser.Query_expression_parensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_query_expression_parens)
        try:
            self.state = 339
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 331
                self.match(SQLParser.LR_BRACKET)
                self.state = 332
                self.query_expression_parens()
                self.state = 333
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 335
                self.match(SQLParser.LR_BRACKET)
                self.state = 336
                self.query_expression()
                self.state = 337
                self.match(SQLParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Query_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_expression_body(self):
            return self.getTypedRuleContext(SQLParser.Query_expression_bodyContext,0)


        def opt_order_clause(self):
            return self.getTypedRuleContext(SQLParser.Opt_order_clauseContext,0)


        def opt_limit_clause(self):
            return self.getTypedRuleContext(SQLParser.Opt_limit_clauseContext,0)


        def opt_locking_clause(self):
            return self.getTypedRuleContext(SQLParser.Opt_locking_clauseContext,0)


        def query_expression_parens(self):
            return self.getTypedRuleContext(SQLParser.Query_expression_parensContext,0)


        def order_clause(self):
            return self.getTypedRuleContext(SQLParser.Order_clauseContext,0)


        def limit_clause(self):
            return self.getTypedRuleContext(SQLParser.Limit_clauseContext,0)


        def locking_clause(self):
            return self.getTypedRuleContext(SQLParser.Locking_clauseContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_query_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_expression" ):
                listener.enterQuery_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_expression" ):
                listener.exitQuery_expression(self)




    def query_expression(self):

        localctx = SQLParser.Query_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_query_expression)
        try:
            self.state = 358
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 341
                self.query_expression_body(0)
                self.state = 342
                self.opt_order_clause()
                self.state = 343
                self.opt_limit_clause()
                self.state = 344
                self.opt_locking_clause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 346
                self.query_expression_parens()
                self.state = 347
                self.order_clause()
                self.state = 348
                self.opt_limit_clause()
                self.state = 349
                self.opt_locking_clause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 351
                self.query_expression_parens()
                self.state = 352
                self.limit_clause()
                self.state = 353
                self.opt_locking_clause()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 355
                self.query_expression_parens()
                self.state = 356
                self.locking_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Query_expression_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_specification(self):
            return self.getTypedRuleContext(SQLParser.Query_specificationContext,0)


        def query_expression_parens(self):
            return self.getTypedRuleContext(SQLParser.Query_expression_parensContext,0)


        def union_select_stmt(self):
            return self.getTypedRuleContext(SQLParser.Union_select_stmtContext,0)


        def query_expression_body(self):
            return self.getTypedRuleContext(SQLParser.Query_expression_bodyContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_query_expression_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_expression_body" ):
                listener.enterQuery_expression_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_expression_body" ):
                listener.exitQuery_expression_body(self)



    def query_expression_body(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLParser.Query_expression_bodyContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 12
        self.enterRecursionRule(localctx, 12, self.RULE_query_expression_body, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 365
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.SELECT]:
                self.state = 361
                self.query_specification()
                pass
            elif token in [SQLParser.LR_BRACKET]:
                self.state = 362
                self.query_expression_parens()
                self.state = 363
                self.union_select_stmt()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 371
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SQLParser.Query_expression_bodyContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_query_expression_body)
                    self.state = 367
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 368
                    self.union_select_stmt() 
                self.state = 373
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Union_select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(SQLParser.UNION, 0)

        def union_option(self):
            return self.getTypedRuleContext(SQLParser.Union_optionContext,0)


        def query_specification(self):
            return self.getTypedRuleContext(SQLParser.Query_specificationContext,0)


        def query_expression_parens(self):
            return self.getTypedRuleContext(SQLParser.Query_expression_parensContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_union_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnion_select_stmt" ):
                listener.enterUnion_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnion_select_stmt" ):
                listener.exitUnion_select_stmt(self)




    def union_select_stmt(self):

        localctx = SQLParser.Union_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_union_select_stmt)
        try:
            self.state = 382
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 374
                self.match(SQLParser.UNION)
                self.state = 375
                self.union_option()
                self.state = 376
                self.query_specification()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 378
                self.match(SQLParser.UNION)
                self.state = 379
                self.union_option()
                self.state = 380
                self.query_expression_parens()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_locking_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def locking_clause(self):
            return self.getTypedRuleContext(SQLParser.Locking_clauseContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_opt_locking_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_locking_clause" ):
                listener.enterOpt_locking_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_locking_clause" ):
                listener.exitOpt_locking_clause(self)




    def opt_locking_clause(self):

        localctx = SQLParser.Opt_locking_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_opt_locking_clause)
        try:
            self.state = 386
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.EOF, SQLParser.ANY, SQLParser.AUTO_INCREMENT, SQLParser.BIT, SQLParser.BOOLEAN, SQLParser.CASE, SQLParser.CHAR, SQLParser.COMMENT, SQLParser.CONVERT, SQLParser.COUNT, SQLParser.CREATE, SQLParser.DATABASE, SQLParser.DATE, SQLParser.DATETIME, SQLParser.DAY, SQLParser.DELETE, SQLParser.DEFINITION, SQLParser.DROP, SQLParser.DUMPFILE, SQLParser.END, SQLParser.ENUM, SQLParser.ESCAPE, SQLParser.EXISTS, SQLParser.FIELDS, SQLParser.FROM, SQLParser.GROUP, SQLParser.HAVING, SQLParser.HOUR, SQLParser.IF, SQLParser.INSERT, SQLParser.INTO, SQLParser.LIKE, SQLParser.LIMIT, SQLParser.MICROSECOND, SQLParser.MINUTE, SQLParser.MODE, SQLParser.MONTH, SQLParser.NCHAR, SQLParser.OFFSET, SQLParser.ONDUPLICATE, SQLParser.ORDER, SQLParser.PARTITION, SQLParser.POSITION, SQLParser.QUARTER, SQLParser.QUICK, SQLParser.REPLACE, SQLParser.ROW, SQLParser.SECOND, SQLParser.SELECT, SQLParser.SET, SQLParser.SHARE, SQLParser.SIGNED, SQLParser.SOME, SQLParser.SOUNDS, SQLParser.TEMPORARY, SQLParser.TEXT, SQLParser.TIME, SQLParser.TIMESTAMP, SQLParser.UNICODE, SQLParser.UNION, SQLParser.UNSIGNED, SQLParser.UPDATE, SQLParser.WEEK, SQLParser.WHERE, SQLParser.YEAR, SQLParser.ASCII, SQLParser.SUBSTRING, SQLParser.TRIM, SQLParser.CAST, SQLParser.EXTRACT, SQLParser.WEIGHT_STRING, SQLParser.LR_BRACKET, SQLParser.RR_BRACKET, SQLParser.BQUOTA_STRING, SQLParser.IDENT, SQLParser.SYSVAR]:
                self.enterOuterAlt(localctx, 1)

                pass
            elif token in [SQLParser.FOR, SQLParser.LOCK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 385
                self.locking_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Locking_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(SQLParser.FOR, 0)

        def UPDATE(self):
            return self.getToken(SQLParser.UPDATE, 0)

        def LOCK(self):
            return self.getToken(SQLParser.LOCK, 0)

        def IN(self):
            return self.getToken(SQLParser.IN, 0)

        def SHARE(self):
            return self.getToken(SQLParser.SHARE, 0)

        def MODE(self):
            return self.getToken(SQLParser.MODE, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_locking_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocking_clause" ):
                listener.enterLocking_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocking_clause" ):
                listener.exitLocking_clause(self)




    def locking_clause(self):

        localctx = SQLParser.Locking_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_locking_clause)
        try:
            self.state = 394
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.FOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 388
                self.match(SQLParser.FOR)
                self.state = 389
                self.match(SQLParser.UPDATE)
                pass
            elif token in [SQLParser.LOCK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 390
                self.match(SQLParser.LOCK)
                self.state = 391
                self.match(SQLParser.IN)
                self.state = 392
                self.match(SQLParser.SHARE)
                self.state = 393
                self.match(SQLParser.MODE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Union_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTINCT(self):
            return self.getToken(SQLParser.DISTINCT, 0)

        def ALL(self):
            return self.getToken(SQLParser.ALL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_union_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnion_option" ):
                listener.enterUnion_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnion_option" ):
                listener.exitUnion_option(self)




    def union_option(self):

        localctx = SQLParser.Union_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_union_option)
        try:
            self.state = 399
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.SELECT, SQLParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 1)

                pass
            elif token in [SQLParser.DISTINCT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 397
                self.match(SQLParser.DISTINCT)
                pass
            elif token in [SQLParser.ALL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 398
                self.match(SQLParser.ALL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Query_specificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(SQLParser.SELECT, 0)

        def select_opts(self):
            return self.getTypedRuleContext(SQLParser.Select_optsContext,0)


        def select_item_list(self):
            return self.getTypedRuleContext(SQLParser.Select_item_listContext,0)


        def into_clause(self):
            return self.getTypedRuleContext(SQLParser.Into_clauseContext,0)


        def opt_from_clause(self):
            return self.getTypedRuleContext(SQLParser.Opt_from_clauseContext,0)


        def opt_where_clause(self):
            return self.getTypedRuleContext(SQLParser.Opt_where_clauseContext,0)


        def opt_group_clause(self):
            return self.getTypedRuleContext(SQLParser.Opt_group_clauseContext,0)


        def opt_having_clause(self):
            return self.getTypedRuleContext(SQLParser.Opt_having_clauseContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_query_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_specification" ):
                listener.enterQuery_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_specification" ):
                listener.exitQuery_specification(self)




    def query_specification(self):

        localctx = SQLParser.Query_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_query_specification)
        try:
            self.state = 418
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 401
                self.match(SQLParser.SELECT)
                self.state = 402
                self.select_opts(0)
                self.state = 403
                self.select_item_list(0)
                self.state = 404
                self.into_clause()
                self.state = 405
                self.opt_from_clause()
                self.state = 406
                self.opt_where_clause()
                self.state = 407
                self.opt_group_clause()
                self.state = 408
                self.opt_having_clause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 410
                self.match(SQLParser.SELECT)
                self.state = 411
                self.select_opts(0)
                self.state = 412
                self.select_item_list(0)
                self.state = 413
                self.opt_from_clause()
                self.state = 414
                self.opt_where_clause()
                self.state = 415
                self.opt_group_clause()
                self.state = 416
                self.opt_having_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_from_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def from_clause(self):
            return self.getTypedRuleContext(SQLParser.From_clauseContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_opt_from_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_from_clause" ):
                listener.enterOpt_from_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_from_clause" ):
                listener.exitOpt_from_clause(self)




    def opt_from_clause(self):

        localctx = SQLParser.Opt_from_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_opt_from_clause)
        try:
            self.state = 422
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 421
                self.from_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class From_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(SQLParser.FROM, 0)

        def table_reference_list(self):
            return self.getTypedRuleContext(SQLParser.Table_reference_listContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_from_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_clause" ):
                listener.enterFrom_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_clause" ):
                listener.exitFrom_clause(self)




    def from_clause(self):

        localctx = SQLParser.From_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_from_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 424
            self.match(SQLParser.FROM)
            self.state = 425
            self.table_reference_list(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_where_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def where_clause(self):
            return self.getTypedRuleContext(SQLParser.Where_clauseContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_opt_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_where_clause" ):
                listener.enterOpt_where_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_where_clause" ):
                listener.exitOpt_where_clause(self)




    def opt_where_clause(self):

        localctx = SQLParser.Opt_where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_opt_where_clause)
        try:
            self.state = 429
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 428
                self.where_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Where_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(SQLParser.WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_clause" ):
                listener.enterWhere_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_clause" ):
                listener.exitWhere_clause(self)




    def where_clause(self):

        localctx = SQLParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_where_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 431
            self.match(SQLParser.WHERE)
            self.state = 432
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_group_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group_clause(self):
            return self.getTypedRuleContext(SQLParser.Group_clauseContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_opt_group_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_group_clause" ):
                listener.enterOpt_group_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_group_clause" ):
                listener.exitOpt_group_clause(self)




    def opt_group_clause(self):

        localctx = SQLParser.Opt_group_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_opt_group_clause)
        try:
            self.state = 436
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 435
                self.group_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(SQLParser.GROUP, 0)

        def BY(self):
            return self.getToken(SQLParser.BY, 0)

        def group_list(self):
            return self.getTypedRuleContext(SQLParser.Group_listContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_group_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_clause" ):
                listener.enterGroup_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_clause" ):
                listener.exitGroup_clause(self)




    def group_clause(self):

        localctx = SQLParser.Group_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_group_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 438
            self.match(SQLParser.GROUP)
            self.state = 439
            self.match(SQLParser.BY)
            self.state = 440
            self.group_list(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_having_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def having_clause(self):
            return self.getTypedRuleContext(SQLParser.Having_clauseContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_opt_having_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_having_clause" ):
                listener.enterOpt_having_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_having_clause" ):
                listener.exitOpt_having_clause(self)




    def opt_having_clause(self):

        localctx = SQLParser.Opt_having_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_opt_having_clause)
        try:
            self.state = 444
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 443
                self.having_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Having_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(SQLParser.HAVING, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_having_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHaving_clause" ):
                listener.enterHaving_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHaving_clause" ):
                listener.exitHaving_clause(self)




    def having_clause(self):

        localctx = SQLParser.Having_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_having_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            self.match(SQLParser.HAVING)
            self.state = 447
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_order_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def order_clause(self):
            return self.getTypedRuleContext(SQLParser.Order_clauseContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_opt_order_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_order_clause" ):
                listener.enterOpt_order_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_order_clause" ):
                listener.exitOpt_order_clause(self)




    def opt_order_clause(self):

        localctx = SQLParser.Opt_order_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_opt_order_clause)
        try:
            self.state = 451
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 450
                self.order_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Order_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(SQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(SQLParser.BY, 0)

        def order_list(self):
            return self.getTypedRuleContext(SQLParser.Order_listContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_order_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_clause" ):
                listener.enterOrder_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_clause" ):
                listener.exitOrder_clause(self)




    def order_clause(self):

        localctx = SQLParser.Order_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_order_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 453
            self.match(SQLParser.ORDER)
            self.state = 454
            self.match(SQLParser.BY)
            self.state = 455
            self.order_list(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_limit_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def limit_clause(self):
            return self.getTypedRuleContext(SQLParser.Limit_clauseContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_opt_limit_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_limit_clause" ):
                listener.enterOpt_limit_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_limit_clause" ):
                listener.exitOpt_limit_clause(self)




    def opt_limit_clause(self):

        localctx = SQLParser.Opt_limit_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_opt_limit_clause)
        try:
            self.state = 459
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 458
                self.limit_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Limit_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(SQLParser.LIMIT, 0)

        def limit_options(self):
            return self.getTypedRuleContext(SQLParser.Limit_optionsContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_limit_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimit_clause" ):
                listener.enterLimit_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimit_clause" ):
                listener.exitLimit_clause(self)




    def limit_clause(self):

        localctx = SQLParser.Limit_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_limit_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 461
            self.match(SQLParser.LIMIT)
            self.state = 462
            self.limit_options()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def group_list(self):
            return self.getTypedRuleContext(SQLParser.Group_listContext,0)


        def COMMA(self):
            return self.getToken(SQLParser.COMMA, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_group_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_list" ):
                listener.enterGroup_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_list" ):
                listener.exitGroup_list(self)



    def group_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLParser.Group_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 48
        self.enterRecursionRule(localctx, 48, self.RULE_group_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 465
            self.expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 472
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SQLParser.Group_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_group_list)
                    self.state = 467
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 468
                    self.match(SQLParser.COMMA)
                    self.state = 469
                    self.expr(0) 
                self.state = 474
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Order_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def order_expr(self):
            return self.getTypedRuleContext(SQLParser.Order_exprContext,0)


        def order_list(self):
            return self.getTypedRuleContext(SQLParser.Order_listContext,0)


        def COMMA(self):
            return self.getToken(SQLParser.COMMA, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_order_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_list" ):
                listener.enterOrder_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_list" ):
                listener.exitOrder_list(self)



    def order_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLParser.Order_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 50
        self.enterRecursionRule(localctx, 50, self.RULE_order_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 476
            self.order_expr()
            self._ctx.stop = self._input.LT(-1)
            self.state = 483
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,20,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SQLParser.Order_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_order_list)
                    self.state = 478
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 479
                    self.match(SQLParser.COMMA)
                    self.state = 480
                    self.order_expr() 
                self.state = 485
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Order_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def opt_ordering_direction(self):
            return self.getTypedRuleContext(SQLParser.Opt_ordering_directionContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_order_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_expr" ):
                listener.enterOrder_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_expr" ):
                listener.exitOrder_expr(self)




    def order_expr(self):

        localctx = SQLParser.Order_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_order_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 486
            self.expr(0)
            self.state = 487
            self.opt_ordering_direction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_ordering_directionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASC(self):
            return self.getToken(SQLParser.ASC, 0)

        def DESC(self):
            return self.getToken(SQLParser.DESC, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_opt_ordering_direction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_ordering_direction" ):
                listener.enterOpt_ordering_direction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_ordering_direction" ):
                listener.exitOpt_ordering_direction(self)




    def opt_ordering_direction(self):

        localctx = SQLParser.Opt_ordering_directionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_opt_ordering_direction)
        try:
            self.state = 492
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 490
                self.match(SQLParser.ASC)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 491
                self.match(SQLParser.DESC)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Limit_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def limit_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.Limit_optionContext)
            else:
                return self.getTypedRuleContext(SQLParser.Limit_optionContext,i)


        def COMMA(self):
            return self.getToken(SQLParser.COMMA, 0)

        def OFFSET(self):
            return self.getToken(SQLParser.OFFSET, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_limit_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimit_options" ):
                listener.enterLimit_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimit_options" ):
                listener.exitLimit_options(self)




    def limit_options(self):

        localctx = SQLParser.Limit_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_limit_options)
        try:
            self.state = 503
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 494
                self.limit_option()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 495
                self.limit_option()
                self.state = 496
                self.match(SQLParser.COMMA)
                self.state = 497
                self.limit_option()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 499
                self.limit_option()
                self.state = 500
                self.match(SQLParser.OFFSET)
                self.state = 501
                self.limit_option()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Limit_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUM(self):
            return self.getToken(SQLParser.NUM, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_limit_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimit_option" ):
                listener.enterLimit_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimit_option" ):
                listener.exitLimit_option(self)




    def limit_option(self):

        localctx = SQLParser.Limit_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_limit_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 505
            self.match(SQLParser.NUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_item_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_item(self):
            return self.getTypedRuleContext(SQLParser.Select_itemContext,0)


        def STAR(self):
            return self.getToken(SQLParser.STAR, 0)

        def select_item_list(self):
            return self.getTypedRuleContext(SQLParser.Select_item_listContext,0)


        def COMMA(self):
            return self.getToken(SQLParser.COMMA, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_select_item_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_item_list" ):
                listener.enterSelect_item_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_item_list" ):
                listener.exitSelect_item_list(self)



    def select_item_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLParser.Select_item_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 60
        self.enterRecursionRule(localctx, 60, self.RULE_select_item_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 510
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 508
                self.select_item()
                pass

            elif la_ == 2:
                self.state = 509
                self.match(SQLParser.STAR)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 517
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SQLParser.Select_item_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_select_item_list)
                    self.state = 512
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 513
                    self.match(SQLParser.COMMA)
                    self.state = 514
                    self.select_item() 
                self.state = 519
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Select_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_wild(self):
            return self.getTypedRuleContext(SQLParser.Table_wildContext,0)


        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def AS(self):
            return self.getToken(SQLParser.AS, 0)

        def collabel(self):
            return self.getTypedRuleContext(SQLParser.CollabelContext,0)


        def string_literal(self):
            return self.getTypedRuleContext(SQLParser.String_literalContext,0)


        def ident(self):
            return self.getTypedRuleContext(SQLParser.IdentContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_select_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_item" ):
                listener.enterSelect_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_item" ):
                listener.exitSelect_item(self)




    def select_item(self):

        localctx = SQLParser.Select_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_select_item)
        try:
            self.state = 536
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 520
                self.table_wild()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 521
                self.expr(0)
                self.state = 522
                self.match(SQLParser.AS)
                self.state = 523
                self.collabel()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 525
                self.expr(0)
                self.state = 526
                self.match(SQLParser.AS)
                self.state = 527
                self.string_literal()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 529
                self.expr(0)
                self.state = 530
                self.ident()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 532
                self.expr(0)
                self.state = 533
                self.string_literal()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 535
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CollabelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ident(self):
            return self.getTypedRuleContext(SQLParser.IdentContext,0)


        def reserved_keyword(self):
            return self.getTypedRuleContext(SQLParser.Reserved_keywordContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_collabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollabel" ):
                listener.enterCollabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollabel" ):
                listener.exitCollabel(self)




    def collabel(self):

        localctx = SQLParser.CollabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_collabel)
        try:
            self.state = 540
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.ANY, SQLParser.AUTO_INCREMENT, SQLParser.BIT, SQLParser.BOOLEAN, SQLParser.COMMENT, SQLParser.COUNT, SQLParser.DATE, SQLParser.DATETIME, SQLParser.DAY, SQLParser.DUMPFILE, SQLParser.END, SQLParser.ENUM, SQLParser.ESCAPE, SQLParser.FIELDS, SQLParser.HOUR, SQLParser.MICROSECOND, SQLParser.MINUTE, SQLParser.MODE, SQLParser.MONTH, SQLParser.NCHAR, SQLParser.OFFSET, SQLParser.ONDUPLICATE, SQLParser.PARTITION, SQLParser.POSITION, SQLParser.QUARTER, SQLParser.QUICK, SQLParser.SECOND, SQLParser.SHARE, SQLParser.SIGNED, SQLParser.SOME, SQLParser.SOUNDS, SQLParser.TEMPORARY, SQLParser.TEXT, SQLParser.TIME, SQLParser.TIMESTAMP, SQLParser.UNICODE, SQLParser.UNSIGNED, SQLParser.WEEK, SQLParser.YEAR, SQLParser.SUBSTRING, SQLParser.TRIM, SQLParser.BQUOTA_STRING, SQLParser.IDENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 538
                self.ident()
                pass
            elif token in [SQLParser.ALL, SQLParser.AS, SQLParser.ASC, SQLParser.BETWEEN, SQLParser.BIGINT, SQLParser.BINARY, SQLParser.BLOB, SQLParser.BOTH, SQLParser.BY, SQLParser.CASE, SQLParser.CHAR, SQLParser.COLLATE, SQLParser.CONVERT, SQLParser.CREATE, SQLParser.CROSS, SQLParser.DATABASE, SQLParser.DAY_HOUR, SQLParser.DAY_MICROSECOND, SQLParser.DAY_MINUTE, SQLParser.DAY_SECOND, SQLParser.DECIMAL, SQLParser.DEFAULT, SQLParser.DELAYED, SQLParser.DELETE, SQLParser.DESC, SQLParser.DISTINCT, SQLParser.DISTINCTROW, SQLParser.DIV, SQLParser.DOUBLE, SQLParser.ELSE, SQLParser.ENCLOSED, SQLParser.ESCAPED, SQLParser.EXISTS, SQLParser.FLOAT, SQLParser.FOR, SQLParser.FORCE, SQLParser.FROM, SQLParser.FULLTEXT, SQLParser.GROUP, SQLParser.HAVING, SQLParser.HIGH_PRIORITY, SQLParser.HOUR_MICROSECOND, SQLParser.HOUR_MINUTE, SQLParser.HOUR_SECOND, SQLParser.IF, SQLParser.IGNORE, SQLParser.IN, SQLParser.INDEX, SQLParser.INNER, SQLParser.INSERT, SQLParser.INTEGER, SQLParser.INTERVAL, SQLParser.INTO, SQLParser.JOIN, SQLParser.KEY, SQLParser.LEADING, SQLParser.LEFT, SQLParser.LIKE, SQLParser.LIMIT, SQLParser.LINES, SQLParser.LOCK, SQLParser.LONGBLOB, SQLParser.LONGTEXT, SQLParser.LOW_PRIORITY, SQLParser.MEDIUMBLOB, SQLParser.MEDIUMINT, SQLParser.MEDIUMTEXT, SQLParser.MINUTE_MICROSECOND, SQLParser.MINUTE_SECOND, SQLParser.MOD, SQLParser.NATURAL, SQLParser.NOT, SQLParser.NULLX, SQLParser.ON, SQLParser.OPTIONALLY, SQLParser.ORDER, SQLParser.OUTER, SQLParser.OUTFILE, SQLParser.PRIMARY, SQLParser.REAL, SQLParser.REGEXP, SQLParser.REPLACE, SQLParser.RIGHT, SQLParser.ROW, SQLParser.SCHEMA, SQLParser.SECOND_MICROSECOND, SQLParser.SELECT, SQLParser.SET, SQLParser.SMALLINT, SQLParser.SQL_BIG_RESULT, SQLParser.SQL_CALC_FOUND_ROWS, SQLParser.SQL_SMALL_RESULT, SQLParser.STARTING, SQLParser.STRAIGHT_JOIN, SQLParser.TABLE, SQLParser.TERMINATED, SQLParser.THEN, SQLParser.TINYBLOB, SQLParser.TINYINT, SQLParser.TINYTEXT, SQLParser.TRAILING, SQLParser.UNION, SQLParser.UNIQUE, SQLParser.UPDATE, SQLParser.USE, SQLParser.USING, SQLParser.VALUES, SQLParser.VARBINARY, SQLParser.VARCHAR, SQLParser.WHEN, SQLParser.WHERE, SQLParser.XOR, SQLParser.YEAR_MONTH, SQLParser.ZEROFILL, SQLParser.AND, SQLParser.OR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 539
                self.reserved_keyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_wildContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ident(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.IdentContext)
            else:
                return self.getTypedRuleContext(SQLParser.IdentContext,i)


        def STAR(self):
            return self.getToken(SQLParser.STAR, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_table_wild

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_wild" ):
                listener.enterTable_wild(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_wild" ):
                listener.exitTable_wild(self)




    def table_wild(self):

        localctx = SQLParser.Table_wildContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_table_wild)
        try:
            self.state = 552
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 542
                self.ident()
                self.state = 543
                self.match(SQLParser.DOT)
                self.state = 544
                self.match(SQLParser.STAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 546
                self.ident()
                self.state = 547
                self.match(SQLParser.DOT)
                self.state = 548
                self.ident()
                self.state = 549
                self.match(SQLParser.DOT)
                self.state = 550
                self.match(SQLParser.STAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(SQLParser.AS, 0)

        def ident(self):
            return self.getTypedRuleContext(SQLParser.IdentContext,0)


        def string_literal(self):
            return self.getTypedRuleContext(SQLParser.String_literalContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_opt_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_alias" ):
                listener.enterOpt_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_alias" ):
                listener.exitOpt_alias(self)




    def opt_alias(self):

        localctx = SQLParser.Opt_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_opt_alias)
        try:
            self.state = 561
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 555
                self.match(SQLParser.AS)
                self.state = 556
                self.ident()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 557
                self.match(SQLParser.AS)
                self.state = 558
                self.string_literal()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 559
                self.ident()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 560
                self.string_literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Into_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(SQLParser.INTO, 0)

        def into_destination(self):
            return self.getTypedRuleContext(SQLParser.Into_destinationContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_into_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInto_clause" ):
                listener.enterInto_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInto_clause" ):
                listener.exitInto_clause(self)




    def into_clause(self):

        localctx = SQLParser.Into_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_into_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 563
            self.match(SQLParser.INTO)
            self.state = 564
            self.into_destination()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Into_destinationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OUTFILE(self):
            return self.getToken(SQLParser.OUTFILE, 0)

        def string_literal(self):
            return self.getTypedRuleContext(SQLParser.String_literalContext,0)


        def opt_load_data_charset(self):
            return self.getTypedRuleContext(SQLParser.Opt_load_data_charsetContext,0)


        def opt_field_term(self):
            return self.getTypedRuleContext(SQLParser.Opt_field_termContext,0)


        def opt_line_term(self):
            return self.getTypedRuleContext(SQLParser.Opt_line_termContext,0)


        def DUMPFILE(self):
            return self.getToken(SQLParser.DUMPFILE, 0)

        def select_var_list(self):
            return self.getTypedRuleContext(SQLParser.Select_var_listContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_into_destination

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInto_destination" ):
                listener.enterInto_destination(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInto_destination" ):
                listener.exitInto_destination(self)




    def into_destination(self):

        localctx = SQLParser.Into_destinationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_into_destination)
        try:
            self.state = 575
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 566
                self.match(SQLParser.OUTFILE)
                self.state = 567
                self.string_literal()
                self.state = 568
                self.opt_load_data_charset()
                self.state = 569
                self.opt_field_term()
                self.state = 570
                self.opt_line_term()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 572
                self.match(SQLParser.DUMPFILE)
                self.state = 573
                self.string_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 574
                self.select_var_list(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_load_data_charsetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def character_set(self):
            return self.getTypedRuleContext(SQLParser.Character_setContext,0)


        def charset_name(self):
            return self.getTypedRuleContext(SQLParser.Charset_nameContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_opt_load_data_charset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_load_data_charset" ):
                listener.enterOpt_load_data_charset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_load_data_charset" ):
                listener.exitOpt_load_data_charset(self)




    def opt_load_data_charset(self):

        localctx = SQLParser.Opt_load_data_charsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_opt_load_data_charset)
        try:
            self.state = 581
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 578
                self.character_set()
                self.state = 579
                self.charset_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_field_termContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FIELDS(self):
            return self.getToken(SQLParser.FIELDS, 0)

        def field_term_list(self):
            return self.getTypedRuleContext(SQLParser.Field_term_listContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_opt_field_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_field_term" ):
                listener.enterOpt_field_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_field_term" ):
                listener.exitOpt_field_term(self)




    def opt_field_term(self):

        localctx = SQLParser.Opt_field_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_opt_field_term)
        try:
            self.state = 586
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 584
                self.match(SQLParser.FIELDS)
                self.state = 585
                self.field_term_list(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_term_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field_term(self):
            return self.getTypedRuleContext(SQLParser.Field_termContext,0)


        def field_term_list(self):
            return self.getTypedRuleContext(SQLParser.Field_term_listContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_field_term_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_term_list" ):
                listener.enterField_term_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_term_list" ):
                listener.exitField_term_list(self)



    def field_term_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLParser.Field_term_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 78
        self.enterRecursionRule(localctx, 78, self.RULE_field_term_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 589
            self.field_term()
            self._ctx.stop = self._input.LT(-1)
            self.state = 595
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,32,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SQLParser.Field_term_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_field_term_list)
                    self.state = 591
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 592
                    self.field_term() 
                self.state = 597
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Field_termContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TERMINATED(self):
            return self.getToken(SQLParser.TERMINATED, 0)

        def BY(self):
            return self.getToken(SQLParser.BY, 0)

        def string_literal(self):
            return self.getTypedRuleContext(SQLParser.String_literalContext,0)


        def OPTIONALLY(self):
            return self.getToken(SQLParser.OPTIONALLY, 0)

        def ENCLOSED(self):
            return self.getToken(SQLParser.ENCLOSED, 0)

        def ESCAPED(self):
            return self.getToken(SQLParser.ESCAPED, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_field_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_term" ):
                listener.enterField_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_term" ):
                listener.exitField_term(self)




    def field_term(self):

        localctx = SQLParser.Field_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_field_term)
        try:
            self.state = 611
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.TERMINATED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 598
                self.match(SQLParser.TERMINATED)
                self.state = 599
                self.match(SQLParser.BY)
                self.state = 600
                self.string_literal()
                pass
            elif token in [SQLParser.OPTIONALLY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 601
                self.match(SQLParser.OPTIONALLY)
                self.state = 602
                self.match(SQLParser.ENCLOSED)
                self.state = 603
                self.match(SQLParser.BY)
                self.state = 604
                self.string_literal()
                pass
            elif token in [SQLParser.ENCLOSED]:
                self.enterOuterAlt(localctx, 3)
                self.state = 605
                self.match(SQLParser.ENCLOSED)
                self.state = 606
                self.match(SQLParser.BY)
                self.state = 607
                self.string_literal()
                pass
            elif token in [SQLParser.ESCAPED]:
                self.enterOuterAlt(localctx, 4)
                self.state = 608
                self.match(SQLParser.ESCAPED)
                self.state = 609
                self.match(SQLParser.BY)
                self.state = 610
                self.string_literal()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_line_termContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINES(self):
            return self.getToken(SQLParser.LINES, 0)

        def line_term_list(self):
            return self.getTypedRuleContext(SQLParser.Line_term_listContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_opt_line_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_line_term" ):
                listener.enterOpt_line_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_line_term" ):
                listener.exitOpt_line_term(self)




    def opt_line_term(self):

        localctx = SQLParser.Opt_line_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_opt_line_term)
        try:
            self.state = 616
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 614
                self.match(SQLParser.LINES)
                self.state = 615
                self.line_term_list(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Line_term_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def line_term(self):
            return self.getTypedRuleContext(SQLParser.Line_termContext,0)


        def line_term_list(self):
            return self.getTypedRuleContext(SQLParser.Line_term_listContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_line_term_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLine_term_list" ):
                listener.enterLine_term_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLine_term_list" ):
                listener.exitLine_term_list(self)



    def line_term_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLParser.Line_term_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 84
        self.enterRecursionRule(localctx, 84, self.RULE_line_term_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 619
            self.line_term()
            self._ctx.stop = self._input.LT(-1)
            self.state = 625
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,35,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SQLParser.Line_term_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_line_term_list)
                    self.state = 621
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 622
                    self.line_term() 
                self.state = 627
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Line_termContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TERMINATED(self):
            return self.getToken(SQLParser.TERMINATED, 0)

        def BY(self):
            return self.getToken(SQLParser.BY, 0)

        def string_literal(self):
            return self.getTypedRuleContext(SQLParser.String_literalContext,0)


        def STARTING(self):
            return self.getToken(SQLParser.STARTING, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_line_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLine_term" ):
                listener.enterLine_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLine_term" ):
                listener.exitLine_term(self)




    def line_term(self):

        localctx = SQLParser.Line_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_line_term)
        try:
            self.state = 634
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.TERMINATED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 628
                self.match(SQLParser.TERMINATED)
                self.state = 629
                self.match(SQLParser.BY)
                self.state = 630
                self.string_literal()
                pass
            elif token in [SQLParser.STARTING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 631
                self.match(SQLParser.STARTING)
                self.state = 632
                self.match(SQLParser.BY)
                self.state = 633
                self.string_literal()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_var_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_var_ident(self):
            return self.getTypedRuleContext(SQLParser.Select_var_identContext,0)


        def select_var_list(self):
            return self.getTypedRuleContext(SQLParser.Select_var_listContext,0)


        def COMMA(self):
            return self.getToken(SQLParser.COMMA, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_select_var_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_var_list" ):
                listener.enterSelect_var_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_var_list" ):
                listener.exitSelect_var_list(self)



    def select_var_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLParser.Select_var_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 88
        self.enterRecursionRule(localctx, 88, self.RULE_select_var_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 637
            self.select_var_ident()
            self._ctx.stop = self._input.LT(-1)
            self.state = 644
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,37,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SQLParser.Select_var_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_select_var_list)
                    self.state = 639
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 640
                    self.match(SQLParser.COMMA)
                    self.state = 641
                    self.select_var_ident() 
                self.state = 646
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,37,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Select_var_identContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ident_or_text(self):
            return self.getTypedRuleContext(SQLParser.Ident_or_textContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_select_var_ident

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_var_ident" ):
                listener.enterSelect_var_ident(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_var_ident" ):
                listener.exitSelect_var_ident(self)




    def select_var_ident(self):

        localctx = SQLParser.Select_var_identContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_select_var_ident)
        try:
            self.state = 650
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.AT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 647
                self.match(SQLParser.AT)
                self.state = 648
                self.ident_or_text()
                pass
            elif token in [SQLParser.ANY, SQLParser.AUTO_INCREMENT, SQLParser.BIT, SQLParser.BOOLEAN, SQLParser.COMMENT, SQLParser.COUNT, SQLParser.DATE, SQLParser.DATETIME, SQLParser.DAY, SQLParser.DUMPFILE, SQLParser.END, SQLParser.ENUM, SQLParser.ESCAPE, SQLParser.FIELDS, SQLParser.HOUR, SQLParser.MICROSECOND, SQLParser.MINUTE, SQLParser.MODE, SQLParser.MONTH, SQLParser.NCHAR, SQLParser.OFFSET, SQLParser.ONDUPLICATE, SQLParser.PARTITION, SQLParser.POSITION, SQLParser.QUARTER, SQLParser.QUICK, SQLParser.SECOND, SQLParser.SHARE, SQLParser.SIGNED, SQLParser.SOME, SQLParser.SOUNDS, SQLParser.TEMPORARY, SQLParser.TEXT, SQLParser.TIME, SQLParser.TIMESTAMP, SQLParser.UNICODE, SQLParser.UNSIGNED, SQLParser.WEEK, SQLParser.YEAR, SQLParser.SUBSTRING, SQLParser.TRIM, SQLParser.QUOTA_STRING, SQLParser.DOUBLE_QUOTA_STRING, SQLParser.BQUOTA_STRING, SQLParser.IDENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 649
                self.ident_or_text()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ident_or_textContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ident(self):
            return self.getTypedRuleContext(SQLParser.IdentContext,0)


        def string_literal(self):
            return self.getTypedRuleContext(SQLParser.String_literalContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_ident_or_text

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdent_or_text" ):
                listener.enterIdent_or_text(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdent_or_text" ):
                listener.exitIdent_or_text(self)




    def ident_or_text(self):

        localctx = SQLParser.Ident_or_textContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_ident_or_text)
        try:
            self.state = 654
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.ANY, SQLParser.AUTO_INCREMENT, SQLParser.BIT, SQLParser.BOOLEAN, SQLParser.COMMENT, SQLParser.COUNT, SQLParser.DATE, SQLParser.DATETIME, SQLParser.DAY, SQLParser.DUMPFILE, SQLParser.END, SQLParser.ENUM, SQLParser.ESCAPE, SQLParser.FIELDS, SQLParser.HOUR, SQLParser.MICROSECOND, SQLParser.MINUTE, SQLParser.MODE, SQLParser.MONTH, SQLParser.NCHAR, SQLParser.OFFSET, SQLParser.ONDUPLICATE, SQLParser.PARTITION, SQLParser.POSITION, SQLParser.QUARTER, SQLParser.QUICK, SQLParser.SECOND, SQLParser.SHARE, SQLParser.SIGNED, SQLParser.SOME, SQLParser.SOUNDS, SQLParser.TEMPORARY, SQLParser.TEXT, SQLParser.TIME, SQLParser.TIMESTAMP, SQLParser.UNICODE, SQLParser.UNSIGNED, SQLParser.WEEK, SQLParser.YEAR, SQLParser.SUBSTRING, SQLParser.TRIM, SQLParser.BQUOTA_STRING, SQLParser.IDENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 652
                self.ident()
                pass
            elif token in [SQLParser.QUOTA_STRING, SQLParser.DOUBLE_QUOTA_STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 653
                self.string_literal()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ident(self):
            return self.getTypedRuleContext(SQLParser.IdentContext,0)


        def column_list(self):
            return self.getTypedRuleContext(SQLParser.Column_listContext,0)


        def COMMA(self):
            return self.getToken(SQLParser.COMMA, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_column_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_list" ):
                listener.enterColumn_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_list" ):
                listener.exitColumn_list(self)



    def column_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLParser.Column_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 94
        self.enterRecursionRule(localctx, 94, self.RULE_column_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 657
            self.ident()
            self._ctx.stop = self._input.LT(-1)
            self.state = 664
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SQLParser.Column_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_column_list)
                    self.state = 659
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 660
                    self.match(SQLParser.COMMA)
                    self.state = 661
                    self.ident() 
                self.state = 666
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Select_optsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_opts(self):
            return self.getTypedRuleContext(SQLParser.Select_optsContext,0)


        def ALL(self):
            return self.getToken(SQLParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(SQLParser.DISTINCT, 0)

        def DISTINCTROW(self):
            return self.getToken(SQLParser.DISTINCTROW, 0)

        def HIGH_PRIORITY(self):
            return self.getToken(SQLParser.HIGH_PRIORITY, 0)

        def STRAIGHT_JOIN(self):
            return self.getToken(SQLParser.STRAIGHT_JOIN, 0)

        def SQL_SMALL_RESULT(self):
            return self.getToken(SQLParser.SQL_SMALL_RESULT, 0)

        def SQL_BIG_RESULT(self):
            return self.getToken(SQLParser.SQL_BIG_RESULT, 0)

        def SQL_CALC_FOUND_ROWS(self):
            return self.getToken(SQLParser.SQL_CALC_FOUND_ROWS, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_select_opts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_opts" ):
                listener.enterSelect_opts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_opts" ):
                listener.exitSelect_opts(self)



    def select_opts(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLParser.Select_optsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 96
        self.enterRecursionRule(localctx, 96, self.RULE_select_opts, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self._ctx.stop = self._input.LT(-1)
            self.state = 686
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,42,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 684
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
                    if la_ == 1:
                        localctx = SQLParser.Select_optsContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_select_opts)
                        self.state = 668
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 669
                        self.match(SQLParser.ALL)
                        pass

                    elif la_ == 2:
                        localctx = SQLParser.Select_optsContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_select_opts)
                        self.state = 670
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 671
                        self.match(SQLParser.DISTINCT)
                        pass

                    elif la_ == 3:
                        localctx = SQLParser.Select_optsContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_select_opts)
                        self.state = 672
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 673
                        self.match(SQLParser.DISTINCTROW)
                        pass

                    elif la_ == 4:
                        localctx = SQLParser.Select_optsContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_select_opts)
                        self.state = 674
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 675
                        self.match(SQLParser.HIGH_PRIORITY)
                        pass

                    elif la_ == 5:
                        localctx = SQLParser.Select_optsContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_select_opts)
                        self.state = 676
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 677
                        self.match(SQLParser.STRAIGHT_JOIN)
                        pass

                    elif la_ == 6:
                        localctx = SQLParser.Select_optsContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_select_opts)
                        self.state = 678
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 679
                        self.match(SQLParser.SQL_SMALL_RESULT)
                        pass

                    elif la_ == 7:
                        localctx = SQLParser.Select_optsContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_select_opts)
                        self.state = 680
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 681
                        self.match(SQLParser.SQL_BIG_RESULT)
                        pass

                    elif la_ == 8:
                        localctx = SQLParser.Select_optsContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_select_opts)
                        self.state = 682
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 683
                        self.match(SQLParser.SQL_CALC_FOUND_ROWS)
                        pass

             
                self.state = 688
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Esc_table_referenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_factor(self):
            return self.getTypedRuleContext(SQLParser.Table_factorContext,0)


        def joined_table(self):
            return self.getTypedRuleContext(SQLParser.Joined_tableContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_esc_table_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEsc_table_reference" ):
                listener.enterEsc_table_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEsc_table_reference" ):
                listener.exitEsc_table_reference(self)




    def esc_table_reference(self):

        localctx = SQLParser.Esc_table_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_esc_table_reference)
        try:
            self.state = 691
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 689
                self.table_factor()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 690
                self.joined_table(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_referenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_factor(self):
            return self.getTypedRuleContext(SQLParser.Table_factorContext,0)


        def BIG_LR_BRACKET(self):
            return self.getToken(SQLParser.BIG_LR_BRACKET, 0)

        def ident(self):
            return self.getTypedRuleContext(SQLParser.IdentContext,0)


        def esc_table_reference(self):
            return self.getTypedRuleContext(SQLParser.Esc_table_referenceContext,0)


        def BIG_RR_BRACKET(self):
            return self.getToken(SQLParser.BIG_RR_BRACKET, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_table_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_reference" ):
                listener.enterTable_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_reference" ):
                listener.exitTable_reference(self)




    def table_reference(self):

        localctx = SQLParser.Table_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_table_reference)
        try:
            self.state = 699
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.ANY, SQLParser.AUTO_INCREMENT, SQLParser.BIT, SQLParser.BOOLEAN, SQLParser.CASE, SQLParser.CHAR, SQLParser.COMMENT, SQLParser.CONVERT, SQLParser.COUNT, SQLParser.DATABASE, SQLParser.DATE, SQLParser.DATETIME, SQLParser.DAY, SQLParser.DUMPFILE, SQLParser.END, SQLParser.ENUM, SQLParser.ESCAPE, SQLParser.EXISTS, SQLParser.FIELDS, SQLParser.HOUR, SQLParser.IF, SQLParser.LIKE, SQLParser.MICROSECOND, SQLParser.MINUTE, SQLParser.MODE, SQLParser.MONTH, SQLParser.NCHAR, SQLParser.OFFSET, SQLParser.ONDUPLICATE, SQLParser.PARTITION, SQLParser.POSITION, SQLParser.QUARTER, SQLParser.QUICK, SQLParser.ROW, SQLParser.SECOND, SQLParser.SHARE, SQLParser.SIGNED, SQLParser.SOME, SQLParser.SOUNDS, SQLParser.TEMPORARY, SQLParser.TEXT, SQLParser.TIME, SQLParser.TIMESTAMP, SQLParser.UNICODE, SQLParser.UNSIGNED, SQLParser.WEEK, SQLParser.YEAR, SQLParser.ASCII, SQLParser.SUBSTRING, SQLParser.TRIM, SQLParser.CAST, SQLParser.EXTRACT, SQLParser.WEIGHT_STRING, SQLParser.LR_BRACKET, SQLParser.BQUOTA_STRING, SQLParser.IDENT, SQLParser.SYSVAR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 693
                self.table_factor()
                pass
            elif token in [SQLParser.BIG_LR_BRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 694
                self.match(SQLParser.BIG_LR_BRACKET)
                self.state = 695
                self.ident()
                self.state = 696
                self.esc_table_reference()
                self.state = 697
                self.match(SQLParser.BIG_RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_factorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_table(self):
            return self.getTypedRuleContext(SQLParser.Single_tableContext,0)


        def single_table_parens(self):
            return self.getTypedRuleContext(SQLParser.Single_table_parensContext,0)


        def table_subquery(self):
            return self.getTypedRuleContext(SQLParser.Table_subqueryContext,0)


        def opt_table_alias(self):
            return self.getTypedRuleContext(SQLParser.Opt_table_aliasContext,0)


        def opt_derived_column_list(self):
            return self.getTypedRuleContext(SQLParser.Opt_derived_column_listContext,0)


        def joined_table_parens(self):
            return self.getTypedRuleContext(SQLParser.Joined_table_parensContext,0)


        def table_reference_list_parens(self):
            return self.getTypedRuleContext(SQLParser.Table_reference_list_parensContext,0)


        def functionCall(self):
            return self.getTypedRuleContext(SQLParser.FunctionCallContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_table_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_factor" ):
                listener.enterTable_factor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_factor" ):
                listener.exitTable_factor(self)




    def table_factor(self):

        localctx = SQLParser.Table_factorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_table_factor)
        try:
            self.state = 710
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 701
                self.single_table()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 702
                self.single_table_parens()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 703
                self.table_subquery()
                self.state = 704
                self.opt_table_alias()
                self.state = 705
                self.opt_derived_column_list()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 707
                self.joined_table_parens()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 708
                self.table_reference_list_parens()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 709
                self.functionCall()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Joined_table_parensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def joined_table_parens(self):
            return self.getTypedRuleContext(SQLParser.Joined_table_parensContext,0)


        def joined_table(self):
            return self.getTypedRuleContext(SQLParser.Joined_tableContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_joined_table_parens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoined_table_parens" ):
                listener.enterJoined_table_parens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoined_table_parens" ):
                listener.exitJoined_table_parens(self)




    def joined_table_parens(self):

        localctx = SQLParser.Joined_table_parensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_joined_table_parens)
        try:
            self.state = 720
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 712
                self.match(SQLParser.LR_BRACKET)
                self.state = 713
                self.joined_table_parens()
                self.state = 714
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 716
                self.match(SQLParser.LR_BRACKET)
                self.state = 717
                self.joined_table(0)
                self.state = 718
                self.match(SQLParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_reference_list_parensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_reference_list_parens(self):
            return self.getTypedRuleContext(SQLParser.Table_reference_list_parensContext,0)


        def table_reference_list(self):
            return self.getTypedRuleContext(SQLParser.Table_reference_listContext,0)


        def COMMA(self):
            return self.getToken(SQLParser.COMMA, 0)

        def table_reference(self):
            return self.getTypedRuleContext(SQLParser.Table_referenceContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_table_reference_list_parens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_reference_list_parens" ):
                listener.enterTable_reference_list_parens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_reference_list_parens" ):
                listener.exitTable_reference_list_parens(self)




    def table_reference_list_parens(self):

        localctx = SQLParser.Table_reference_list_parensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_table_reference_list_parens)
        try:
            self.state = 732
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 722
                self.match(SQLParser.LR_BRACKET)
                self.state = 723
                self.table_reference_list_parens()
                self.state = 724
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 726
                self.match(SQLParser.LR_BRACKET)
                self.state = 727
                self.table_reference_list(0)
                self.state = 728
                self.match(SQLParser.COMMA)
                self.state = 729
                self.table_reference()
                self.state = 730
                self.match(SQLParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_reference_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_reference(self):
            return self.getTypedRuleContext(SQLParser.Table_referenceContext,0)


        def table_reference_list(self):
            return self.getTypedRuleContext(SQLParser.Table_reference_listContext,0)


        def COMMA(self):
            return self.getToken(SQLParser.COMMA, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_table_reference_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_reference_list" ):
                listener.enterTable_reference_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_reference_list" ):
                listener.exitTable_reference_list(self)



    def table_reference_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLParser.Table_reference_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 108
        self.enterRecursionRule(localctx, 108, self.RULE_table_reference_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 735
            self.table_reference()
            self._ctx.stop = self._input.LT(-1)
            self.state = 742
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,48,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SQLParser.Table_reference_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_table_reference_list)
                    self.state = 737
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 738
                    self.match(SQLParser.COMMA)
                    self.state = 739
                    self.table_reference() 
                self.state = 744
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Opt_derived_column_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def index_list(self):
            return self.getTypedRuleContext(SQLParser.Index_listContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_opt_derived_column_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_derived_column_list" ):
                listener.enterOpt_derived_column_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_derived_column_list" ):
                listener.exitOpt_derived_column_list(self)




    def opt_derived_column_list(self):

        localctx = SQLParser.Opt_derived_column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_opt_derived_column_list)
        try:
            self.state = 750
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 746
                self.match(SQLParser.LR_BRACKET)
                self.state = 747
                self.index_list(0)
                self.state = 748
                self.match(SQLParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Single_table_parensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_table_parens(self):
            return self.getTypedRuleContext(SQLParser.Single_table_parensContext,0)


        def single_table(self):
            return self.getTypedRuleContext(SQLParser.Single_tableContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_single_table_parens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_table_parens" ):
                listener.enterSingle_table_parens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_table_parens" ):
                listener.exitSingle_table_parens(self)




    def single_table_parens(self):

        localctx = SQLParser.Single_table_parensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_single_table_parens)
        try:
            self.state = 760
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 752
                self.match(SQLParser.LR_BRACKET)
                self.state = 753
                self.single_table_parens()
                self.state = 754
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 756
                self.match(SQLParser.LR_BRACKET)
                self.state = 757
                self.single_table()
                self.state = 758
                self.match(SQLParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Single_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tbl_name(self):
            return self.getTypedRuleContext(SQLParser.Tbl_nameContext,0)


        def opt_use_partition(self):
            return self.getTypedRuleContext(SQLParser.Opt_use_partitionContext,0)


        def opt_table_alias(self):
            return self.getTypedRuleContext(SQLParser.Opt_table_aliasContext,0)


        def opt_index_hints_list(self):
            return self.getTypedRuleContext(SQLParser.Opt_index_hints_listContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_single_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_table" ):
                listener.enterSingle_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_table" ):
                listener.exitSingle_table(self)




    def single_table(self):

        localctx = SQLParser.Single_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_single_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 762
            self.tbl_name()
            self.state = 763
            self.opt_use_partition()
            self.state = 764
            self.opt_table_alias()
            self.state = 765
            self.opt_index_hints_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_table_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(SQLParser.AS, 0)

        def ident(self):
            return self.getTypedRuleContext(SQLParser.IdentContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_opt_table_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_table_alias" ):
                listener.enterOpt_table_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_table_alias" ):
                listener.exitOpt_table_alias(self)




    def opt_table_alias(self):

        localctx = SQLParser.Opt_table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_opt_table_alias)
        try:
            self.state = 771
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 768
                self.match(SQLParser.AS)
                self.state = 769
                self.ident()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 770
                self.ident()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_asContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(SQLParser.AS, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_opt_as

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_as" ):
                listener.enterOpt_as(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_as" ):
                listener.exitOpt_as(self)




    def opt_as(self):

        localctx = SQLParser.Opt_asContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_opt_as)
        try:
            self.state = 775
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.SELECT, SQLParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 1)

                pass
            elif token in [SQLParser.AS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 774
                self.match(SQLParser.AS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_hints_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def index_hint(self):
            return self.getTypedRuleContext(SQLParser.Index_hintContext,0)


        def index_hints_list(self):
            return self.getTypedRuleContext(SQLParser.Index_hints_listContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_index_hints_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_hints_list" ):
                listener.enterIndex_hints_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_hints_list" ):
                listener.exitIndex_hints_list(self)



    def index_hints_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLParser.Index_hints_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 120
        self.enterRecursionRule(localctx, 120, self.RULE_index_hints_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self.index_hint()
            self._ctx.stop = self._input.LT(-1)
            self.state = 784
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SQLParser.Index_hints_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_index_hints_list)
                    self.state = 780
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 781
                    self.index_hint() 
                self.state = 786
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Opt_index_hints_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def index_hints_list(self):
            return self.getTypedRuleContext(SQLParser.Index_hints_listContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_opt_index_hints_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_index_hints_list" ):
                listener.enterOpt_index_hints_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_index_hints_list" ):
                listener.exitOpt_index_hints_list(self)




    def opt_index_hints_list(self):

        localctx = SQLParser.Opt_index_hints_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_opt_index_hints_list)
        try:
            self.state = 789
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 788
                self.index_hints_list(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_use_partitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def use_partition(self):
            return self.getTypedRuleContext(SQLParser.Use_partitionContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_opt_use_partition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_use_partition" ):
                listener.enterOpt_use_partition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_use_partition" ):
                listener.exitOpt_use_partition(self)




    def opt_use_partition(self):

        localctx = SQLParser.Opt_use_partitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_opt_use_partition)
        try:
            self.state = 793
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 792
                self.use_partition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Use_partitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(SQLParser.PARTITION, 0)

        def index_list(self):
            return self.getTypedRuleContext(SQLParser.Index_listContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_use_partition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUse_partition" ):
                listener.enterUse_partition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUse_partition" ):
                listener.exitUse_partition(self)




    def use_partition(self):

        localctx = SQLParser.Use_partitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_use_partition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self.match(SQLParser.PARTITION)
            self.state = 796
            self.match(SQLParser.LR_BRACKET)
            self.state = 797
            self.index_list(0)
            self.state = 798
            self.match(SQLParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Joined_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_reference(self):
            return self.getTypedRuleContext(SQLParser.Table_referenceContext,0)


        def opt_inner_cross(self):
            return self.getTypedRuleContext(SQLParser.Opt_inner_crossContext,0)


        def JOIN(self):
            return self.getToken(SQLParser.JOIN, 0)

        def table_factor(self):
            return self.getTypedRuleContext(SQLParser.Table_factorContext,0)


        def opt_join_condition(self):
            return self.getTypedRuleContext(SQLParser.Opt_join_conditionContext,0)


        def STRAIGHT_JOIN(self):
            return self.getToken(SQLParser.STRAIGHT_JOIN, 0)

        def ON(self):
            return self.getToken(SQLParser.ON, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def left_or_right(self):
            return self.getTypedRuleContext(SQLParser.Left_or_rightContext,0)


        def opt_outer(self):
            return self.getTypedRuleContext(SQLParser.Opt_outerContext,0)


        def join_condition(self):
            return self.getTypedRuleContext(SQLParser.Join_conditionContext,0)


        def NATURAL(self):
            return self.getToken(SQLParser.NATURAL, 0)

        def opt_left_or_right_outer(self):
            return self.getTypedRuleContext(SQLParser.Opt_left_or_right_outerContext,0)


        def joined_table(self):
            return self.getTypedRuleContext(SQLParser.Joined_tableContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_joined_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoined_table" ):
                listener.enterJoined_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoined_table" ):
                listener.exitJoined_table(self)



    def joined_table(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLParser.Joined_tableContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 128
        self.enterRecursionRule(localctx, 128, self.RULE_joined_table, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 830
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 801
                self.table_reference()
                self.state = 802
                self.opt_inner_cross()
                self.state = 803
                self.match(SQLParser.JOIN)
                self.state = 804
                self.table_factor()
                self.state = 805
                self.opt_join_condition()
                pass

            elif la_ == 2:
                self.state = 807
                self.table_reference()
                self.state = 808
                self.match(SQLParser.STRAIGHT_JOIN)
                self.state = 809
                self.table_factor()
                pass

            elif la_ == 3:
                self.state = 811
                self.table_reference()
                self.state = 812
                self.match(SQLParser.STRAIGHT_JOIN)
                self.state = 813
                self.table_factor()
                self.state = 814
                self.match(SQLParser.ON)
                self.state = 815
                self.expr(0)
                pass

            elif la_ == 4:
                self.state = 817
                self.table_reference()
                self.state = 818
                self.left_or_right()
                self.state = 819
                self.opt_outer()
                self.state = 820
                self.match(SQLParser.JOIN)
                self.state = 821
                self.table_factor()
                self.state = 822
                self.join_condition()
                pass

            elif la_ == 5:
                self.state = 824
                self.table_reference()
                self.state = 825
                self.match(SQLParser.NATURAL)
                self.state = 826
                self.opt_left_or_right_outer()
                self.state = 827
                self.match(SQLParser.JOIN)
                self.state = 828
                self.table_factor()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 862
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,58,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 860
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                    if la_ == 1:
                        localctx = SQLParser.Joined_tableContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_joined_table)
                        self.state = 832
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 833
                        self.opt_inner_cross()
                        self.state = 834
                        self.match(SQLParser.JOIN)
                        self.state = 835
                        self.table_factor()
                        self.state = 836
                        self.opt_join_condition()
                        pass

                    elif la_ == 2:
                        localctx = SQLParser.Joined_tableContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_joined_table)
                        self.state = 838
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 839
                        self.match(SQLParser.STRAIGHT_JOIN)
                        self.state = 840
                        self.table_factor()
                        pass

                    elif la_ == 3:
                        localctx = SQLParser.Joined_tableContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_joined_table)
                        self.state = 841
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 842
                        self.match(SQLParser.STRAIGHT_JOIN)
                        self.state = 843
                        self.table_factor()
                        self.state = 844
                        self.match(SQLParser.ON)
                        self.state = 845
                        self.expr(0)
                        pass

                    elif la_ == 4:
                        localctx = SQLParser.Joined_tableContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_joined_table)
                        self.state = 847
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 848
                        self.left_or_right()
                        self.state = 849
                        self.opt_outer()
                        self.state = 850
                        self.match(SQLParser.JOIN)
                        self.state = 851
                        self.table_factor()
                        self.state = 852
                        self.join_condition()
                        pass

                    elif la_ == 5:
                        localctx = SQLParser.Joined_tableContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_joined_table)
                        self.state = 854
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 855
                        self.match(SQLParser.NATURAL)
                        self.state = 856
                        self.opt_left_or_right_outer()
                        self.state = 857
                        self.match(SQLParser.JOIN)
                        self.state = 858
                        self.table_factor()
                        pass

             
                self.state = 864
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,58,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Tbl_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ident(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.IdentContext)
            else:
                return self.getTypedRuleContext(SQLParser.IdentContext,i)


        def getRuleIndex(self):
            return SQLParser.RULE_tbl_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTbl_name" ):
                listener.enterTbl_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTbl_name" ):
                listener.exitTbl_name(self)




    def tbl_name(self):

        localctx = SQLParser.Tbl_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_tbl_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 865
            self.ident()
            self.state = 870
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 866
                    self.match(SQLParser.DOT)
                    self.state = 867
                    self.ident() 
                self.state = 872
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_inner_crossContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INNER(self):
            return self.getToken(SQLParser.INNER, 0)

        def CROSS(self):
            return self.getToken(SQLParser.CROSS, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_opt_inner_cross

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_inner_cross" ):
                listener.enterOpt_inner_cross(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_inner_cross" ):
                listener.exitOpt_inner_cross(self)




    def opt_inner_cross(self):

        localctx = SQLParser.Opt_inner_crossContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_opt_inner_cross)
        try:
            self.state = 876
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.JOIN]:
                self.enterOuterAlt(localctx, 1)

                pass
            elif token in [SQLParser.INNER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 874
                self.match(SQLParser.INNER)
                pass
            elif token in [SQLParser.CROSS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 875
                self.match(SQLParser.CROSS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_outerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OUTER(self):
            return self.getToken(SQLParser.OUTER, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_opt_outer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_outer" ):
                listener.enterOpt_outer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_outer" ):
                listener.exitOpt_outer(self)




    def opt_outer(self):

        localctx = SQLParser.Opt_outerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_opt_outer)
        try:
            self.state = 880
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.JOIN]:
                self.enterOuterAlt(localctx, 1)

                pass
            elif token in [SQLParser.OUTER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 879
                self.match(SQLParser.OUTER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Left_or_rightContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT(self):
            return self.getToken(SQLParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(SQLParser.RIGHT, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_left_or_right

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLeft_or_right" ):
                listener.enterLeft_or_right(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLeft_or_right" ):
                listener.exitLeft_or_right(self)




    def left_or_right(self):

        localctx = SQLParser.Left_or_rightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_left_or_right)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 882
            _la = self._input.LA(1)
            if not(_la==SQLParser.LEFT or _la==SQLParser.RIGHT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_left_or_right_outerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT(self):
            return self.getToken(SQLParser.LEFT, 0)

        def opt_outer(self):
            return self.getTypedRuleContext(SQLParser.Opt_outerContext,0)


        def RIGHT(self):
            return self.getToken(SQLParser.RIGHT, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_opt_left_or_right_outer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_left_or_right_outer" ):
                listener.enterOpt_left_or_right_outer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_left_or_right_outer" ):
                listener.exitOpt_left_or_right_outer(self)




    def opt_left_or_right_outer(self):

        localctx = SQLParser.Opt_left_or_right_outerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_opt_left_or_right_outer)
        try:
            self.state = 889
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.LEFT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 884
                self.match(SQLParser.LEFT)
                self.state = 885
                self.opt_outer()
                pass
            elif token in [SQLParser.RIGHT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 886
                self.match(SQLParser.RIGHT)
                self.state = 887
                self.opt_outer()
                pass
            elif token in [SQLParser.JOIN]:
                self.enterOuterAlt(localctx, 3)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_join_conditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def join_condition(self):
            return self.getTypedRuleContext(SQLParser.Join_conditionContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_opt_join_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_join_condition" ):
                listener.enterOpt_join_condition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_join_condition" ):
                listener.exitOpt_join_condition(self)




    def opt_join_condition(self):

        localctx = SQLParser.Opt_join_conditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_opt_join_condition)
        try:
            self.state = 893
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 891
                self.join_condition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_conditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(SQLParser.ON, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def USING(self):
            return self.getToken(SQLParser.USING, 0)

        def column_list(self):
            return self.getTypedRuleContext(SQLParser.Column_listContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_join_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_condition" ):
                listener.enterJoin_condition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_condition" ):
                listener.exitJoin_condition(self)




    def join_condition(self):

        localctx = SQLParser.Join_conditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_join_condition)
        try:
            self.state = 902
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.ON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 895
                self.match(SQLParser.ON)
                self.state = 896
                self.expr(0)
                pass
            elif token in [SQLParser.USING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 897
                self.match(SQLParser.USING)
                self.state = 898
                self.match(SQLParser.LR_BRACKET)
                self.state = 899
                self.column_list(0)
                self.state = 900
                self.match(SQLParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_hintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE(self):
            return self.getToken(SQLParser.USE, 0)

        def key_or_index(self):
            return self.getTypedRuleContext(SQLParser.Key_or_indexContext,0)


        def opt_index_hint_clause(self):
            return self.getTypedRuleContext(SQLParser.Opt_index_hint_clauseContext,0)


        def index_list(self):
            return self.getTypedRuleContext(SQLParser.Index_listContext,0)


        def IGNORE(self):
            return self.getToken(SQLParser.IGNORE, 0)

        def FORCE(self):
            return self.getToken(SQLParser.FORCE, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_index_hint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_hint" ):
                listener.enterIndex_hint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_hint" ):
                listener.exitIndex_hint(self)




    def index_hint(self):

        localctx = SQLParser.Index_hintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_index_hint)
        try:
            self.state = 925
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.USE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 904
                self.match(SQLParser.USE)
                self.state = 905
                self.key_or_index()
                self.state = 906
                self.opt_index_hint_clause()
                self.state = 907
                self.match(SQLParser.LR_BRACKET)
                self.state = 908
                self.index_list(0)
                self.state = 909
                self.match(SQLParser.RR_BRACKET)
                pass
            elif token in [SQLParser.IGNORE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 911
                self.match(SQLParser.IGNORE)
                self.state = 912
                self.key_or_index()
                self.state = 913
                self.opt_index_hint_clause()
                self.state = 914
                self.match(SQLParser.LR_BRACKET)
                self.state = 915
                self.index_list(0)
                self.state = 916
                self.match(SQLParser.RR_BRACKET)
                pass
            elif token in [SQLParser.FORCE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 918
                self.match(SQLParser.FORCE)
                self.state = 919
                self.key_or_index()
                self.state = 920
                self.opt_index_hint_clause()
                self.state = 921
                self.match(SQLParser.LR_BRACKET)
                self.state = 922
                self.index_list(0)
                self.state = 923
                self.match(SQLParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Key_or_indexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KEY(self):
            return self.getToken(SQLParser.KEY, 0)

        def INDEX(self):
            return self.getToken(SQLParser.INDEX, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_key_or_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_or_index" ):
                listener.enterKey_or_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_or_index" ):
                listener.exitKey_or_index(self)




    def key_or_index(self):

        localctx = SQLParser.Key_or_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_key_or_index)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 927
            _la = self._input.LA(1)
            if not(_la==SQLParser.INDEX or _la==SQLParser.KEY):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_index_hint_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(SQLParser.FOR, 0)

        def JOIN(self):
            return self.getToken(SQLParser.JOIN, 0)

        def ORDER(self):
            return self.getToken(SQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(SQLParser.BY, 0)

        def GROUP(self):
            return self.getToken(SQLParser.GROUP, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_opt_index_hint_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_index_hint_clause" ):
                listener.enterOpt_index_hint_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_index_hint_clause" ):
                listener.exitOpt_index_hint_clause(self)




    def opt_index_hint_clause(self):

        localctx = SQLParser.Opt_index_hint_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_opt_index_hint_clause)
        try:
            self.state = 938
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 930
                self.match(SQLParser.FOR)
                self.state = 931
                self.match(SQLParser.JOIN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 932
                self.match(SQLParser.FOR)
                self.state = 933
                self.match(SQLParser.ORDER)
                self.state = 934
                self.match(SQLParser.BY)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 935
                self.match(SQLParser.FOR)
                self.state = 936
                self.match(SQLParser.GROUP)
                self.state = 937
                self.match(SQLParser.BY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ident(self):
            return self.getTypedRuleContext(SQLParser.IdentContext,0)


        def index_list(self):
            return self.getTypedRuleContext(SQLParser.Index_listContext,0)


        def COMMA(self):
            return self.getToken(SQLParser.COMMA, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_index_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_list" ):
                listener.enterIndex_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_list" ):
                listener.exitIndex_list(self)



    def index_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLParser.Index_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 150
        self.enterRecursionRule(localctx, 150, self.RULE_index_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 941
            self.ident()
            self._ctx.stop = self._input.LT(-1)
            self.state = 948
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,67,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SQLParser.Index_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_index_list)
                    self.state = 943
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 944
                    self.match(SQLParser.COMMA)
                    self.state = 945
                    self.ident() 
                self.state = 950
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,67,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Table_subqueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_stmt(self):
            return self.getTypedRuleContext(SQLParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_table_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_subquery" ):
                listener.enterTable_subquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_subquery" ):
                listener.exitTable_subquery(self)




    def table_subquery(self):

        localctx = SQLParser.Table_subqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_table_subquery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 951
            self.match(SQLParser.LR_BRACKET)
            self.state = 952
            self.select_stmt()
            self.state = 953
            self.match(SQLParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delete_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(SQLParser.DELETE, 0)

        def delete_opts(self):
            return self.getTypedRuleContext(SQLParser.Delete_optsContext,0)


        def FROM(self):
            return self.getToken(SQLParser.FROM, 0)

        def ident(self):
            return self.getTypedRuleContext(SQLParser.IdentContext,0)


        def opt_where_clause(self):
            return self.getTypedRuleContext(SQLParser.Opt_where_clauseContext,0)


        def opt_order_clause(self):
            return self.getTypedRuleContext(SQLParser.Opt_order_clauseContext,0)


        def opt_limit_clause(self):
            return self.getTypedRuleContext(SQLParser.Opt_limit_clauseContext,0)


        def delete_list(self):
            return self.getTypedRuleContext(SQLParser.Delete_listContext,0)


        def table_reference_list(self):
            return self.getTypedRuleContext(SQLParser.Table_reference_listContext,0)


        def USING(self):
            return self.getToken(SQLParser.USING, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_delete_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_stmt" ):
                listener.enterDelete_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_stmt" ):
                listener.exitDelete_stmt(self)




    def delete_stmt(self):

        localctx = SQLParser.Delete_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_delete_stmt)
        try:
            self.state = 978
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 955
                self.match(SQLParser.DELETE)
                self.state = 956
                self.delete_opts(0)
                self.state = 957
                self.match(SQLParser.FROM)
                self.state = 958
                self.ident()
                self.state = 959
                self.opt_where_clause()
                self.state = 960
                self.opt_order_clause()
                self.state = 961
                self.opt_limit_clause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 963
                self.match(SQLParser.DELETE)
                self.state = 964
                self.delete_opts(0)
                self.state = 965
                self.delete_list(0)
                self.state = 966
                self.match(SQLParser.FROM)
                self.state = 967
                self.table_reference_list(0)
                self.state = 968
                self.opt_where_clause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 970
                self.match(SQLParser.DELETE)
                self.state = 971
                self.delete_opts(0)
                self.state = 972
                self.match(SQLParser.FROM)
                self.state = 973
                self.delete_list(0)
                self.state = 974
                self.match(SQLParser.USING)
                self.state = 975
                self.table_reference_list(0)
                self.state = 976
                self.opt_where_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delete_optsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def delete_opts(self):
            return self.getTypedRuleContext(SQLParser.Delete_optsContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(SQLParser.LOW_PRIORITY, 0)

        def QUICK(self):
            return self.getToken(SQLParser.QUICK, 0)

        def IGNORE(self):
            return self.getToken(SQLParser.IGNORE, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_delete_opts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_opts" ):
                listener.enterDelete_opts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_opts" ):
                listener.exitDelete_opts(self)



    def delete_opts(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLParser.Delete_optsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 156
        self.enterRecursionRule(localctx, 156, self.RULE_delete_opts, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self._ctx.stop = self._input.LT(-1)
            self.state = 989
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,70,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 987
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                    if la_ == 1:
                        localctx = SQLParser.Delete_optsContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_delete_opts)
                        self.state = 981
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 982
                        self.match(SQLParser.LOW_PRIORITY)
                        pass

                    elif la_ == 2:
                        localctx = SQLParser.Delete_optsContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_delete_opts)
                        self.state = 983
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 984
                        self.match(SQLParser.QUICK)
                        pass

                    elif la_ == 3:
                        localctx = SQLParser.Delete_optsContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_delete_opts)
                        self.state = 985
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 986
                        self.match(SQLParser.IGNORE)
                        pass

             
                self.state = 991
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,70,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Delete_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ident(self):
            return self.getTypedRuleContext(SQLParser.IdentContext,0)


        def opt_dot_star(self):
            return self.getTypedRuleContext(SQLParser.Opt_dot_starContext,0)


        def delete_list(self):
            return self.getTypedRuleContext(SQLParser.Delete_listContext,0)


        def COMMA(self):
            return self.getToken(SQLParser.COMMA, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_delete_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_list" ):
                listener.enterDelete_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_list" ):
                listener.exitDelete_list(self)



    def delete_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLParser.Delete_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 158
        self.enterRecursionRule(localctx, 158, self.RULE_delete_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 993
            self.ident()
            self.state = 994
            self.opt_dot_star()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1003
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SQLParser.Delete_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_delete_list)
                    self.state = 996
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 997
                    self.match(SQLParser.COMMA)
                    self.state = 998
                    self.ident()
                    self.state = 999
                    self.opt_dot_star() 
                self.state = 1005
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Opt_dot_starContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(SQLParser.STAR, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_opt_dot_star

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_dot_star" ):
                listener.enterOpt_dot_star(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_dot_star" ):
                listener.exitOpt_dot_star(self)




    def opt_dot_star(self):

        localctx = SQLParser.Opt_dot_starContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_opt_dot_star)
        try:
            self.state = 1009
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1007
                self.match(SQLParser.DOT)
                self.state = 1008
                self.match(SQLParser.STAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SQLParser.DROP, 0)

        def opt_if_not_exists(self):
            return self.getTypedRuleContext(SQLParser.Opt_if_not_existsContext,0)


        def ident(self):
            return self.getTypedRuleContext(SQLParser.IdentContext,0)


        def DATABASE(self):
            return self.getToken(SQLParser.DATABASE, 0)

        def TABLE(self):
            return self.getToken(SQLParser.TABLE, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_drop_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_stmt" ):
                listener.enterDrop_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_stmt" ):
                listener.exitDrop_stmt(self)




    def drop_stmt(self):

        localctx = SQLParser.Drop_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_drop_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1011
            self.match(SQLParser.DROP)
            self.state = 1012
            _la = self._input.LA(1)
            if not(_la==SQLParser.DATABASE or _la==SQLParser.TABLE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1013
            self.opt_if_not_exists()
            self.state = 1014
            self.ident()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Insert_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(SQLParser.INSERT, 0)

        def insert_opts(self):
            return self.getTypedRuleContext(SQLParser.Insert_optsContext,0)


        def opt_into(self):
            return self.getTypedRuleContext(SQLParser.Opt_intoContext,0)


        def ident(self):
            return self.getTypedRuleContext(SQLParser.IdentContext,0)


        def opt_col_names(self):
            return self.getTypedRuleContext(SQLParser.Opt_col_namesContext,0)


        def VALUES(self):
            return self.getToken(SQLParser.VALUES, 0)

        def insert_vals_list(self):
            return self.getTypedRuleContext(SQLParser.Insert_vals_listContext,0)


        def opt_ondupupdate(self):
            return self.getTypedRuleContext(SQLParser.Opt_ondupupdateContext,0)


        def SET(self):
            return self.getToken(SQLParser.SET, 0)

        def insert_asgn_list(self):
            return self.getTypedRuleContext(SQLParser.Insert_asgn_listContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_insert_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_stmt" ):
                listener.enterInsert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_stmt" ):
                listener.exitInsert_stmt(self)




    def insert_stmt(self):

        localctx = SQLParser.Insert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_insert_stmt)
        try:
            self.state = 1041
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1016
                self.match(SQLParser.INSERT)
                self.state = 1017
                self.insert_opts(0)
                self.state = 1018
                self.opt_into()
                self.state = 1019
                self.ident()
                self.state = 1020
                self.opt_col_names()
                self.state = 1021
                self.match(SQLParser.VALUES)
                self.state = 1022
                self.insert_vals_list(0)
                self.state = 1023
                self.opt_ondupupdate()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1025
                self.match(SQLParser.INSERT)
                self.state = 1026
                self.insert_opts(0)
                self.state = 1027
                self.opt_into()
                self.state = 1028
                self.ident()
                self.state = 1029
                self.match(SQLParser.SET)
                self.state = 1030
                self.insert_asgn_list(0)
                self.state = 1031
                self.opt_ondupupdate()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1033
                self.match(SQLParser.INSERT)
                self.state = 1034
                self.insert_opts(0)
                self.state = 1035
                self.opt_into()
                self.state = 1036
                self.ident()
                self.state = 1037
                self.opt_col_names()
                self.state = 1038
                self.select_stmt()
                self.state = 1039
                self.opt_ondupupdate()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_ondupupdateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ONDUPLICATE(self):
            return self.getToken(SQLParser.ONDUPLICATE, 0)

        def KEY(self):
            return self.getToken(SQLParser.KEY, 0)

        def UPDATE(self):
            return self.getToken(SQLParser.UPDATE, 0)

        def insert_asgn_list(self):
            return self.getTypedRuleContext(SQLParser.Insert_asgn_listContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_opt_ondupupdate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_ondupupdate" ):
                listener.enterOpt_ondupupdate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_ondupupdate" ):
                listener.exitOpt_ondupupdate(self)




    def opt_ondupupdate(self):

        localctx = SQLParser.Opt_ondupupdateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_opt_ondupupdate)
        try:
            self.state = 1048
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1044
                self.match(SQLParser.ONDUPLICATE)
                self.state = 1045
                self.match(SQLParser.KEY)
                self.state = 1046
                self.match(SQLParser.UPDATE)
                self.state = 1047
                self.insert_asgn_list(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Insert_optsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insert_opts(self):
            return self.getTypedRuleContext(SQLParser.Insert_optsContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(SQLParser.LOW_PRIORITY, 0)

        def DELAYED(self):
            return self.getToken(SQLParser.DELAYED, 0)

        def HIGH_PRIORITY(self):
            return self.getToken(SQLParser.HIGH_PRIORITY, 0)

        def IGNORE(self):
            return self.getToken(SQLParser.IGNORE, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_insert_opts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_opts" ):
                listener.enterInsert_opts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_opts" ):
                listener.exitInsert_opts(self)



    def insert_opts(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLParser.Insert_optsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 168
        self.enterRecursionRule(localctx, 168, self.RULE_insert_opts, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1061
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1059
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                    if la_ == 1:
                        localctx = SQLParser.Insert_optsContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_insert_opts)
                        self.state = 1051
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1052
                        self.match(SQLParser.LOW_PRIORITY)
                        pass

                    elif la_ == 2:
                        localctx = SQLParser.Insert_optsContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_insert_opts)
                        self.state = 1053
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1054
                        self.match(SQLParser.DELAYED)
                        pass

                    elif la_ == 3:
                        localctx = SQLParser.Insert_optsContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_insert_opts)
                        self.state = 1055
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1056
                        self.match(SQLParser.HIGH_PRIORITY)
                        pass

                    elif la_ == 4:
                        localctx = SQLParser.Insert_optsContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_insert_opts)
                        self.state = 1057
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1058
                        self.match(SQLParser.IGNORE)
                        pass

             
                self.state = 1063
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Opt_intoContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(SQLParser.INTO, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_opt_into

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_into" ):
                listener.enterOpt_into(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_into" ):
                listener.exitOpt_into(self)




    def opt_into(self):

        localctx = SQLParser.Opt_intoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_opt_into)
        try:
            self.state = 1066
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.INTO]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1064
                self.match(SQLParser.INTO)
                pass
            elif token in [SQLParser.ANY, SQLParser.AUTO_INCREMENT, SQLParser.BIT, SQLParser.BOOLEAN, SQLParser.COMMENT, SQLParser.COUNT, SQLParser.DATE, SQLParser.DATETIME, SQLParser.DAY, SQLParser.DUMPFILE, SQLParser.END, SQLParser.ENUM, SQLParser.ESCAPE, SQLParser.FIELDS, SQLParser.HOUR, SQLParser.MICROSECOND, SQLParser.MINUTE, SQLParser.MODE, SQLParser.MONTH, SQLParser.NCHAR, SQLParser.OFFSET, SQLParser.ONDUPLICATE, SQLParser.PARTITION, SQLParser.POSITION, SQLParser.QUARTER, SQLParser.QUICK, SQLParser.SECOND, SQLParser.SHARE, SQLParser.SIGNED, SQLParser.SOME, SQLParser.SOUNDS, SQLParser.TEMPORARY, SQLParser.TEXT, SQLParser.TIME, SQLParser.TIMESTAMP, SQLParser.UNICODE, SQLParser.UNSIGNED, SQLParser.WEEK, SQLParser.YEAR, SQLParser.SUBSTRING, SQLParser.TRIM, SQLParser.BQUOTA_STRING, SQLParser.IDENT]:
                self.enterOuterAlt(localctx, 2)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_col_namesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_list(self):
            return self.getTypedRuleContext(SQLParser.Column_listContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_opt_col_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_col_names" ):
                listener.enterOpt_col_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_col_names" ):
                listener.exitOpt_col_names(self)




    def opt_col_names(self):

        localctx = SQLParser.Opt_col_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_opt_col_names)
        try:
            self.state = 1073
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1069
                self.match(SQLParser.LR_BRACKET)
                self.state = 1070
                self.column_list(0)
                self.state = 1071
                self.match(SQLParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Insert_vals_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insert_vals(self):
            return self.getTypedRuleContext(SQLParser.Insert_valsContext,0)


        def insert_vals_list(self):
            return self.getTypedRuleContext(SQLParser.Insert_vals_listContext,0)


        def COMMA(self):
            return self.getToken(SQLParser.COMMA, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_insert_vals_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_vals_list" ):
                listener.enterInsert_vals_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_vals_list" ):
                listener.exitInsert_vals_list(self)



    def insert_vals_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLParser.Insert_vals_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 174
        self.enterRecursionRule(localctx, 174, self.RULE_insert_vals_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1076
            self.match(SQLParser.LR_BRACKET)
            self.state = 1077
            self.insert_vals(0)
            self.state = 1078
            self.match(SQLParser.RR_BRACKET)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1088
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SQLParser.Insert_vals_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_insert_vals_list)
                    self.state = 1080
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1081
                    self.match(SQLParser.COMMA)
                    self.state = 1082
                    self.match(SQLParser.LR_BRACKET)
                    self.state = 1083
                    self.insert_vals(0)
                    self.state = 1084
                    self.match(SQLParser.RR_BRACKET) 
                self.state = 1090
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Insert_valsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def DEFAULT(self):
            return self.getToken(SQLParser.DEFAULT, 0)

        def insert_vals(self):
            return self.getTypedRuleContext(SQLParser.Insert_valsContext,0)


        def COMMA(self):
            return self.getToken(SQLParser.COMMA, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_insert_vals

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_vals" ):
                listener.enterInsert_vals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_vals" ):
                listener.exitInsert_vals(self)



    def insert_vals(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLParser.Insert_valsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 176
        self.enterRecursionRule(localctx, 176, self.RULE_insert_vals, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1094
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.ANY, SQLParser.AUTO_INCREMENT, SQLParser.BINARY, SQLParser.BIT, SQLParser.BOOLEAN, SQLParser.CASE, SQLParser.CHAR, SQLParser.COMMENT, SQLParser.CONVERT, SQLParser.COUNT, SQLParser.DATABASE, SQLParser.DATE, SQLParser.DATETIME, SQLParser.DAY, SQLParser.DUMPFILE, SQLParser.END, SQLParser.ENUM, SQLParser.ESCAPE, SQLParser.EXISTS, SQLParser.FIELDS, SQLParser.HOUR, SQLParser.IF, SQLParser.INTERVAL, SQLParser.LIKE, SQLParser.MICROSECOND, SQLParser.MINUTE, SQLParser.MODE, SQLParser.MONTH, SQLParser.NCHAR, SQLParser.NOT, SQLParser.NULLX, SQLParser.OFFSET, SQLParser.ONDUPLICATE, SQLParser.PARTITION, SQLParser.POSITION, SQLParser.QUARTER, SQLParser.QUICK, SQLParser.ROW, SQLParser.SECOND, SQLParser.SHARE, SQLParser.SIGNED, SQLParser.SOME, SQLParser.SOUNDS, SQLParser.TEMPORARY, SQLParser.TEXT, SQLParser.TIME, SQLParser.TIMESTAMP, SQLParser.UNICODE, SQLParser.UNSIGNED, SQLParser.WEEK, SQLParser.YEAR, SQLParser.ASCII, SQLParser.SUBSTRING, SQLParser.TRIM, SQLParser.CAST, SQLParser.EXTRACT, SQLParser.WEIGHT_STRING, SQLParser.BOOL, SQLParser.NUM, SQLParser.LR_BRACKET, SQLParser.STAR, SQLParser.PLUS, SQLParser.MINUS, SQLParser.BIT_NOT, SQLParser.EXCLAMATION, SQLParser.UNDERLINE, SQLParser.QUOTA_STRING, SQLParser.DOUBLE_QUOTA_STRING, SQLParser.BQUOTA_STRING, SQLParser.HEX_STRING, SQLParser.BIT_STRING, SQLParser.START_NATIONAL_STRING_LITERAL, SQLParser.IDENT, SQLParser.USERVAR, SQLParser.SYSVAR]:
                self.state = 1092
                self.expr(0)
                pass
            elif token in [SQLParser.DEFAULT]:
                self.state = 1093
                self.match(SQLParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1104
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1102
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                    if la_ == 1:
                        localctx = SQLParser.Insert_valsContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_insert_vals)
                        self.state = 1096
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1097
                        self.match(SQLParser.COMMA)
                        self.state = 1098
                        self.expr(0)
                        pass

                    elif la_ == 2:
                        localctx = SQLParser.Insert_valsContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_insert_vals)
                        self.state = 1099
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1100
                        self.match(SQLParser.COMMA)
                        self.state = 1101
                        self.match(SQLParser.DEFAULT)
                        pass

             
                self.state = 1106
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Insert_asgn_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ident(self):
            return self.getTypedRuleContext(SQLParser.IdentContext,0)


        def COMPARISON(self):
            return self.getToken(SQLParser.COMPARISON, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def DEFAULT(self):
            return self.getToken(SQLParser.DEFAULT, 0)

        def insert_asgn_list(self):
            return self.getTypedRuleContext(SQLParser.Insert_asgn_listContext,0)


        def COMMA(self):
            return self.getToken(SQLParser.COMMA, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_insert_asgn_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_asgn_list" ):
                listener.enterInsert_asgn_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_asgn_list" ):
                listener.exitInsert_asgn_list(self)



    def insert_asgn_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLParser.Insert_asgn_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 178
        self.enterRecursionRule(localctx, 178, self.RULE_insert_asgn_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1116
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.state = 1108
                self.ident()
                self.state = 1109
                self.match(SQLParser.COMPARISON)
                self.state = 1110
                self.expr(0)
                pass

            elif la_ == 2:
                self.state = 1112
                self.ident()
                self.state = 1113
                self.match(SQLParser.COMPARISON)
                self.state = 1114
                self.match(SQLParser.DEFAULT)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1132
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,85,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1130
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
                    if la_ == 1:
                        localctx = SQLParser.Insert_asgn_listContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_insert_asgn_list)
                        self.state = 1118
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1119
                        self.match(SQLParser.COMMA)
                        self.state = 1120
                        self.ident()
                        self.state = 1121
                        self.match(SQLParser.COMPARISON)
                        self.state = 1122
                        self.expr(0)
                        pass

                    elif la_ == 2:
                        localctx = SQLParser.Insert_asgn_listContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_insert_asgn_list)
                        self.state = 1124
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1125
                        self.match(SQLParser.COMMA)
                        self.state = 1126
                        self.ident()
                        self.state = 1127
                        self.match(SQLParser.COMPARISON)
                        self.state = 1128
                        self.match(SQLParser.DEFAULT)
                        pass

             
                self.state = 1134
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Replace_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPLACE(self):
            return self.getToken(SQLParser.REPLACE, 0)

        def insert_opts(self):
            return self.getTypedRuleContext(SQLParser.Insert_optsContext,0)


        def opt_into(self):
            return self.getTypedRuleContext(SQLParser.Opt_intoContext,0)


        def ident(self):
            return self.getTypedRuleContext(SQLParser.IdentContext,0)


        def opt_col_names(self):
            return self.getTypedRuleContext(SQLParser.Opt_col_namesContext,0)


        def VALUES(self):
            return self.getToken(SQLParser.VALUES, 0)

        def insert_vals_list(self):
            return self.getTypedRuleContext(SQLParser.Insert_vals_listContext,0)


        def opt_ondupupdate(self):
            return self.getTypedRuleContext(SQLParser.Opt_ondupupdateContext,0)


        def SET(self):
            return self.getToken(SQLParser.SET, 0)

        def insert_asgn_list(self):
            return self.getTypedRuleContext(SQLParser.Insert_asgn_listContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_replace_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplace_stmt" ):
                listener.enterReplace_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplace_stmt" ):
                listener.exitReplace_stmt(self)




    def replace_stmt(self):

        localctx = SQLParser.Replace_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_replace_stmt)
        try:
            self.state = 1160
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1135
                self.match(SQLParser.REPLACE)
                self.state = 1136
                self.insert_opts(0)
                self.state = 1137
                self.opt_into()
                self.state = 1138
                self.ident()
                self.state = 1139
                self.opt_col_names()
                self.state = 1140
                self.match(SQLParser.VALUES)
                self.state = 1141
                self.insert_vals_list(0)
                self.state = 1142
                self.opt_ondupupdate()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1144
                self.match(SQLParser.REPLACE)
                self.state = 1145
                self.insert_opts(0)
                self.state = 1146
                self.opt_into()
                self.state = 1147
                self.ident()
                self.state = 1148
                self.match(SQLParser.SET)
                self.state = 1149
                self.insert_asgn_list(0)
                self.state = 1150
                self.opt_ondupupdate()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1152
                self.match(SQLParser.REPLACE)
                self.state = 1153
                self.insert_opts(0)
                self.state = 1154
                self.opt_into()
                self.state = 1155
                self.ident()
                self.state = 1156
                self.opt_col_names()
                self.state = 1157
                self.select_stmt()
                self.state = 1158
                self.opt_ondupupdate()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Update_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(SQLParser.UPDATE, 0)

        def update_opts(self):
            return self.getTypedRuleContext(SQLParser.Update_optsContext,0)


        def table_reference_list(self):
            return self.getTypedRuleContext(SQLParser.Table_reference_listContext,0)


        def SET(self):
            return self.getToken(SQLParser.SET, 0)

        def update_asgn_list(self):
            return self.getTypedRuleContext(SQLParser.Update_asgn_listContext,0)


        def opt_where_clause(self):
            return self.getTypedRuleContext(SQLParser.Opt_where_clauseContext,0)


        def opt_order_clause(self):
            return self.getTypedRuleContext(SQLParser.Opt_order_clauseContext,0)


        def opt_limit_clause(self):
            return self.getTypedRuleContext(SQLParser.Opt_limit_clauseContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_update_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_stmt" ):
                listener.enterUpdate_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_stmt" ):
                listener.exitUpdate_stmt(self)




    def update_stmt(self):

        localctx = SQLParser.Update_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_update_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1162
            self.match(SQLParser.UPDATE)
            self.state = 1163
            self.update_opts()
            self.state = 1164
            self.table_reference_list(0)
            self.state = 1165
            self.match(SQLParser.SET)
            self.state = 1166
            self.update_asgn_list(0)
            self.state = 1167
            self.opt_where_clause()
            self.state = 1168
            self.opt_order_clause()
            self.state = 1169
            self.opt_limit_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Update_optsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insert_opts(self):
            return self.getTypedRuleContext(SQLParser.Insert_optsContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(SQLParser.LOW_PRIORITY, 0)

        def IGNORE(self):
            return self.getToken(SQLParser.IGNORE, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_update_opts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_opts" ):
                listener.enterUpdate_opts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_opts" ):
                listener.exitUpdate_opts(self)




    def update_opts(self):

        localctx = SQLParser.Update_optsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_update_opts)
        try:
            self.state = 1178
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1172
                self.insert_opts(0)
                self.state = 1173
                self.match(SQLParser.LOW_PRIORITY)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1175
                self.insert_opts(0)
                self.state = 1176
                self.match(SQLParser.IGNORE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Update_asgn_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ident(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.IdentContext)
            else:
                return self.getTypedRuleContext(SQLParser.IdentContext,i)


        def COMPARISON(self):
            return self.getToken(SQLParser.COMPARISON, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def update_asgn_list(self):
            return self.getTypedRuleContext(SQLParser.Update_asgn_listContext,0)


        def COMMA(self):
            return self.getToken(SQLParser.COMMA, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_update_asgn_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_asgn_list" ):
                listener.enterUpdate_asgn_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_asgn_list" ):
                listener.exitUpdate_asgn_list(self)



    def update_asgn_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLParser.Update_asgn_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 186
        self.enterRecursionRule(localctx, 186, self.RULE_update_asgn_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1191
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 1181
                self.ident()
                self.state = 1182
                self.match(SQLParser.COMPARISON)
                self.state = 1183
                self.expr(0)
                pass

            elif la_ == 2:
                self.state = 1185
                self.ident()
                self.state = 1186
                self.match(SQLParser.DOT)
                self.state = 1187
                self.ident()
                self.state = 1188
                self.match(SQLParser.COMPARISON)
                self.state = 1189
                self.expr(0)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1209
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,90,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1207
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
                    if la_ == 1:
                        localctx = SQLParser.Update_asgn_listContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_update_asgn_list)
                        self.state = 1193
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1194
                        self.match(SQLParser.COMMA)
                        self.state = 1195
                        self.ident()
                        self.state = 1196
                        self.match(SQLParser.COMPARISON)
                        self.state = 1197
                        self.expr(0)
                        pass

                    elif la_ == 2:
                        localctx = SQLParser.Update_asgn_listContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_update_asgn_list)
                        self.state = 1199
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1200
                        self.match(SQLParser.COMMA)
                        self.state = 1201
                        self.ident()
                        self.state = 1202
                        self.match(SQLParser.DOT)
                        self.state = 1203
                        self.ident()
                        self.state = 1204
                        self.match(SQLParser.COMPARISON)
                        self.state = 1205
                        self.expr(0)
                        pass

             
                self.state = 1211
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Create_database_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SQLParser.CREATE, 0)

        def DATABASE(self):
            return self.getToken(SQLParser.DATABASE, 0)

        def opt_if_not_exists(self):
            return self.getTypedRuleContext(SQLParser.Opt_if_not_existsContext,0)


        def ident(self):
            return self.getTypedRuleContext(SQLParser.IdentContext,0)


        def SCHEMA(self):
            return self.getToken(SQLParser.SCHEMA, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_create_database_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_database_stmt" ):
                listener.enterCreate_database_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_database_stmt" ):
                listener.exitCreate_database_stmt(self)




    def create_database_stmt(self):

        localctx = SQLParser.Create_database_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_create_database_stmt)
        try:
            self.state = 1222
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1212
                self.match(SQLParser.CREATE)
                self.state = 1213
                self.match(SQLParser.DATABASE)
                self.state = 1214
                self.opt_if_not_exists()
                self.state = 1215
                self.ident()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1217
                self.match(SQLParser.CREATE)
                self.state = 1218
                self.match(SQLParser.SCHEMA)
                self.state = 1219
                self.opt_if_not_exists()
                self.state = 1220
                self.ident()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_if_not_existsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(SQLParser.IF, 0)

        def EXISTS(self):
            return self.getToken(SQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_opt_if_not_exists

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_if_not_exists" ):
                listener.enterOpt_if_not_exists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_if_not_exists" ):
                listener.exitOpt_if_not_exists(self)




    def opt_if_not_exists(self):

        localctx = SQLParser.Opt_if_not_existsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_opt_if_not_exists)
        try:
            self.state = 1227
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.ANY, SQLParser.AUTO_INCREMENT, SQLParser.BIT, SQLParser.BOOLEAN, SQLParser.COMMENT, SQLParser.COUNT, SQLParser.DATE, SQLParser.DATETIME, SQLParser.DAY, SQLParser.DUMPFILE, SQLParser.END, SQLParser.ENUM, SQLParser.ESCAPE, SQLParser.FIELDS, SQLParser.HOUR, SQLParser.MICROSECOND, SQLParser.MINUTE, SQLParser.MODE, SQLParser.MONTH, SQLParser.NCHAR, SQLParser.OFFSET, SQLParser.ONDUPLICATE, SQLParser.PARTITION, SQLParser.POSITION, SQLParser.QUARTER, SQLParser.QUICK, SQLParser.SECOND, SQLParser.SHARE, SQLParser.SIGNED, SQLParser.SOME, SQLParser.SOUNDS, SQLParser.TEMPORARY, SQLParser.TEXT, SQLParser.TIME, SQLParser.TIMESTAMP, SQLParser.UNICODE, SQLParser.UNSIGNED, SQLParser.WEEK, SQLParser.YEAR, SQLParser.SUBSTRING, SQLParser.TRIM, SQLParser.BQUOTA_STRING, SQLParser.IDENT]:
                self.enterOuterAlt(localctx, 1)

                pass
            elif token in [SQLParser.IF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1225
                self.match(SQLParser.IF)
                self.state = 1226
                self.match(SQLParser.EXISTS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_table_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SQLParser.CREATE, 0)

        def opt_temporary(self):
            return self.getTypedRuleContext(SQLParser.Opt_temporaryContext,0)


        def TABLE(self):
            return self.getToken(SQLParser.TABLE, 0)

        def opt_if_not_exists(self):
            return self.getTypedRuleContext(SQLParser.Opt_if_not_existsContext,0)


        def ident(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.IdentContext)
            else:
                return self.getTypedRuleContext(SQLParser.IdentContext,i)


        def create_col_list(self):
            return self.getTypedRuleContext(SQLParser.Create_col_listContext,0)


        def create_select_statement(self):
            return self.getTypedRuleContext(SQLParser.Create_select_statementContext,0)


        def LIKE(self):
            return self.getToken(SQLParser.LIKE, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLParser.Select_stmtContext,0)


        def DEFINITION(self):
            return self.getToken(SQLParser.DEFINITION, 0)

        def ONLY(self):
            return self.getToken(SQLParser.ONLY, 0)

        def AS(self):
            return self.getToken(SQLParser.AS, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_create_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table_stmt" ):
                listener.enterCreate_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table_stmt" ):
                listener.exitCreate_table_stmt(self)




    def create_table_stmt(self):

        localctx = SQLParser.Create_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_create_table_stmt)
        self._la = 0 # Token type
        try:
            self.state = 1327
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1229
                self.match(SQLParser.CREATE)
                self.state = 1230
                self.opt_temporary()
                self.state = 1231
                self.match(SQLParser.TABLE)
                self.state = 1232
                self.opt_if_not_exists()
                self.state = 1233
                self.ident()
                self.state = 1234
                self.match(SQLParser.LR_BRACKET)
                self.state = 1235
                self.create_col_list(0)
                self.state = 1236
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1238
                self.match(SQLParser.CREATE)
                self.state = 1239
                self.opt_temporary()
                self.state = 1240
                self.match(SQLParser.TABLE)
                self.state = 1241
                self.opt_if_not_exists()
                self.state = 1242
                self.ident()
                self.state = 1243
                self.match(SQLParser.DOT)
                self.state = 1244
                self.ident()
                self.state = 1245
                self.match(SQLParser.LR_BRACKET)
                self.state = 1246
                self.create_col_list(0)
                self.state = 1247
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1249
                self.match(SQLParser.CREATE)
                self.state = 1250
                self.opt_temporary()
                self.state = 1251
                self.match(SQLParser.TABLE)
                self.state = 1252
                self.opt_if_not_exists()
                self.state = 1253
                self.ident()
                self.state = 1254
                self.match(SQLParser.LR_BRACKET)
                self.state = 1255
                self.create_col_list(0)
                self.state = 1256
                self.match(SQLParser.RR_BRACKET)
                self.state = 1257
                self.create_select_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1259
                self.match(SQLParser.CREATE)
                self.state = 1260
                self.opt_temporary()
                self.state = 1261
                self.match(SQLParser.TABLE)
                self.state = 1262
                self.opt_if_not_exists()
                self.state = 1263
                self.ident()
                self.state = 1264
                self.create_select_statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1266
                self.match(SQLParser.CREATE)
                self.state = 1267
                self.opt_temporary()
                self.state = 1268
                self.match(SQLParser.TABLE)
                self.state = 1269
                self.opt_if_not_exists()
                self.state = 1270
                self.ident()
                self.state = 1271
                self.match(SQLParser.DOT)
                self.state = 1272
                self.ident()
                self.state = 1273
                self.match(SQLParser.LR_BRACKET)
                self.state = 1274
                self.create_col_list(0)
                self.state = 1275
                self.match(SQLParser.RR_BRACKET)
                self.state = 1276
                self.create_select_statement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1278
                self.match(SQLParser.CREATE)
                self.state = 1279
                self.opt_temporary()
                self.state = 1280
                self.match(SQLParser.TABLE)
                self.state = 1281
                self.opt_if_not_exists()
                self.state = 1282
                self.ident()
                self.state = 1283
                self.match(SQLParser.DOT)
                self.state = 1284
                self.ident()
                self.state = 1285
                self.create_select_statement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1287
                self.match(SQLParser.CREATE)
                self.state = 1288
                self.opt_temporary()
                self.state = 1289
                self.match(SQLParser.TABLE)
                self.state = 1290
                self.opt_if_not_exists()
                self.state = 1291
                self.ident()
                self.state = 1296
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLParser.DOT:
                    self.state = 1292
                    self.match(SQLParser.DOT)
                    self.state = 1293
                    self.ident()
                    self.state = 1298
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1299
                self.match(SQLParser.LIKE)
                self.state = 1300
                self.ident()
                self.state = 1305
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLParser.DOT:
                    self.state = 1301
                    self.match(SQLParser.DOT)
                    self.state = 1302
                    self.ident()
                    self.state = 1307
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1308
                self.match(SQLParser.CREATE)
                self.state = 1309
                self.opt_temporary()
                self.state = 1310
                self.match(SQLParser.TABLE)
                self.state = 1311
                self.opt_if_not_exists()
                self.state = 1312
                self.ident()
                self.state = 1317
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLParser.DOT:
                    self.state = 1313
                    self.match(SQLParser.DOT)
                    self.state = 1314
                    self.ident()
                    self.state = 1319
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1321
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLParser.AS:
                    self.state = 1320
                    self.match(SQLParser.AS)


                self.state = 1323
                self.select_stmt()
                self.state = 1324
                self.match(SQLParser.DEFINITION)
                self.state = 1325
                self.match(SQLParser.ONLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_col_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def create_definition(self):
            return self.getTypedRuleContext(SQLParser.Create_definitionContext,0)


        def create_col_list(self):
            return self.getTypedRuleContext(SQLParser.Create_col_listContext,0)


        def COMMA(self):
            return self.getToken(SQLParser.COMMA, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_create_col_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_col_list" ):
                listener.enterCreate_col_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_col_list" ):
                listener.exitCreate_col_list(self)



    def create_col_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLParser.Create_col_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 194
        self.enterRecursionRule(localctx, 194, self.RULE_create_col_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1330
            self.create_definition()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1337
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SQLParser.Create_col_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_create_col_list)
                    self.state = 1332
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1333
                    self.match(SQLParser.COMMA)
                    self.state = 1334
                    self.create_definition() 
                self.state = 1339
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Create_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ident(self):
            return self.getTypedRuleContext(SQLParser.IdentContext,0)


        def data_type(self):
            return self.getTypedRuleContext(SQLParser.Data_typeContext,0)


        def column_atts(self):
            return self.getTypedRuleContext(SQLParser.Column_attsContext,0)


        def PRIMARY(self):
            return self.getToken(SQLParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(SQLParser.KEY, 0)

        def column_list(self):
            return self.getTypedRuleContext(SQLParser.Column_listContext,0)


        def INDEX(self):
            return self.getToken(SQLParser.INDEX, 0)

        def FULLTEXT(self):
            return self.getToken(SQLParser.FULLTEXT, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_create_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_definition" ):
                listener.enterCreate_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_definition" ):
                listener.exitCreate_definition(self)




    def create_definition(self):

        localctx = SQLParser.Create_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_create_definition)
        try:
            self.state = 1372
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1340
                self.ident()
                self.state = 1341
                self.data_type()
                self.state = 1342
                self.column_atts(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1344
                self.match(SQLParser.PRIMARY)
                self.state = 1345
                self.match(SQLParser.KEY)
                self.state = 1346
                self.match(SQLParser.LR_BRACKET)
                self.state = 1347
                self.column_list(0)
                self.state = 1348
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1350
                self.match(SQLParser.KEY)
                self.state = 1351
                self.match(SQLParser.LR_BRACKET)
                self.state = 1352
                self.column_list(0)
                self.state = 1353
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1355
                self.match(SQLParser.INDEX)
                self.state = 1356
                self.match(SQLParser.LR_BRACKET)
                self.state = 1357
                self.column_list(0)
                self.state = 1358
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1360
                self.match(SQLParser.FULLTEXT)
                self.state = 1361
                self.match(SQLParser.INDEX)
                self.state = 1362
                self.match(SQLParser.LR_BRACKET)
                self.state = 1363
                self.column_list(0)
                self.state = 1364
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1366
                self.match(SQLParser.FULLTEXT)
                self.state = 1367
                self.match(SQLParser.KEY)
                self.state = 1368
                self.match(SQLParser.LR_BRACKET)
                self.state = 1369
                self.column_list(0)
                self.state = 1370
                self.match(SQLParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_attsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_atts(self):
            return self.getTypedRuleContext(SQLParser.Column_attsContext,0)


        def NOT(self):
            return self.getToken(SQLParser.NOT, 0)

        def NULLX(self):
            return self.getToken(SQLParser.NULLX, 0)

        def DEFAULT(self):
            return self.getToken(SQLParser.DEFAULT, 0)

        def string_literal(self):
            return self.getTypedRuleContext(SQLParser.String_literalContext,0)


        def NUM(self):
            return self.getToken(SQLParser.NUM, 0)

        def BOOL(self):
            return self.getToken(SQLParser.BOOL, 0)

        def AUTO_INCREMENT(self):
            return self.getToken(SQLParser.AUTO_INCREMENT, 0)

        def UNIQUE(self):
            return self.getToken(SQLParser.UNIQUE, 0)

        def column_list(self):
            return self.getTypedRuleContext(SQLParser.Column_listContext,0)


        def KEY(self):
            return self.getToken(SQLParser.KEY, 0)

        def PRIMARY(self):
            return self.getToken(SQLParser.PRIMARY, 0)

        def COMMENT(self):
            return self.getToken(SQLParser.COMMENT, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_column_atts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_atts" ):
                listener.enterColumn_atts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_atts" ):
                listener.exitColumn_atts(self)



    def column_atts(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLParser.Column_attsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 198
        self.enterRecursionRule(localctx, 198, self.RULE_column_atts, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1410
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,101,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1408
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                    if la_ == 1:
                        localctx = SQLParser.Column_attsContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_column_atts)
                        self.state = 1375
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1376
                        self.match(SQLParser.NOT)
                        self.state = 1377
                        self.match(SQLParser.NULLX)
                        pass

                    elif la_ == 2:
                        localctx = SQLParser.Column_attsContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_column_atts)
                        self.state = 1378
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1379
                        self.match(SQLParser.NULLX)
                        pass

                    elif la_ == 3:
                        localctx = SQLParser.Column_attsContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_column_atts)
                        self.state = 1380
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1381
                        self.match(SQLParser.DEFAULT)
                        self.state = 1382
                        self.string_literal()
                        pass

                    elif la_ == 4:
                        localctx = SQLParser.Column_attsContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_column_atts)
                        self.state = 1383
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1384
                        self.match(SQLParser.DEFAULT)
                        self.state = 1385
                        self.match(SQLParser.NUM)
                        pass

                    elif la_ == 5:
                        localctx = SQLParser.Column_attsContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_column_atts)
                        self.state = 1386
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1387
                        self.match(SQLParser.DEFAULT)
                        self.state = 1388
                        self.match(SQLParser.BOOL)
                        pass

                    elif la_ == 6:
                        localctx = SQLParser.Column_attsContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_column_atts)
                        self.state = 1389
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1390
                        self.match(SQLParser.AUTO_INCREMENT)
                        pass

                    elif la_ == 7:
                        localctx = SQLParser.Column_attsContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_column_atts)
                        self.state = 1391
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1392
                        self.match(SQLParser.UNIQUE)
                        self.state = 1393
                        self.match(SQLParser.LR_BRACKET)
                        self.state = 1394
                        self.column_list(0)
                        self.state = 1395
                        self.match(SQLParser.RR_BRACKET)
                        pass

                    elif la_ == 8:
                        localctx = SQLParser.Column_attsContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_column_atts)
                        self.state = 1397
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1398
                        self.match(SQLParser.UNIQUE)
                        self.state = 1399
                        self.match(SQLParser.KEY)
                        pass

                    elif la_ == 9:
                        localctx = SQLParser.Column_attsContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_column_atts)
                        self.state = 1400
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1401
                        self.match(SQLParser.PRIMARY)
                        self.state = 1402
                        self.match(SQLParser.KEY)
                        pass

                    elif la_ == 10:
                        localctx = SQLParser.Column_attsContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_column_atts)
                        self.state = 1403
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1404
                        self.match(SQLParser.KEY)
                        pass

                    elif la_ == 11:
                        localctx = SQLParser.Column_attsContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_column_atts)
                        self.state = 1405
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1406
                        self.match(SQLParser.COMMENT)
                        self.state = 1407
                        self.string_literal()
                        pass

             
                self.state = 1412
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Opt_lengthContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUM(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.NUM)
            else:
                return self.getToken(SQLParser.NUM, i)

        def COMMA(self):
            return self.getToken(SQLParser.COMMA, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_opt_length

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_length" ):
                listener.enterOpt_length(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_length" ):
                listener.exitOpt_length(self)




    def opt_length(self):

        localctx = SQLParser.Opt_lengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_opt_length)
        try:
            self.state = 1422
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1414
                self.match(SQLParser.LR_BRACKET)
                self.state = 1415
                self.match(SQLParser.NUM)
                self.state = 1416
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1417
                self.match(SQLParser.LR_BRACKET)
                self.state = 1418
                self.match(SQLParser.NUM)
                self.state = 1419
                self.match(SQLParser.COMMA)
                self.state = 1420
                self.match(SQLParser.NUM)
                self.state = 1421
                self.match(SQLParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_binaryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY(self):
            return self.getToken(SQLParser.BINARY, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_opt_binary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_binary" ):
                listener.enterOpt_binary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_binary" ):
                listener.exitOpt_binary(self)




    def opt_binary(self):

        localctx = SQLParser.Opt_binaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_opt_binary)
        try:
            self.state = 1426
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1425
                self.match(SQLParser.BINARY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_uzContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def opt_uz(self):
            return self.getTypedRuleContext(SQLParser.Opt_uzContext,0)


        def UNSIGNED(self):
            return self.getToken(SQLParser.UNSIGNED, 0)

        def ZEROFILL(self):
            return self.getToken(SQLParser.ZEROFILL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_opt_uz

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_uz" ):
                listener.enterOpt_uz(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_uz" ):
                listener.exitOpt_uz(self)



    def opt_uz(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLParser.Opt_uzContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 204
        self.enterRecursionRule(localctx, 204, self.RULE_opt_uz, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1435
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,105,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1433
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                    if la_ == 1:
                        localctx = SQLParser.Opt_uzContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_opt_uz)
                        self.state = 1429
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1430
                        self.match(SQLParser.UNSIGNED)
                        pass

                    elif la_ == 2:
                        localctx = SQLParser.Opt_uzContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_opt_uz)
                        self.state = 1431
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1432
                        self.match(SQLParser.ZEROFILL)
                        pass

             
                self.state = 1437
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Opt_cscContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def opt_csc(self):
            return self.getTypedRuleContext(SQLParser.Opt_cscContext,0)


        def CHAR(self):
            return self.getToken(SQLParser.CHAR, 0)

        def SET(self):
            return self.getToken(SQLParser.SET, 0)

        def string_literal(self):
            return self.getTypedRuleContext(SQLParser.String_literalContext,0)


        def COLLATE(self):
            return self.getToken(SQLParser.COLLATE, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_opt_csc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_csc" ):
                listener.enterOpt_csc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_csc" ):
                listener.exitOpt_csc(self)



    def opt_csc(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLParser.Opt_cscContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 206
        self.enterRecursionRule(localctx, 206, self.RULE_opt_csc, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1448
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,107,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1446
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                    if la_ == 1:
                        localctx = SQLParser.Opt_cscContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_opt_csc)
                        self.state = 1439
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1440
                        self.match(SQLParser.CHAR)
                        self.state = 1441
                        self.match(SQLParser.SET)
                        self.state = 1442
                        self.string_literal()
                        pass

                    elif la_ == 2:
                        localctx = SQLParser.Opt_cscContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_opt_csc)
                        self.state = 1443
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1444
                        self.match(SQLParser.COLLATE)
                        self.state = 1445
                        self.string_literal()
                        pass

             
                self.state = 1450
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Data_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BIT(self):
            return self.getToken(SQLParser.BIT, 0)

        def opt_length(self):
            return self.getTypedRuleContext(SQLParser.Opt_lengthContext,0)


        def TINYINT(self):
            return self.getToken(SQLParser.TINYINT, 0)

        def opt_uz(self):
            return self.getTypedRuleContext(SQLParser.Opt_uzContext,0)


        def SMALLINT(self):
            return self.getToken(SQLParser.SMALLINT, 0)

        def MEDIUMINT(self):
            return self.getToken(SQLParser.MEDIUMINT, 0)

        def INTEGER(self):
            return self.getToken(SQLParser.INTEGER, 0)

        def BIGINT(self):
            return self.getToken(SQLParser.BIGINT, 0)

        def REAL(self):
            return self.getToken(SQLParser.REAL, 0)

        def DOUBLE(self):
            return self.getToken(SQLParser.DOUBLE, 0)

        def FLOAT(self):
            return self.getToken(SQLParser.FLOAT, 0)

        def DECIMAL(self):
            return self.getToken(SQLParser.DECIMAL, 0)

        def DATE(self):
            return self.getToken(SQLParser.DATE, 0)

        def TIME(self):
            return self.getToken(SQLParser.TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(SQLParser.TIMESTAMP, 0)

        def DATETIME(self):
            return self.getToken(SQLParser.DATETIME, 0)

        def YEAR(self):
            return self.getToken(SQLParser.YEAR, 0)

        def CHAR(self):
            return self.getToken(SQLParser.CHAR, 0)

        def opt_csc(self):
            return self.getTypedRuleContext(SQLParser.Opt_cscContext,0)


        def VARCHAR(self):
            return self.getToken(SQLParser.VARCHAR, 0)

        def NUM(self):
            return self.getToken(SQLParser.NUM, 0)

        def NVARCHAR(self):
            return self.getToken(SQLParser.NVARCHAR, 0)

        def BINARY(self):
            return self.getToken(SQLParser.BINARY, 0)

        def VARBINARY(self):
            return self.getToken(SQLParser.VARBINARY, 0)

        def TINYBLOB(self):
            return self.getToken(SQLParser.TINYBLOB, 0)

        def BLOB(self):
            return self.getToken(SQLParser.BLOB, 0)

        def MEDIUMBLOB(self):
            return self.getToken(SQLParser.MEDIUMBLOB, 0)

        def LONGBLOB(self):
            return self.getToken(SQLParser.LONGBLOB, 0)

        def TINYTEXT(self):
            return self.getToken(SQLParser.TINYTEXT, 0)

        def opt_binary(self):
            return self.getTypedRuleContext(SQLParser.Opt_binaryContext,0)


        def TEXT(self):
            return self.getToken(SQLParser.TEXT, 0)

        def MEDIUMTEXT(self):
            return self.getToken(SQLParser.MEDIUMTEXT, 0)

        def LONGTEXT(self):
            return self.getToken(SQLParser.LONGTEXT, 0)

        def ENUM(self):
            return self.getToken(SQLParser.ENUM, 0)

        def enum_list(self):
            return self.getTypedRuleContext(SQLParser.Enum_listContext,0)


        def SET(self):
            return self.getToken(SQLParser.SET, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData_type" ):
                listener.enterData_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData_type" ):
                listener.exitData_type(self)




    def data_type(self):

        localctx = SQLParser.Data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_data_type)
        try:
            self.state = 1546
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.BIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1451
                self.match(SQLParser.BIT)
                self.state = 1452
                self.opt_length()
                pass
            elif token in [SQLParser.TINYINT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1453
                self.match(SQLParser.TINYINT)
                self.state = 1454
                self.opt_length()
                self.state = 1455
                self.opt_uz(0)
                pass
            elif token in [SQLParser.SMALLINT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1457
                self.match(SQLParser.SMALLINT)
                self.state = 1458
                self.opt_length()
                self.state = 1459
                self.opt_uz(0)
                pass
            elif token in [SQLParser.MEDIUMINT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1461
                self.match(SQLParser.MEDIUMINT)
                self.state = 1462
                self.opt_length()
                self.state = 1463
                self.opt_uz(0)
                pass
            elif token in [SQLParser.INTEGER]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1465
                self.match(SQLParser.INTEGER)
                self.state = 1466
                self.opt_length()
                self.state = 1467
                self.opt_uz(0)
                pass
            elif token in [SQLParser.BIGINT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1469
                self.match(SQLParser.BIGINT)
                self.state = 1470
                self.opt_length()
                self.state = 1471
                self.opt_uz(0)
                pass
            elif token in [SQLParser.REAL]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1473
                self.match(SQLParser.REAL)
                self.state = 1474
                self.opt_length()
                self.state = 1475
                self.opt_uz(0)
                pass
            elif token in [SQLParser.DOUBLE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1477
                self.match(SQLParser.DOUBLE)
                self.state = 1478
                self.opt_length()
                self.state = 1479
                self.opt_uz(0)
                pass
            elif token in [SQLParser.FLOAT]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1481
                self.match(SQLParser.FLOAT)
                self.state = 1482
                self.opt_length()
                self.state = 1483
                self.opt_uz(0)
                pass
            elif token in [SQLParser.DECIMAL]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1485
                self.match(SQLParser.DECIMAL)
                self.state = 1486
                self.opt_length()
                self.state = 1487
                self.opt_uz(0)
                pass
            elif token in [SQLParser.DATE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1489
                self.match(SQLParser.DATE)
                pass
            elif token in [SQLParser.TIME]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1490
                self.match(SQLParser.TIME)
                pass
            elif token in [SQLParser.TIMESTAMP]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1491
                self.match(SQLParser.TIMESTAMP)
                pass
            elif token in [SQLParser.DATETIME]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1492
                self.match(SQLParser.DATETIME)
                pass
            elif token in [SQLParser.YEAR]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1493
                self.match(SQLParser.YEAR)
                pass
            elif token in [SQLParser.CHAR]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1494
                self.match(SQLParser.CHAR)
                self.state = 1495
                self.opt_length()
                self.state = 1496
                self.opt_csc(0)
                pass
            elif token in [SQLParser.VARCHAR]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1498
                self.match(SQLParser.VARCHAR)
                self.state = 1499
                self.match(SQLParser.LR_BRACKET)
                self.state = 1500
                self.match(SQLParser.NUM)
                self.state = 1501
                self.match(SQLParser.RR_BRACKET)
                self.state = 1502
                self.opt_csc(0)
                pass
            elif token in [SQLParser.NVARCHAR]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1503
                self.match(SQLParser.NVARCHAR)
                self.state = 1504
                self.match(SQLParser.LR_BRACKET)
                self.state = 1505
                self.match(SQLParser.NUM)
                self.state = 1506
                self.match(SQLParser.RR_BRACKET)
                self.state = 1507
                self.opt_csc(0)
                pass
            elif token in [SQLParser.BINARY]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1508
                self.match(SQLParser.BINARY)
                self.state = 1509
                self.opt_length()
                pass
            elif token in [SQLParser.VARBINARY]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1510
                self.match(SQLParser.VARBINARY)
                self.state = 1511
                self.match(SQLParser.LR_BRACKET)
                self.state = 1512
                self.match(SQLParser.NUM)
                self.state = 1513
                self.match(SQLParser.RR_BRACKET)
                pass
            elif token in [SQLParser.TINYBLOB]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1514
                self.match(SQLParser.TINYBLOB)
                pass
            elif token in [SQLParser.BLOB]:
                self.enterOuterAlt(localctx, 22)
                self.state = 1515
                self.match(SQLParser.BLOB)
                pass
            elif token in [SQLParser.MEDIUMBLOB]:
                self.enterOuterAlt(localctx, 23)
                self.state = 1516
                self.match(SQLParser.MEDIUMBLOB)
                pass
            elif token in [SQLParser.LONGBLOB]:
                self.enterOuterAlt(localctx, 24)
                self.state = 1517
                self.match(SQLParser.LONGBLOB)
                pass
            elif token in [SQLParser.TINYTEXT]:
                self.enterOuterAlt(localctx, 25)
                self.state = 1518
                self.match(SQLParser.TINYTEXT)
                self.state = 1519
                self.opt_binary()
                self.state = 1520
                self.opt_csc(0)
                pass
            elif token in [SQLParser.TEXT]:
                self.enterOuterAlt(localctx, 26)
                self.state = 1522
                self.match(SQLParser.TEXT)
                self.state = 1523
                self.opt_binary()
                self.state = 1524
                self.opt_csc(0)
                pass
            elif token in [SQLParser.MEDIUMTEXT]:
                self.enterOuterAlt(localctx, 27)
                self.state = 1526
                self.match(SQLParser.MEDIUMTEXT)
                self.state = 1527
                self.opt_binary()
                self.state = 1528
                self.opt_csc(0)
                pass
            elif token in [SQLParser.LONGTEXT]:
                self.enterOuterAlt(localctx, 28)
                self.state = 1530
                self.match(SQLParser.LONGTEXT)
                self.state = 1531
                self.opt_binary()
                self.state = 1532
                self.opt_csc(0)
                pass
            elif token in [SQLParser.ENUM]:
                self.enterOuterAlt(localctx, 29)
                self.state = 1534
                self.match(SQLParser.ENUM)
                self.state = 1535
                self.match(SQLParser.LR_BRACKET)
                self.state = 1536
                self.enum_list(0)
                self.state = 1537
                self.match(SQLParser.RR_BRACKET)
                self.state = 1538
                self.opt_csc(0)
                pass
            elif token in [SQLParser.SET]:
                self.enterOuterAlt(localctx, 30)
                self.state = 1540
                self.match(SQLParser.SET)
                self.state = 1541
                self.match(SQLParser.LR_BRACKET)
                self.state = 1542
                self.enum_list(0)
                self.state = 1543
                self.match(SQLParser.RR_BRACKET)
                self.state = 1544
                self.opt_csc(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string_literal(self):
            return self.getTypedRuleContext(SQLParser.String_literalContext,0)


        def enum_list(self):
            return self.getTypedRuleContext(SQLParser.Enum_listContext,0)


        def COMMA(self):
            return self.getToken(SQLParser.COMMA, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_enum_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_list" ):
                listener.enterEnum_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_list" ):
                listener.exitEnum_list(self)



    def enum_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLParser.Enum_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 210
        self.enterRecursionRule(localctx, 210, self.RULE_enum_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1549
            self.string_literal()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1556
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SQLParser.Enum_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_enum_list)
                    self.state = 1551
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1552
                    self.match(SQLParser.COMMA)
                    self.state = 1553
                    self.string_literal() 
                self.state = 1558
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Create_select_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def opt_ignore_replace(self):
            return self.getTypedRuleContext(SQLParser.Opt_ignore_replaceContext,0)


        def opt_as(self):
            return self.getTypedRuleContext(SQLParser.Opt_asContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_create_select_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_select_statement" ):
                listener.enterCreate_select_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_select_statement" ):
                listener.exitCreate_select_statement(self)




    def create_select_statement(self):

        localctx = SQLParser.Create_select_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_create_select_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1559
            self.opt_ignore_replace()
            self.state = 1560
            self.opt_as()
            self.state = 1561
            self.select_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_ignore_replaceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IGNORE(self):
            return self.getToken(SQLParser.IGNORE, 0)

        def REPLACE(self):
            return self.getToken(SQLParser.REPLACE, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_opt_ignore_replace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_ignore_replace" ):
                listener.enterOpt_ignore_replace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_ignore_replace" ):
                listener.exitOpt_ignore_replace(self)




    def opt_ignore_replace(self):

        localctx = SQLParser.Opt_ignore_replaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_opt_ignore_replace)
        try:
            self.state = 1566
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.AS, SQLParser.SELECT, SQLParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 1)

                pass
            elif token in [SQLParser.IGNORE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1564
                self.match(SQLParser.IGNORE)
                pass
            elif token in [SQLParser.REPLACE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1565
                self.match(SQLParser.REPLACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_temporaryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TEMPORARY(self):
            return self.getToken(SQLParser.TEMPORARY, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_opt_temporary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_temporary" ):
                listener.enterOpt_temporary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_temporary" ):
                listener.exitOpt_temporary(self)




    def opt_temporary(self):

        localctx = SQLParser.Opt_temporaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_opt_temporary)
        try:
            self.state = 1570
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.TABLE]:
                self.enterOuterAlt(localctx, 1)

                pass
            elif token in [SQLParser.TEMPORARY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1569
                self.match(SQLParser.TEMPORARY)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(SQLParser.SET, 0)

        def set_list(self):
            return self.getTypedRuleContext(SQLParser.Set_listContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_set_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_stmt" ):
                listener.enterSet_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_stmt" ):
                listener.exitSet_stmt(self)




    def set_stmt(self):

        localctx = SQLParser.Set_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_set_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1572
            self.match(SQLParser.SET)
            self.state = 1573
            self.set_list(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def set_expr(self):
            return self.getTypedRuleContext(SQLParser.Set_exprContext,0)


        def set_list(self):
            return self.getTypedRuleContext(SQLParser.Set_listContext,0)


        def COMMA(self):
            return self.getToken(SQLParser.COMMA, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_set_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_list" ):
                listener.enterSet_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_list" ):
                listener.exitSet_list(self)



    def set_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLParser.Set_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 220
        self.enterRecursionRule(localctx, 220, self.RULE_set_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1576
            self.set_expr()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1583
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,112,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SQLParser.Set_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_set_list)
                    self.state = 1578
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1579
                    self.match(SQLParser.COMMA)
                    self.state = 1580
                    self.set_expr() 
                self.state = 1585
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Set_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USERVAR(self):
            return self.getToken(SQLParser.USERVAR, 0)

        def COMPARISON(self):
            return self.getToken(SQLParser.COMPARISON, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def ASSIGN(self):
            return self.getToken(SQLParser.ASSIGN, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_set_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_expr" ):
                listener.enterSet_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_expr" ):
                listener.exitSet_expr(self)




    def set_expr(self):

        localctx = SQLParser.Set_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_set_expr)
        try:
            self.state = 1592
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1586
                self.match(SQLParser.USERVAR)
                self.state = 1587
                self.match(SQLParser.COMPARISON)
                self.state = 1588
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1589
                self.match(SQLParser.USERVAR)
                self.state = 1590
                self.match(SQLParser.ASSIGN)
                self.state = 1591
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expr_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def expr_list(self):
            return self.getTypedRuleContext(SQLParser.Expr_listContext,0)


        def COMMA(self):
            return self.getToken(SQLParser.COMMA, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_expr_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_list" ):
                listener.enterExpr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_list" ):
                listener.exitExpr_list(self)



    def expr_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLParser.Expr_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 224
        self.enterRecursionRule(localctx, 224, self.RULE_expr_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1595
            self.expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1602
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,114,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SQLParser.Expr_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expr_list)
                    self.state = 1597
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1598
                    self.match(SQLParser.COMMA)
                    self.state = 1599
                    self.expr(0) 
                self.state = 1604
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,114,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Opt_udf_expr_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def udf_expr_list(self):
            return self.getTypedRuleContext(SQLParser.Udf_expr_listContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_opt_udf_expr_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_udf_expr_list" ):
                listener.enterOpt_udf_expr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_udf_expr_list" ):
                listener.exitOpt_udf_expr_list(self)




    def opt_udf_expr_list(self):

        localctx = SQLParser.Opt_udf_expr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_opt_udf_expr_list)
        try:
            self.state = 1607
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.RR_BRACKET]:
                self.enterOuterAlt(localctx, 1)

                pass
            elif token in [SQLParser.ANY, SQLParser.AUTO_INCREMENT, SQLParser.BINARY, SQLParser.BIT, SQLParser.BOOLEAN, SQLParser.CASE, SQLParser.CHAR, SQLParser.COMMENT, SQLParser.CONVERT, SQLParser.COUNT, SQLParser.DATABASE, SQLParser.DATE, SQLParser.DATETIME, SQLParser.DAY, SQLParser.DUMPFILE, SQLParser.END, SQLParser.ENUM, SQLParser.ESCAPE, SQLParser.EXISTS, SQLParser.FIELDS, SQLParser.HOUR, SQLParser.IF, SQLParser.INTERVAL, SQLParser.LIKE, SQLParser.MICROSECOND, SQLParser.MINUTE, SQLParser.MODE, SQLParser.MONTH, SQLParser.NCHAR, SQLParser.NOT, SQLParser.NULLX, SQLParser.OFFSET, SQLParser.ONDUPLICATE, SQLParser.PARTITION, SQLParser.POSITION, SQLParser.QUARTER, SQLParser.QUICK, SQLParser.ROW, SQLParser.SECOND, SQLParser.SHARE, SQLParser.SIGNED, SQLParser.SOME, SQLParser.SOUNDS, SQLParser.TEMPORARY, SQLParser.TEXT, SQLParser.TIME, SQLParser.TIMESTAMP, SQLParser.UNICODE, SQLParser.UNSIGNED, SQLParser.WEEK, SQLParser.YEAR, SQLParser.ASCII, SQLParser.SUBSTRING, SQLParser.TRIM, SQLParser.CAST, SQLParser.EXTRACT, SQLParser.WEIGHT_STRING, SQLParser.BOOL, SQLParser.NUM, SQLParser.LR_BRACKET, SQLParser.STAR, SQLParser.PLUS, SQLParser.MINUS, SQLParser.BIT_NOT, SQLParser.EXCLAMATION, SQLParser.UNDERLINE, SQLParser.QUOTA_STRING, SQLParser.DOUBLE_QUOTA_STRING, SQLParser.BQUOTA_STRING, SQLParser.HEX_STRING, SQLParser.BIT_STRING, SQLParser.START_NATIONAL_STRING_LITERAL, SQLParser.IDENT, SQLParser.USERVAR, SQLParser.SYSVAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1606
                self.udf_expr_list(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Udf_expr_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def udf_expr(self):
            return self.getTypedRuleContext(SQLParser.Udf_exprContext,0)


        def udf_expr_list(self):
            return self.getTypedRuleContext(SQLParser.Udf_expr_listContext,0)


        def COMMA(self):
            return self.getToken(SQLParser.COMMA, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_udf_expr_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdf_expr_list" ):
                listener.enterUdf_expr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdf_expr_list" ):
                listener.exitUdf_expr_list(self)



    def udf_expr_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLParser.Udf_expr_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 228
        self.enterRecursionRule(localctx, 228, self.RULE_udf_expr_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1610
            self.udf_expr()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1617
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,116,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SQLParser.Udf_expr_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_udf_expr_list)
                    self.state = 1612
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1613
                    self.match(SQLParser.COMMA)
                    self.state = 1614
                    self.udf_expr() 
                self.state = 1619
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,116,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Udf_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def opt_alias(self):
            return self.getTypedRuleContext(SQLParser.Opt_aliasContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_udf_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdf_expr" ):
                listener.enterUdf_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdf_expr" ):
                listener.exitUdf_expr(self)




    def udf_expr(self):

        localctx = SQLParser.Udf_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_udf_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1620
            self.expr(0)
            self.state = 1621
            self.opt_alias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.IDENT)
            else:
                return self.getToken(SQLParser.IDENT, i)

        def BQUOTA_STRING(self):
            return self.getToken(SQLParser.BQUOTA_STRING, 0)

        def unreserved_keyword(self):
            return self.getTypedRuleContext(SQLParser.Unreserved_keywordContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_ident

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdent" ):
                listener.enterIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdent" ):
                listener.exitIdent(self)




    def ident(self):

        localctx = SQLParser.IdentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_ident)
        try:
            self.state = 1633
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.IDENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1623
                self.match(SQLParser.IDENT)
                self.state = 1628
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,117,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1624
                        self.match(SQLParser.DOT)
                        self.state = 1625
                        self.match(SQLParser.IDENT) 
                    self.state = 1630
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,117,self._ctx)

                pass
            elif token in [SQLParser.BQUOTA_STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1631
                self.match(SQLParser.BQUOTA_STRING)
                pass
            elif token in [SQLParser.ANY, SQLParser.AUTO_INCREMENT, SQLParser.BIT, SQLParser.BOOLEAN, SQLParser.COMMENT, SQLParser.COUNT, SQLParser.DATE, SQLParser.DATETIME, SQLParser.DAY, SQLParser.DUMPFILE, SQLParser.END, SQLParser.ENUM, SQLParser.ESCAPE, SQLParser.FIELDS, SQLParser.HOUR, SQLParser.MICROSECOND, SQLParser.MINUTE, SQLParser.MODE, SQLParser.MONTH, SQLParser.NCHAR, SQLParser.OFFSET, SQLParser.ONDUPLICATE, SQLParser.PARTITION, SQLParser.POSITION, SQLParser.QUARTER, SQLParser.QUICK, SQLParser.SECOND, SQLParser.SHARE, SQLParser.SIGNED, SQLParser.SOME, SQLParser.SOUNDS, SQLParser.TEMPORARY, SQLParser.TEXT, SQLParser.TIME, SQLParser.TIMESTAMP, SQLParser.UNICODE, SQLParser.UNSIGNED, SQLParser.WEEK, SQLParser.YEAR, SQLParser.SUBSTRING, SQLParser.TRIM]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1632
                self.unreserved_keyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(SQLParser.NOT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLParser.ExprContext,i)


        def EXCLAMATION(self):
            return self.getToken(SQLParser.EXCLAMATION, 0)

        def predicate(self):
            return self.getTypedRuleContext(SQLParser.PredicateContext,0)


        def IS(self):
            return self.getToken(SQLParser.IS, 0)

        def BOOL(self):
            return self.getToken(SQLParser.BOOL, 0)

        def AND(self):
            return self.getToken(SQLParser.AND, 0)

        def XOR(self):
            return self.getToken(SQLParser.XOR, 0)

        def OR(self):
            return self.getToken(SQLParser.OR, 0)

        def TYPECAST(self):
            return self.getToken(SQLParser.TYPECAST, 0)

        def cast_type(self):
            return self.getTypedRuleContext(SQLParser.Cast_typeContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 234
        self.enterRecursionRule(localctx, 234, self.RULE_expr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1650
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 1636
                self.match(SQLParser.NOT)
                self.state = 1637
                self.expr(9)
                pass

            elif la_ == 2:
                self.state = 1638
                self.match(SQLParser.EXCLAMATION)
                self.state = 1639
                self.expr(8)
                pass

            elif la_ == 3:
                self.state = 1640
                self.predicate(0)
                self.state = 1641
                self.match(SQLParser.IS)
                self.state = 1642
                self.match(SQLParser.NOT)
                self.state = 1643
                self.match(SQLParser.BOOL)
                pass

            elif la_ == 4:
                self.state = 1645
                self.predicate(0)
                self.state = 1646
                self.match(SQLParser.IS)
                self.state = 1647
                self.match(SQLParser.BOOL)
                pass

            elif la_ == 5:
                self.state = 1649
                self.predicate(0)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1666
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,121,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1664
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
                    if la_ == 1:
                        localctx = SQLParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1652
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1653
                        self.match(SQLParser.AND)
                        self.state = 1654
                        self.expr(8)
                        pass

                    elif la_ == 2:
                        localctx = SQLParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1655
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1656
                        self.match(SQLParser.XOR)
                        self.state = 1657
                        self.expr(7)
                        pass

                    elif la_ == 3:
                        localctx = SQLParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1658
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1659
                        self.match(SQLParser.OR)
                        self.state = 1660
                        self.expr(6)
                        pass

                    elif la_ == 4:
                        localctx = SQLParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1661
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1662
                        self.match(SQLParser.TYPECAST)
                        self.state = 1663
                        self.cast_type()
                        pass

             
                self.state = 1668
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,121,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class PredicateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USERVAR(self):
            return self.getToken(SQLParser.USERVAR, 0)

        def ASSIGN(self):
            return self.getToken(SQLParser.ASSIGN, 0)

        def expressionAtom(self):
            return self.getTypedRuleContext(SQLParser.ExpressionAtomContext,0)


        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.PredicateContext)
            else:
                return self.getTypedRuleContext(SQLParser.PredicateContext,i)


        def COMPARISON(self):
            return self.getToken(SQLParser.COMPARISON, 0)

        def BETWEEN(self):
            return self.getToken(SQLParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(SQLParser.AND, 0)

        def NOT(self):
            return self.getToken(SQLParser.NOT, 0)

        def SOUNDS(self):
            return self.getToken(SQLParser.SOUNDS, 0)

        def LIKE(self):
            return self.getToken(SQLParser.LIKE, 0)

        def REGEXP(self):
            return self.getToken(SQLParser.REGEXP, 0)

        def IN(self):
            return self.getToken(SQLParser.IN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(SQLParser.Expr_listContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLParser.Select_stmtContext,0)


        def IS(self):
            return self.getToken(SQLParser.IS, 0)

        def NULLX(self):
            return self.getToken(SQLParser.NULLX, 0)

        def ANY(self):
            return self.getToken(SQLParser.ANY, 0)

        def SOME(self):
            return self.getToken(SQLParser.SOME, 0)

        def ALL(self):
            return self.getToken(SQLParser.ALL, 0)

        def opt_escape(self):
            return self.getTypedRuleContext(SQLParser.Opt_escapeContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate" ):
                listener.enterPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate" ):
                listener.exitPredicate(self)



    def predicate(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLParser.PredicateContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 236
        self.enterRecursionRule(localctx, 236, self.RULE_predicate, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1674
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.state = 1670
                self.match(SQLParser.USERVAR)
                self.state = 1671
                self.match(SQLParser.ASSIGN)
                self.state = 1672
                self.expressionAtom(0)
                pass

            elif la_ == 2:
                self.state = 1673
                self.expressionAtom(0)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1770
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,124,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1768
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
                    if la_ == 1:
                        localctx = SQLParser.PredicateContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1676
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1677
                        self.match(SQLParser.COMPARISON)
                        self.state = 1678
                        self.predicate(14)
                        pass

                    elif la_ == 2:
                        localctx = SQLParser.PredicateContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1679
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1680
                        self.match(SQLParser.BETWEEN)
                        self.state = 1681
                        self.predicate(0)
                        self.state = 1682
                        self.match(SQLParser.AND)
                        self.state = 1683
                        self.predicate(10)
                        pass

                    elif la_ == 3:
                        localctx = SQLParser.PredicateContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1685
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1686
                        self.match(SQLParser.NOT)
                        self.state = 1687
                        self.match(SQLParser.BETWEEN)
                        self.state = 1688
                        self.predicate(0)
                        self.state = 1689
                        self.match(SQLParser.AND)
                        self.state = 1690
                        self.predicate(9)
                        pass

                    elif la_ == 4:
                        localctx = SQLParser.PredicateContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1692
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1693
                        self.match(SQLParser.SOUNDS)
                        self.state = 1694
                        self.match(SQLParser.LIKE)
                        self.state = 1695
                        self.predicate(8)
                        pass

                    elif la_ == 5:
                        localctx = SQLParser.PredicateContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1696
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1697
                        self.match(SQLParser.REGEXP)
                        self.state = 1698
                        self.predicate(5)
                        pass

                    elif la_ == 6:
                        localctx = SQLParser.PredicateContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1699
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1700
                        self.match(SQLParser.NOT)
                        self.state = 1701
                        self.match(SQLParser.REGEXP)
                        self.state = 1702
                        self.predicate(4)
                        pass

                    elif la_ == 7:
                        localctx = SQLParser.PredicateContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1703
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 1704
                        self.match(SQLParser.IN)
                        self.state = 1705
                        self.match(SQLParser.LR_BRACKET)
                        self.state = 1706
                        self.expr_list(0)
                        self.state = 1707
                        self.match(SQLParser.RR_BRACKET)
                        pass

                    elif la_ == 8:
                        localctx = SQLParser.PredicateContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1709
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 1710
                        self.match(SQLParser.NOT)
                        self.state = 1711
                        self.match(SQLParser.IN)
                        self.state = 1712
                        self.match(SQLParser.LR_BRACKET)
                        self.state = 1713
                        self.expr_list(0)
                        self.state = 1714
                        self.match(SQLParser.RR_BRACKET)
                        pass

                    elif la_ == 9:
                        localctx = SQLParser.PredicateContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1716
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 1717
                        self.match(SQLParser.IN)
                        self.state = 1718
                        self.match(SQLParser.LR_BRACKET)
                        self.state = 1719
                        self.select_stmt()
                        self.state = 1720
                        self.match(SQLParser.RR_BRACKET)
                        pass

                    elif la_ == 10:
                        localctx = SQLParser.PredicateContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1722
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 1723
                        self.match(SQLParser.NOT)
                        self.state = 1724
                        self.match(SQLParser.IN)
                        self.state = 1725
                        self.match(SQLParser.LR_BRACKET)
                        self.state = 1726
                        self.select_stmt()
                        self.state = 1727
                        self.match(SQLParser.RR_BRACKET)
                        pass

                    elif la_ == 11:
                        localctx = SQLParser.PredicateContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1729
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 1730
                        self.match(SQLParser.IS)
                        self.state = 1731
                        self.match(SQLParser.NULLX)
                        pass

                    elif la_ == 12:
                        localctx = SQLParser.PredicateContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1732
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 1733
                        self.match(SQLParser.IS)
                        self.state = 1734
                        self.match(SQLParser.NOT)
                        self.state = 1735
                        self.match(SQLParser.NULLX)
                        pass

                    elif la_ == 13:
                        localctx = SQLParser.PredicateContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1736
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 1737
                        self.match(SQLParser.COMPARISON)
                        self.state = 1738
                        self.match(SQLParser.ANY)
                        self.state = 1739
                        self.match(SQLParser.LR_BRACKET)
                        self.state = 1740
                        self.select_stmt()
                        self.state = 1741
                        self.match(SQLParser.RR_BRACKET)
                        pass

                    elif la_ == 14:
                        localctx = SQLParser.PredicateContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1743
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1744
                        self.match(SQLParser.COMPARISON)
                        self.state = 1745
                        self.match(SQLParser.SOME)
                        self.state = 1746
                        self.match(SQLParser.LR_BRACKET)
                        self.state = 1747
                        self.select_stmt()
                        self.state = 1748
                        self.match(SQLParser.RR_BRACKET)
                        pass

                    elif la_ == 15:
                        localctx = SQLParser.PredicateContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1750
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1751
                        self.match(SQLParser.COMPARISON)
                        self.state = 1752
                        self.match(SQLParser.ALL)
                        self.state = 1753
                        self.match(SQLParser.LR_BRACKET)
                        self.state = 1754
                        self.select_stmt()
                        self.state = 1755
                        self.match(SQLParser.RR_BRACKET)
                        pass

                    elif la_ == 16:
                        localctx = SQLParser.PredicateContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1757
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1758
                        self.match(SQLParser.LIKE)
                        self.state = 1759
                        self.predicate(0)
                        self.state = 1760
                        self.opt_escape()
                        pass

                    elif la_ == 17:
                        localctx = SQLParser.PredicateContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1762
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1763
                        self.match(SQLParser.NOT)
                        self.state = 1764
                        self.match(SQLParser.LIKE)
                        self.state = 1765
                        self.predicate(0)
                        self.state = 1766
                        self.opt_escape()
                        pass

             
                self.state = 1772
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,124,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Opt_escapeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ESCAPE(self):
            return self.getToken(SQLParser.ESCAPE, 0)

        def string_literal(self):
            return self.getTypedRuleContext(SQLParser.String_literalContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_opt_escape

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_escape" ):
                listener.enterOpt_escape(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_escape" ):
                listener.exitOpt_escape(self)




    def opt_escape(self):

        localctx = SQLParser.Opt_escapeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_opt_escape)
        try:
            self.state = 1776
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1774
                self.match(SQLParser.ESCAPE)
                self.state = 1775
                self.string_literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionAtomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(SQLParser.ConstantContext,0)


        def fullColumnName(self):
            return self.getTypedRuleContext(SQLParser.FullColumnNameContext,0)


        def functionCall(self):
            return self.getTypedRuleContext(SQLParser.FunctionCallContext,0)


        def USERVAR(self):
            return self.getToken(SQLParser.USERVAR, 0)

        def MINUS(self):
            return self.getToken(SQLParser.MINUS, 0)

        def expressionAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(SQLParser.ExpressionAtomContext,i)


        def PLUS(self):
            return self.getToken(SQLParser.PLUS, 0)

        def BIT_NOT(self):
            return self.getToken(SQLParser.BIT_NOT, 0)

        def BINARY(self):
            return self.getToken(SQLParser.BINARY, 0)

        def expr_list(self):
            return self.getTypedRuleContext(SQLParser.Expr_listContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLParser.Select_stmtContext,0)


        def INTERVAL(self):
            return self.getToken(SQLParser.INTERVAL, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def interval(self):
            return self.getTypedRuleContext(SQLParser.IntervalContext,0)


        def BIT_AND(self):
            return self.getToken(SQLParser.BIT_AND, 0)

        def BIT_OR(self):
            return self.getToken(SQLParser.BIT_OR, 0)

        def BIT_XOR(self):
            return self.getToken(SQLParser.BIT_XOR, 0)

        def SHIFT(self):
            return self.getToken(SQLParser.SHIFT, 0)

        def STAR(self):
            return self.getToken(SQLParser.STAR, 0)

        def DIVIDE(self):
            return self.getToken(SQLParser.DIVIDE, 0)

        def MODULE(self):
            return self.getToken(SQLParser.MODULE, 0)

        def MOD(self):
            return self.getToken(SQLParser.MOD, 0)

        def DIV(self):
            return self.getToken(SQLParser.DIV, 0)

        def COLLATE(self):
            return self.getToken(SQLParser.COLLATE, 0)

        def collationName(self):
            return self.getTypedRuleContext(SQLParser.CollationNameContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_expressionAtom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionAtom" ):
                listener.enterExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionAtom" ):
                listener.exitExpressionAtom(self)



    def expressionAtom(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLParser.ExpressionAtomContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 240
        self.enterRecursionRule(localctx, 240, self.RULE_expressionAtom, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1803
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 1779
                self.constant()
                pass

            elif la_ == 2:
                self.state = 1780
                self.fullColumnName()
                pass

            elif la_ == 3:
                self.state = 1781
                self.functionCall()
                pass

            elif la_ == 4:
                self.state = 1782
                self.match(SQLParser.USERVAR)
                pass

            elif la_ == 5:
                self.state = 1783
                self.match(SQLParser.MINUS)
                self.state = 1784
                self.expressionAtom(7)
                pass

            elif la_ == 6:
                self.state = 1785
                self.match(SQLParser.PLUS)
                self.state = 1786
                self.expressionAtom(6)
                pass

            elif la_ == 7:
                self.state = 1787
                self.match(SQLParser.BIT_NOT)
                self.state = 1788
                self.expressionAtom(5)
                pass

            elif la_ == 8:
                self.state = 1789
                self.match(SQLParser.BINARY)
                self.state = 1790
                self.expressionAtom(4)
                pass

            elif la_ == 9:
                self.state = 1791
                self.match(SQLParser.LR_BRACKET)
                self.state = 1792
                self.expr_list(0)
                self.state = 1793
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 10:
                self.state = 1795
                self.match(SQLParser.LR_BRACKET)
                self.state = 1796
                self.select_stmt()
                self.state = 1797
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 11:
                self.state = 1799
                self.match(SQLParser.INTERVAL)
                self.state = 1800
                self.expr(0)
                self.state = 1801
                self.interval()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1843
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,128,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1841
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
                    if la_ == 1:
                        localctx = SQLParser.ExpressionAtomContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 1805
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 1806
                        self.match(SQLParser.BIT_AND)
                        self.state = 1807
                        self.expressionAtom(19)
                        pass

                    elif la_ == 2:
                        localctx = SQLParser.ExpressionAtomContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 1808
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 1809
                        self.match(SQLParser.BIT_OR)
                        self.state = 1810
                        self.expressionAtom(18)
                        pass

                    elif la_ == 3:
                        localctx = SQLParser.ExpressionAtomContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 1811
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 1812
                        self.match(SQLParser.BIT_XOR)
                        self.state = 1813
                        self.expressionAtom(17)
                        pass

                    elif la_ == 4:
                        localctx = SQLParser.ExpressionAtomContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 1814
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 1815
                        self.match(SQLParser.SHIFT)
                        self.state = 1816
                        self.expressionAtom(16)
                        pass

                    elif la_ == 5:
                        localctx = SQLParser.ExpressionAtomContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 1817
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 1818
                        self.match(SQLParser.PLUS)
                        self.state = 1819
                        self.expressionAtom(15)
                        pass

                    elif la_ == 6:
                        localctx = SQLParser.ExpressionAtomContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 1820
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1821
                        self.match(SQLParser.MINUS)
                        self.state = 1822
                        self.expressionAtom(14)
                        pass

                    elif la_ == 7:
                        localctx = SQLParser.ExpressionAtomContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 1823
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 1824
                        self.match(SQLParser.STAR)
                        self.state = 1825
                        self.expressionAtom(13)
                        pass

                    elif la_ == 8:
                        localctx = SQLParser.ExpressionAtomContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 1826
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1827
                        self.match(SQLParser.DIVIDE)
                        self.state = 1828
                        self.expressionAtom(12)
                        pass

                    elif la_ == 9:
                        localctx = SQLParser.ExpressionAtomContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 1829
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1830
                        self.match(SQLParser.MODULE)
                        self.state = 1831
                        self.expressionAtom(11)
                        pass

                    elif la_ == 10:
                        localctx = SQLParser.ExpressionAtomContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 1832
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1833
                        self.match(SQLParser.MOD)
                        self.state = 1834
                        self.expressionAtom(10)
                        pass

                    elif la_ == 11:
                        localctx = SQLParser.ExpressionAtomContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 1835
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1836
                        self.match(SQLParser.DIV)
                        self.state = 1837
                        self.expressionAtom(9)
                        pass

                    elif la_ == 12:
                        localctx = SQLParser.ExpressionAtomContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 1838
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 1839
                        self.match(SQLParser.COLLATE)
                        self.state = 1840
                        self.collationName()
                        pass

             
                self.state = 1845
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(SQLParser.StringLiteralContext,0)


        def NUM(self):
            return self.getToken(SQLParser.NUM, 0)

        def hexadecimalLiteral(self):
            return self.getTypedRuleContext(SQLParser.HexadecimalLiteralContext,0)


        def bitValueLiteral(self):
            return self.getTypedRuleContext(SQLParser.BitValueLiteralContext,0)


        def NULLX(self):
            return self.getToken(SQLParser.NULLX, 0)

        def BOOL(self):
            return self.getToken(SQLParser.BOOL, 0)

        def STAR(self):
            return self.getToken(SQLParser.STAR, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)




    def constant(self):

        localctx = SQLParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_constant)
        try:
            self.state = 1853
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1846
                self.stringLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1847
                self.match(SQLParser.NUM)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1848
                self.hexadecimalLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1849
                self.bitValueLiteral()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1850
                self.match(SQLParser.NULLX)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1851
                self.match(SQLParser.BOOL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1852
                self.match(SQLParser.STAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FullColumnNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ident(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.IdentContext)
            else:
                return self.getTypedRuleContext(SQLParser.IdentContext,i)


        def getRuleIndex(self):
            return SQLParser.RULE_fullColumnName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullColumnName" ):
                listener.enterFullColumnName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullColumnName" ):
                listener.exitFullColumnName(self)




    def fullColumnName(self):

        localctx = SQLParser.FullColumnNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_fullColumnName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1855
            self.ident()
            self.state = 1860
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,130,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1856
                    self.match(SQLParser.DOT)
                    self.state = 1857
                    self.ident() 
                self.state = 1862
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,130,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HexadecimalLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEX_STRING(self):
            return self.getToken(SQLParser.HEX_STRING, 0)

        def charsetNameBase(self):
            return self.getTypedRuleContext(SQLParser.CharsetNameBaseContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_hexadecimalLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHexadecimalLiteral" ):
                listener.enterHexadecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHexadecimalLiteral" ):
                listener.exitHexadecimalLiteral(self)




    def hexadecimalLiteral(self):

        localctx = SQLParser.HexadecimalLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_hexadecimalLiteral)
        try:
            self.state = 1868
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.HEX_STRING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1863
                self.match(SQLParser.HEX_STRING)
                pass
            elif token in [SQLParser.UNDERLINE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1864
                self.match(SQLParser.UNDERLINE)
                self.state = 1865
                self.charsetNameBase()
                self.state = 1866
                self.match(SQLParser.HEX_STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BitValueLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BIT_STRING(self):
            return self.getToken(SQLParser.BIT_STRING, 0)

        def charsetNameBase(self):
            return self.getTypedRuleContext(SQLParser.CharsetNameBaseContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_bitValueLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitValueLiteral" ):
                listener.enterBitValueLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitValueLiteral" ):
                listener.exitBitValueLiteral(self)




    def bitValueLiteral(self):

        localctx = SQLParser.BitValueLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_bitValueLiteral)
        try:
            self.state = 1875
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.BIT_STRING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1870
                self.match(SQLParser.BIT_STRING)
                pass
            elif token in [SQLParser.UNDERLINE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1871
                self.match(SQLParser.UNDERLINE)
                self.state = 1872
                self.charsetNameBase()
                self.state = 1873
                self.match(SQLParser.BIT_STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string_literal_list(self):
            return self.getTypedRuleContext(SQLParser.String_literal_listContext,0)


        def string_literal(self):
            return self.getTypedRuleContext(SQLParser.String_literalContext,0)


        def COLLATE(self):
            return self.getToken(SQLParser.COLLATE, 0)

        def collationName(self):
            return self.getTypedRuleContext(SQLParser.CollationNameContext,0)


        def START_NATIONAL_STRING_LITERAL(self):
            return self.getToken(SQLParser.START_NATIONAL_STRING_LITERAL, 0)

        def stringCharsetName(self):
            return self.getTypedRuleContext(SQLParser.StringCharsetNameContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)




    def stringLiteral(self):

        localctx = SQLParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_stringLiteral)
        try:
            self.state = 1896
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1877
                self.string_literal_list(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1878
                self.string_literal()
                self.state = 1879
                self.match(SQLParser.COLLATE)
                self.state = 1880
                self.collationName()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1882
                self.match(SQLParser.START_NATIONAL_STRING_LITERAL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1883
                self.match(SQLParser.START_NATIONAL_STRING_LITERAL)
                self.state = 1884
                self.string_literal_list(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1885
                self.match(SQLParser.START_NATIONAL_STRING_LITERAL)
                self.state = 1886
                self.match(SQLParser.COLLATE)
                self.state = 1887
                self.collationName()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1888
                self.stringCharsetName()
                self.state = 1889
                self.string_literal_list(0)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1891
                self.stringCharsetName()
                self.state = 1892
                self.string_literal()
                self.state = 1893
                self.match(SQLParser.COLLATE)
                self.state = 1894
                self.collationName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringCharsetNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def charsetNameBase(self):
            return self.getTypedRuleContext(SQLParser.CharsetNameBaseContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_stringCharsetName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringCharsetName" ):
                listener.enterStringCharsetName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringCharsetName" ):
                listener.exitStringCharsetName(self)




    def stringCharsetName(self):

        localctx = SQLParser.StringCharsetNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_stringCharsetName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1898
            self.match(SQLParser.UNDERLINE)
            self.state = 1899
            self.charsetNameBase()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class String_literal_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string_literal(self):
            return self.getTypedRuleContext(SQLParser.String_literalContext,0)


        def string_literal_list(self):
            return self.getTypedRuleContext(SQLParser.String_literal_listContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_string_literal_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_literal_list" ):
                listener.enterString_literal_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_literal_list" ):
                listener.exitString_literal_list(self)



    def string_literal_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLParser.String_literal_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 254
        self.enterRecursionRule(localctx, 254, self.RULE_string_literal_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1902
            self.string_literal()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1908
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,134,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SQLParser.String_literal_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_string_literal_list)
                    self.state = 1904
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1905
                    self.string_literal() 
                self.state = 1910
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,134,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class CollationNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ident(self):
            return self.getTypedRuleContext(SQLParser.IdentContext,0)


        def string_literal(self):
            return self.getTypedRuleContext(SQLParser.String_literalContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_collationName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollationName" ):
                listener.enterCollationName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollationName" ):
                listener.exitCollationName(self)




    def collationName(self):

        localctx = SQLParser.CollationNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_collationName)
        try:
            self.state = 1913
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.ANY, SQLParser.AUTO_INCREMENT, SQLParser.BIT, SQLParser.BOOLEAN, SQLParser.COMMENT, SQLParser.COUNT, SQLParser.DATE, SQLParser.DATETIME, SQLParser.DAY, SQLParser.DUMPFILE, SQLParser.END, SQLParser.ENUM, SQLParser.ESCAPE, SQLParser.FIELDS, SQLParser.HOUR, SQLParser.MICROSECOND, SQLParser.MINUTE, SQLParser.MODE, SQLParser.MONTH, SQLParser.NCHAR, SQLParser.OFFSET, SQLParser.ONDUPLICATE, SQLParser.PARTITION, SQLParser.POSITION, SQLParser.QUARTER, SQLParser.QUICK, SQLParser.SECOND, SQLParser.SHARE, SQLParser.SIGNED, SQLParser.SOME, SQLParser.SOUNDS, SQLParser.TEMPORARY, SQLParser.TEXT, SQLParser.TIME, SQLParser.TIMESTAMP, SQLParser.UNICODE, SQLParser.UNSIGNED, SQLParser.WEEK, SQLParser.YEAR, SQLParser.SUBSTRING, SQLParser.TRIM, SQLParser.BQUOTA_STRING, SQLParser.IDENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1911
                self.ident()
                pass
            elif token in [SQLParser.QUOTA_STRING, SQLParser.DOUBLE_QUOTA_STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1912
                self.string_literal()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Reserved_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(SQLParser.ALL, 0)

        def AND(self):
            return self.getToken(SQLParser.AND, 0)

        def AS(self):
            return self.getToken(SQLParser.AS, 0)

        def ASC(self):
            return self.getToken(SQLParser.ASC, 0)

        def BETWEEN(self):
            return self.getToken(SQLParser.BETWEEN, 0)

        def BIGINT(self):
            return self.getToken(SQLParser.BIGINT, 0)

        def BINARY(self):
            return self.getToken(SQLParser.BINARY, 0)

        def BLOB(self):
            return self.getToken(SQLParser.BLOB, 0)

        def BOTH(self):
            return self.getToken(SQLParser.BOTH, 0)

        def BY(self):
            return self.getToken(SQLParser.BY, 0)

        def CASE(self):
            return self.getToken(SQLParser.CASE, 0)

        def CHAR(self):
            return self.getToken(SQLParser.CHAR, 0)

        def COLLATE(self):
            return self.getToken(SQLParser.COLLATE, 0)

        def CONVERT(self):
            return self.getToken(SQLParser.CONVERT, 0)

        def CREATE(self):
            return self.getToken(SQLParser.CREATE, 0)

        def CROSS(self):
            return self.getToken(SQLParser.CROSS, 0)

        def DATABASE(self):
            return self.getToken(SQLParser.DATABASE, 0)

        def DAY_HOUR(self):
            return self.getToken(SQLParser.DAY_HOUR, 0)

        def DAY_MICROSECOND(self):
            return self.getToken(SQLParser.DAY_MICROSECOND, 0)

        def DAY_MINUTE(self):
            return self.getToken(SQLParser.DAY_MINUTE, 0)

        def DAY_SECOND(self):
            return self.getToken(SQLParser.DAY_SECOND, 0)

        def DECIMAL(self):
            return self.getToken(SQLParser.DECIMAL, 0)

        def DEFAULT(self):
            return self.getToken(SQLParser.DEFAULT, 0)

        def DELAYED(self):
            return self.getToken(SQLParser.DELAYED, 0)

        def DELETE(self):
            return self.getToken(SQLParser.DELETE, 0)

        def DESC(self):
            return self.getToken(SQLParser.DESC, 0)

        def DISTINCT(self):
            return self.getToken(SQLParser.DISTINCT, 0)

        def DISTINCTROW(self):
            return self.getToken(SQLParser.DISTINCTROW, 0)

        def DIV(self):
            return self.getToken(SQLParser.DIV, 0)

        def DOUBLE(self):
            return self.getToken(SQLParser.DOUBLE, 0)

        def ELSE(self):
            return self.getToken(SQLParser.ELSE, 0)

        def ENCLOSED(self):
            return self.getToken(SQLParser.ENCLOSED, 0)

        def ESCAPED(self):
            return self.getToken(SQLParser.ESCAPED, 0)

        def EXISTS(self):
            return self.getToken(SQLParser.EXISTS, 0)

        def FLOAT(self):
            return self.getToken(SQLParser.FLOAT, 0)

        def FOR(self):
            return self.getToken(SQLParser.FOR, 0)

        def FORCE(self):
            return self.getToken(SQLParser.FORCE, 0)

        def FROM(self):
            return self.getToken(SQLParser.FROM, 0)

        def FULLTEXT(self):
            return self.getToken(SQLParser.FULLTEXT, 0)

        def GROUP(self):
            return self.getToken(SQLParser.GROUP, 0)

        def HAVING(self):
            return self.getToken(SQLParser.HAVING, 0)

        def HIGH_PRIORITY(self):
            return self.getToken(SQLParser.HIGH_PRIORITY, 0)

        def HOUR_MICROSECOND(self):
            return self.getToken(SQLParser.HOUR_MICROSECOND, 0)

        def HOUR_MINUTE(self):
            return self.getToken(SQLParser.HOUR_MINUTE, 0)

        def HOUR_SECOND(self):
            return self.getToken(SQLParser.HOUR_SECOND, 0)

        def IF(self):
            return self.getToken(SQLParser.IF, 0)

        def IGNORE(self):
            return self.getToken(SQLParser.IGNORE, 0)

        def IN(self):
            return self.getToken(SQLParser.IN, 0)

        def INDEX(self):
            return self.getToken(SQLParser.INDEX, 0)

        def INNER(self):
            return self.getToken(SQLParser.INNER, 0)

        def INSERT(self):
            return self.getToken(SQLParser.INSERT, 0)

        def INTEGER(self):
            return self.getToken(SQLParser.INTEGER, 0)

        def INTERVAL(self):
            return self.getToken(SQLParser.INTERVAL, 0)

        def INTO(self):
            return self.getToken(SQLParser.INTO, 0)

        def JOIN(self):
            return self.getToken(SQLParser.JOIN, 0)

        def KEY(self):
            return self.getToken(SQLParser.KEY, 0)

        def LEADING(self):
            return self.getToken(SQLParser.LEADING, 0)

        def LEFT(self):
            return self.getToken(SQLParser.LEFT, 0)

        def LIKE(self):
            return self.getToken(SQLParser.LIKE, 0)

        def LIMIT(self):
            return self.getToken(SQLParser.LIMIT, 0)

        def LINES(self):
            return self.getToken(SQLParser.LINES, 0)

        def LOCK(self):
            return self.getToken(SQLParser.LOCK, 0)

        def LONGBLOB(self):
            return self.getToken(SQLParser.LONGBLOB, 0)

        def LONGTEXT(self):
            return self.getToken(SQLParser.LONGTEXT, 0)

        def LOW_PRIORITY(self):
            return self.getToken(SQLParser.LOW_PRIORITY, 0)

        def MEDIUMBLOB(self):
            return self.getToken(SQLParser.MEDIUMBLOB, 0)

        def MEDIUMINT(self):
            return self.getToken(SQLParser.MEDIUMINT, 0)

        def MEDIUMTEXT(self):
            return self.getToken(SQLParser.MEDIUMTEXT, 0)

        def MINUTE_MICROSECOND(self):
            return self.getToken(SQLParser.MINUTE_MICROSECOND, 0)

        def MINUTE_SECOND(self):
            return self.getToken(SQLParser.MINUTE_SECOND, 0)

        def MOD(self):
            return self.getToken(SQLParser.MOD, 0)

        def NATURAL(self):
            return self.getToken(SQLParser.NATURAL, 0)

        def NOT(self):
            return self.getToken(SQLParser.NOT, 0)

        def NULLX(self):
            return self.getToken(SQLParser.NULLX, 0)

        def ON(self):
            return self.getToken(SQLParser.ON, 0)

        def OPTIONALLY(self):
            return self.getToken(SQLParser.OPTIONALLY, 0)

        def OR(self):
            return self.getToken(SQLParser.OR, 0)

        def ORDER(self):
            return self.getToken(SQLParser.ORDER, 0)

        def OUTER(self):
            return self.getToken(SQLParser.OUTER, 0)

        def OUTFILE(self):
            return self.getToken(SQLParser.OUTFILE, 0)

        def PRIMARY(self):
            return self.getToken(SQLParser.PRIMARY, 0)

        def REAL(self):
            return self.getToken(SQLParser.REAL, 0)

        def REGEXP(self):
            return self.getToken(SQLParser.REGEXP, 0)

        def REPLACE(self):
            return self.getToken(SQLParser.REPLACE, 0)

        def RIGHT(self):
            return self.getToken(SQLParser.RIGHT, 0)

        def ROW(self):
            return self.getToken(SQLParser.ROW, 0)

        def SCHEMA(self):
            return self.getToken(SQLParser.SCHEMA, 0)

        def SECOND_MICROSECOND(self):
            return self.getToken(SQLParser.SECOND_MICROSECOND, 0)

        def SELECT(self):
            return self.getToken(SQLParser.SELECT, 0)

        def SET(self):
            return self.getToken(SQLParser.SET, 0)

        def SMALLINT(self):
            return self.getToken(SQLParser.SMALLINT, 0)

        def SQL_BIG_RESULT(self):
            return self.getToken(SQLParser.SQL_BIG_RESULT, 0)

        def SQL_CALC_FOUND_ROWS(self):
            return self.getToken(SQLParser.SQL_CALC_FOUND_ROWS, 0)

        def SQL_SMALL_RESULT(self):
            return self.getToken(SQLParser.SQL_SMALL_RESULT, 0)

        def STARTING(self):
            return self.getToken(SQLParser.STARTING, 0)

        def STRAIGHT_JOIN(self):
            return self.getToken(SQLParser.STRAIGHT_JOIN, 0)

        def TABLE(self):
            return self.getToken(SQLParser.TABLE, 0)

        def TERMINATED(self):
            return self.getToken(SQLParser.TERMINATED, 0)

        def THEN(self):
            return self.getToken(SQLParser.THEN, 0)

        def TINYBLOB(self):
            return self.getToken(SQLParser.TINYBLOB, 0)

        def TINYINT(self):
            return self.getToken(SQLParser.TINYINT, 0)

        def TINYTEXT(self):
            return self.getToken(SQLParser.TINYTEXT, 0)

        def TRAILING(self):
            return self.getToken(SQLParser.TRAILING, 0)

        def UNION(self):
            return self.getToken(SQLParser.UNION, 0)

        def UNIQUE(self):
            return self.getToken(SQLParser.UNIQUE, 0)

        def UPDATE(self):
            return self.getToken(SQLParser.UPDATE, 0)

        def USE(self):
            return self.getToken(SQLParser.USE, 0)

        def USING(self):
            return self.getToken(SQLParser.USING, 0)

        def VALUES(self):
            return self.getToken(SQLParser.VALUES, 0)

        def VARBINARY(self):
            return self.getToken(SQLParser.VARBINARY, 0)

        def VARCHAR(self):
            return self.getToken(SQLParser.VARCHAR, 0)

        def WHEN(self):
            return self.getToken(SQLParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(SQLParser.WHERE, 0)

        def XOR(self):
            return self.getToken(SQLParser.XOR, 0)

        def YEAR_MONTH(self):
            return self.getToken(SQLParser.YEAR_MONTH, 0)

        def ZEROFILL(self):
            return self.getToken(SQLParser.ZEROFILL, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_reserved_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReserved_keyword" ):
                listener.enterReserved_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReserved_keyword" ):
                listener.exitReserved_keyword(self)




    def reserved_keyword(self):

        localctx = SQLParser.Reserved_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_reserved_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1915
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLParser.ALL) | (1 << SQLParser.AS) | (1 << SQLParser.ASC) | (1 << SQLParser.BETWEEN) | (1 << SQLParser.BIGINT) | (1 << SQLParser.BINARY) | (1 << SQLParser.BLOB) | (1 << SQLParser.BOTH) | (1 << SQLParser.BY) | (1 << SQLParser.CASE) | (1 << SQLParser.CHAR) | (1 << SQLParser.COLLATE) | (1 << SQLParser.CONVERT) | (1 << SQLParser.CREATE) | (1 << SQLParser.CROSS) | (1 << SQLParser.DATABASE) | (1 << SQLParser.DAY_HOUR) | (1 << SQLParser.DAY_MICROSECOND) | (1 << SQLParser.DAY_MINUTE) | (1 << SQLParser.DAY_SECOND) | (1 << SQLParser.DECIMAL) | (1 << SQLParser.DEFAULT) | (1 << SQLParser.DELAYED) | (1 << SQLParser.DELETE) | (1 << SQLParser.DESC) | (1 << SQLParser.DISTINCT) | (1 << SQLParser.DISTINCTROW) | (1 << SQLParser.DIV) | (1 << SQLParser.DOUBLE) | (1 << SQLParser.ELSE) | (1 << SQLParser.ENCLOSED) | (1 << SQLParser.ESCAPED) | (1 << SQLParser.EXISTS) | (1 << SQLParser.FLOAT) | (1 << SQLParser.FOR) | (1 << SQLParser.FORCE) | (1 << SQLParser.FROM) | (1 << SQLParser.FULLTEXT) | (1 << SQLParser.GROUP) | (1 << SQLParser.HAVING) | (1 << SQLParser.HIGH_PRIORITY) | (1 << SQLParser.HOUR_MICROSECOND) | (1 << SQLParser.HOUR_MINUTE) | (1 << SQLParser.HOUR_SECOND) | (1 << SQLParser.IF) | (1 << SQLParser.IGNORE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SQLParser.IN - 64)) | (1 << (SQLParser.INDEX - 64)) | (1 << (SQLParser.INNER - 64)) | (1 << (SQLParser.INSERT - 64)) | (1 << (SQLParser.INTEGER - 64)) | (1 << (SQLParser.INTERVAL - 64)) | (1 << (SQLParser.INTO - 64)) | (1 << (SQLParser.JOIN - 64)) | (1 << (SQLParser.KEY - 64)) | (1 << (SQLParser.LEADING - 64)) | (1 << (SQLParser.LEFT - 64)) | (1 << (SQLParser.LIKE - 64)) | (1 << (SQLParser.LIMIT - 64)) | (1 << (SQLParser.LINES - 64)) | (1 << (SQLParser.LOCK - 64)) | (1 << (SQLParser.LONGBLOB - 64)) | (1 << (SQLParser.LONGTEXT - 64)) | (1 << (SQLParser.LOW_PRIORITY - 64)) | (1 << (SQLParser.MEDIUMBLOB - 64)) | (1 << (SQLParser.MEDIUMINT - 64)) | (1 << (SQLParser.MEDIUMTEXT - 64)) | (1 << (SQLParser.MINUTE_MICROSECOND - 64)) | (1 << (SQLParser.MINUTE_SECOND - 64)) | (1 << (SQLParser.MOD - 64)) | (1 << (SQLParser.NATURAL - 64)) | (1 << (SQLParser.NOT - 64)) | (1 << (SQLParser.NULLX - 64)) | (1 << (SQLParser.ON - 64)) | (1 << (SQLParser.OPTIONALLY - 64)) | (1 << (SQLParser.ORDER - 64)) | (1 << (SQLParser.OUTER - 64)) | (1 << (SQLParser.OUTFILE - 64)) | (1 << (SQLParser.PRIMARY - 64)) | (1 << (SQLParser.REAL - 64)) | (1 << (SQLParser.REGEXP - 64)) | (1 << (SQLParser.REPLACE - 64)) | (1 << (SQLParser.RIGHT - 64)) | (1 << (SQLParser.ROW - 64)) | (1 << (SQLParser.SCHEMA - 64)) | (1 << (SQLParser.SECOND_MICROSECOND - 64)) | (1 << (SQLParser.SELECT - 64)) | (1 << (SQLParser.SET - 64)) | (1 << (SQLParser.SMALLINT - 64)) | (1 << (SQLParser.SQL_BIG_RESULT - 64)) | (1 << (SQLParser.SQL_CALC_FOUND_ROWS - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SQLParser.SQL_SMALL_RESULT - 128)) | (1 << (SQLParser.STARTING - 128)) | (1 << (SQLParser.STRAIGHT_JOIN - 128)) | (1 << (SQLParser.TABLE - 128)) | (1 << (SQLParser.TERMINATED - 128)) | (1 << (SQLParser.THEN - 128)) | (1 << (SQLParser.TINYBLOB - 128)) | (1 << (SQLParser.TINYINT - 128)) | (1 << (SQLParser.TINYTEXT - 128)) | (1 << (SQLParser.TRAILING - 128)) | (1 << (SQLParser.UNION - 128)) | (1 << (SQLParser.UNIQUE - 128)) | (1 << (SQLParser.UPDATE - 128)) | (1 << (SQLParser.USE - 128)) | (1 << (SQLParser.USING - 128)) | (1 << (SQLParser.VALUES - 128)) | (1 << (SQLParser.VARBINARY - 128)) | (1 << (SQLParser.VARCHAR - 128)) | (1 << (SQLParser.WHEN - 128)) | (1 << (SQLParser.WHERE - 128)) | (1 << (SQLParser.XOR - 128)) | (1 << (SQLParser.YEAR_MONTH - 128)) | (1 << (SQLParser.ZEROFILL - 128)))) != 0) or _la==SQLParser.AND or _la==SQLParser.OR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unreserved_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANY(self):
            return self.getToken(SQLParser.ANY, 0)

        def AUTO_INCREMENT(self):
            return self.getToken(SQLParser.AUTO_INCREMENT, 0)

        def BIT(self):
            return self.getToken(SQLParser.BIT, 0)

        def BOOLEAN(self):
            return self.getToken(SQLParser.BOOLEAN, 0)

        def COMMENT(self):
            return self.getToken(SQLParser.COMMENT, 0)

        def COUNT(self):
            return self.getToken(SQLParser.COUNT, 0)

        def DATE(self):
            return self.getToken(SQLParser.DATE, 0)

        def DATETIME(self):
            return self.getToken(SQLParser.DATETIME, 0)

        def DAY(self):
            return self.getToken(SQLParser.DAY, 0)

        def DUMPFILE(self):
            return self.getToken(SQLParser.DUMPFILE, 0)

        def END(self):
            return self.getToken(SQLParser.END, 0)

        def ENUM(self):
            return self.getToken(SQLParser.ENUM, 0)

        def ESCAPE(self):
            return self.getToken(SQLParser.ESCAPE, 0)

        def FIELDS(self):
            return self.getToken(SQLParser.FIELDS, 0)

        def HOUR(self):
            return self.getToken(SQLParser.HOUR, 0)

        def MICROSECOND(self):
            return self.getToken(SQLParser.MICROSECOND, 0)

        def MINUTE(self):
            return self.getToken(SQLParser.MINUTE, 0)

        def MODE(self):
            return self.getToken(SQLParser.MODE, 0)

        def MONTH(self):
            return self.getToken(SQLParser.MONTH, 0)

        def NCHAR(self):
            return self.getToken(SQLParser.NCHAR, 0)

        def OFFSET(self):
            return self.getToken(SQLParser.OFFSET, 0)

        def ONDUPLICATE(self):
            return self.getToken(SQLParser.ONDUPLICATE, 0)

        def PARTITION(self):
            return self.getToken(SQLParser.PARTITION, 0)

        def POSITION(self):
            return self.getToken(SQLParser.POSITION, 0)

        def QUARTER(self):
            return self.getToken(SQLParser.QUARTER, 0)

        def QUICK(self):
            return self.getToken(SQLParser.QUICK, 0)

        def SECOND(self):
            return self.getToken(SQLParser.SECOND, 0)

        def SHARE(self):
            return self.getToken(SQLParser.SHARE, 0)

        def SIGNED(self):
            return self.getToken(SQLParser.SIGNED, 0)

        def SOME(self):
            return self.getToken(SQLParser.SOME, 0)

        def SOUNDS(self):
            return self.getToken(SQLParser.SOUNDS, 0)

        def SUBSTRING(self):
            return self.getToken(SQLParser.SUBSTRING, 0)

        def TEMPORARY(self):
            return self.getToken(SQLParser.TEMPORARY, 0)

        def TEXT(self):
            return self.getToken(SQLParser.TEXT, 0)

        def TIME(self):
            return self.getToken(SQLParser.TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(SQLParser.TIMESTAMP, 0)

        def TRIM(self):
            return self.getToken(SQLParser.TRIM, 0)

        def UNICODE(self):
            return self.getToken(SQLParser.UNICODE, 0)

        def UNSIGNED(self):
            return self.getToken(SQLParser.UNSIGNED, 0)

        def WEEK(self):
            return self.getToken(SQLParser.WEEK, 0)

        def YEAR(self):
            return self.getToken(SQLParser.YEAR, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_unreserved_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnreserved_keyword" ):
                listener.enterUnreserved_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnreserved_keyword" ):
                listener.exitUnreserved_keyword(self)




    def unreserved_keyword(self):

        localctx = SQLParser.Unreserved_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_unreserved_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1917
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLParser.ANY) | (1 << SQLParser.AUTO_INCREMENT) | (1 << SQLParser.BIT) | (1 << SQLParser.BOOLEAN) | (1 << SQLParser.COMMENT) | (1 << SQLParser.COUNT) | (1 << SQLParser.DATE) | (1 << SQLParser.DATETIME) | (1 << SQLParser.DAY) | (1 << SQLParser.DUMPFILE) | (1 << SQLParser.END) | (1 << SQLParser.ENUM) | (1 << SQLParser.ESCAPE) | (1 << SQLParser.FIELDS) | (1 << SQLParser.HOUR))) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (SQLParser.MICROSECOND - 84)) | (1 << (SQLParser.MINUTE - 84)) | (1 << (SQLParser.MODE - 84)) | (1 << (SQLParser.MONTH - 84)) | (1 << (SQLParser.NCHAR - 84)) | (1 << (SQLParser.OFFSET - 84)) | (1 << (SQLParser.ONDUPLICATE - 84)) | (1 << (SQLParser.PARTITION - 84)) | (1 << (SQLParser.POSITION - 84)) | (1 << (SQLParser.QUARTER - 84)) | (1 << (SQLParser.QUICK - 84)) | (1 << (SQLParser.SECOND - 84)) | (1 << (SQLParser.SHARE - 84)) | (1 << (SQLParser.SIGNED - 84)) | (1 << (SQLParser.SOME - 84)) | (1 << (SQLParser.SOUNDS - 84)) | (1 << (SQLParser.TEMPORARY - 84)) | (1 << (SQLParser.TEXT - 84)) | (1 << (SQLParser.TIME - 84)) | (1 << (SQLParser.TIMESTAMP - 84)) | (1 << (SQLParser.UNICODE - 84)) | (1 << (SQLParser.UNSIGNED - 84)))) != 0) or ((((_la - 152)) & ~0x3f) == 0 and ((1 << (_la - 152)) & ((1 << (SQLParser.WEEK - 152)) | (1 << (SQLParser.YEAR - 152)) | (1 << (SQLParser.SUBSTRING - 152)) | (1 << (SQLParser.TRIM - 152)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntervalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DAY_HOUR(self):
            return self.getToken(SQLParser.DAY_HOUR, 0)

        def DAY_MICROSECOND(self):
            return self.getToken(SQLParser.DAY_MICROSECOND, 0)

        def DAY_MINUTE(self):
            return self.getToken(SQLParser.DAY_MINUTE, 0)

        def DAY_SECOND(self):
            return self.getToken(SQLParser.DAY_SECOND, 0)

        def HOUR_MICROSECOND(self):
            return self.getToken(SQLParser.HOUR_MICROSECOND, 0)

        def HOUR_MINUTE(self):
            return self.getToken(SQLParser.HOUR_MINUTE, 0)

        def HOUR_SECOND(self):
            return self.getToken(SQLParser.HOUR_SECOND, 0)

        def MINUTE_MICROSECOND(self):
            return self.getToken(SQLParser.MINUTE_MICROSECOND, 0)

        def MINUTE_SECOND(self):
            return self.getToken(SQLParser.MINUTE_SECOND, 0)

        def SECOND_MICROSECOND(self):
            return self.getToken(SQLParser.SECOND_MICROSECOND, 0)

        def YEAR_MONTH(self):
            return self.getToken(SQLParser.YEAR_MONTH, 0)

        def DAY(self):
            return self.getToken(SQLParser.DAY, 0)

        def WEEK(self):
            return self.getToken(SQLParser.WEEK, 0)

        def HOUR(self):
            return self.getToken(SQLParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(SQLParser.MINUTE, 0)

        def MONTH(self):
            return self.getToken(SQLParser.MONTH, 0)

        def QUARTER(self):
            return self.getToken(SQLParser.QUARTER, 0)

        def SECOND(self):
            return self.getToken(SQLParser.SECOND, 0)

        def MICROSECOND(self):
            return self.getToken(SQLParser.MICROSECOND, 0)

        def YEAR(self):
            return self.getToken(SQLParser.YEAR, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_interval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval" ):
                listener.enterInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval" ):
                listener.exitInterval(self)




    def interval(self):

        localctx = SQLParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_interval)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1919
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLParser.DAY) | (1 << SQLParser.DAY_HOUR) | (1 << SQLParser.DAY_MICROSECOND) | (1 << SQLParser.DAY_MINUTE) | (1 << SQLParser.DAY_SECOND) | (1 << SQLParser.HOUR) | (1 << SQLParser.HOUR_MICROSECOND) | (1 << SQLParser.HOUR_MINUTE) | (1 << SQLParser.HOUR_SECOND))) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (SQLParser.MICROSECOND - 84)) | (1 << (SQLParser.MINUTE - 84)) | (1 << (SQLParser.MINUTE_MICROSECOND - 84)) | (1 << (SQLParser.MINUTE_SECOND - 84)) | (1 << (SQLParser.MONTH - 84)) | (1 << (SQLParser.QUARTER - 84)) | (1 << (SQLParser.SECOND - 84)) | (1 << (SQLParser.SECOND_MICROSECOND - 84)))) != 0) or ((((_la - 152)) & ~0x3f) == 0 and ((1 << (_la - 152)) & ((1 << (SQLParser.WEEK - 152)) | (1 << (SQLParser.YEAR - 152)) | (1 << (SQLParser.YEAR_MONTH - 152)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_call_specific(self):
            return self.getTypedRuleContext(SQLParser.Function_call_specificContext,0)


        def function_call_generic(self):
            return self.getTypedRuleContext(SQLParser.Function_call_genericContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)




    def functionCall(self):

        localctx = SQLParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_functionCall)
        try:
            self.state = 1923
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1921
                self.function_call_specific()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1922
                self.function_call_generic()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_call_genericContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ident(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.IdentContext)
            else:
                return self.getTypedRuleContext(SQLParser.IdentContext,i)


        def opt_udf_expr_list(self):
            return self.getTypedRuleContext(SQLParser.Opt_udf_expr_listContext,0)


        def opt_expr_list(self):
            return self.getTypedRuleContext(SQLParser.Opt_expr_listContext,0)


        def function_name(self):
            return self.getTypedRuleContext(SQLParser.Function_nameContext,0)


        def SYSVAR(self):
            return self.getToken(SQLParser.SYSVAR, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_function_call_generic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call_generic" ):
                listener.enterFunction_call_generic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call_generic" ):
                listener.exitFunction_call_generic(self)




    def function_call_generic(self):

        localctx = SQLParser.Function_call_genericContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_function_call_generic)
        self._la = 0 # Token type
        try:
            self.state = 1948
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1925
                self.ident()
                self.state = 1926
                self.match(SQLParser.LR_BRACKET)
                self.state = 1927
                self.opt_udf_expr_list()
                self.state = 1928
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1930
                self.ident()
                self.state = 1935
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLParser.DOT:
                    self.state = 1931
                    self.match(SQLParser.DOT)
                    self.state = 1932
                    self.ident()
                    self.state = 1937
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1938
                self.match(SQLParser.LR_BRACKET)
                self.state = 1939
                self.opt_expr_list()
                self.state = 1940
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1942
                self.function_name()
                self.state = 1943
                self.match(SQLParser.LR_BRACKET)
                self.state = 1944
                self.opt_expr_list()
                self.state = 1945
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1947
                self.match(SQLParser.SYSVAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(SQLParser.IF, 0)

        def LIKE(self):
            return self.getToken(SQLParser.LIKE, 0)

        def ASCII(self):
            return self.getToken(SQLParser.ASCII, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_name" ):
                listener.enterFunction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_name" ):
                listener.exitFunction_name(self)




    def function_name(self):

        localctx = SQLParser.Function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_function_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1950
            _la = self._input.LA(1)
            if not(_la==SQLParser.IF or _la==SQLParser.LIKE or _la==SQLParser.ASCII):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_expr_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr_list(self):
            return self.getTypedRuleContext(SQLParser.Expr_listContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_opt_expr_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_expr_list" ):
                listener.enterOpt_expr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_expr_list" ):
                listener.exitOpt_expr_list(self)




    def opt_expr_list(self):

        localctx = SQLParser.Opt_expr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_opt_expr_list)
        try:
            self.state = 1954
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.RR_BRACKET]:
                self.enterOuterAlt(localctx, 1)

                pass
            elif token in [SQLParser.ANY, SQLParser.AUTO_INCREMENT, SQLParser.BINARY, SQLParser.BIT, SQLParser.BOOLEAN, SQLParser.CASE, SQLParser.CHAR, SQLParser.COMMENT, SQLParser.CONVERT, SQLParser.COUNT, SQLParser.DATABASE, SQLParser.DATE, SQLParser.DATETIME, SQLParser.DAY, SQLParser.DUMPFILE, SQLParser.END, SQLParser.ENUM, SQLParser.ESCAPE, SQLParser.EXISTS, SQLParser.FIELDS, SQLParser.HOUR, SQLParser.IF, SQLParser.INTERVAL, SQLParser.LIKE, SQLParser.MICROSECOND, SQLParser.MINUTE, SQLParser.MODE, SQLParser.MONTH, SQLParser.NCHAR, SQLParser.NOT, SQLParser.NULLX, SQLParser.OFFSET, SQLParser.ONDUPLICATE, SQLParser.PARTITION, SQLParser.POSITION, SQLParser.QUARTER, SQLParser.QUICK, SQLParser.ROW, SQLParser.SECOND, SQLParser.SHARE, SQLParser.SIGNED, SQLParser.SOME, SQLParser.SOUNDS, SQLParser.TEMPORARY, SQLParser.TEXT, SQLParser.TIME, SQLParser.TIMESTAMP, SQLParser.UNICODE, SQLParser.UNSIGNED, SQLParser.WEEK, SQLParser.YEAR, SQLParser.ASCII, SQLParser.SUBSTRING, SQLParser.TRIM, SQLParser.CAST, SQLParser.EXTRACT, SQLParser.WEIGHT_STRING, SQLParser.BOOL, SQLParser.NUM, SQLParser.LR_BRACKET, SQLParser.STAR, SQLParser.PLUS, SQLParser.MINUS, SQLParser.BIT_NOT, SQLParser.EXCLAMATION, SQLParser.UNDERLINE, SQLParser.QUOTA_STRING, SQLParser.DOUBLE_QUOTA_STRING, SQLParser.BQUOTA_STRING, SQLParser.HEX_STRING, SQLParser.BIT_STRING, SQLParser.START_NATIONAL_STRING_LITERAL, SQLParser.IDENT, SQLParser.USERVAR, SQLParser.SYSVAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1953
                self.expr_list(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_call_specificContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CAST(self):
            return self.getToken(SQLParser.CAST, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLParser.ExprContext,i)


        def AS(self):
            return self.getToken(SQLParser.AS, 0)

        def cast_type(self):
            return self.getTypedRuleContext(SQLParser.Cast_typeContext,0)


        def CASE(self):
            return self.getToken(SQLParser.CASE, 0)

        def opt_expr(self):
            return self.getTypedRuleContext(SQLParser.Opt_exprContext,0)


        def when_list(self):
            return self.getTypedRuleContext(SQLParser.When_listContext,0)


        def opt_else(self):
            return self.getTypedRuleContext(SQLParser.Opt_elseContext,0)


        def END(self):
            return self.getToken(SQLParser.END, 0)

        def CONVERT(self):
            return self.getToken(SQLParser.CONVERT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMMA)
            else:
                return self.getToken(SQLParser.COMMA, i)

        def USING(self):
            return self.getToken(SQLParser.USING, 0)

        def charset_name(self):
            return self.getTypedRuleContext(SQLParser.Charset_nameContext,0)


        def INTEGER(self):
            return self.getToken(SQLParser.INTEGER, 0)

        def CHAR(self):
            return self.getToken(SQLParser.CHAR, 0)

        def expr_list(self):
            return self.getTypedRuleContext(SQLParser.Expr_listContext,0)


        def COUNT(self):
            return self.getToken(SQLParser.COUNT, 0)

        def STAR(self):
            return self.getToken(SQLParser.STAR, 0)

        def ALL(self):
            return self.getToken(SQLParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(SQLParser.DISTINCT, 0)

        def DATABASE(self):
            return self.getToken(SQLParser.DATABASE, 0)

        def EXISTS(self):
            return self.getToken(SQLParser.EXISTS, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLParser.Select_stmtContext,0)


        def EXTRACT(self):
            return self.getToken(SQLParser.EXTRACT, 0)

        def interval(self):
            return self.getTypedRuleContext(SQLParser.IntervalContext,0)


        def FROM(self):
            return self.getToken(SQLParser.FROM, 0)

        def POSITION(self):
            return self.getToken(SQLParser.POSITION, 0)

        def IN(self):
            return self.getToken(SQLParser.IN, 0)

        def ROW(self):
            return self.getToken(SQLParser.ROW, 0)

        def SUBSTRING(self):
            return self.getToken(SQLParser.SUBSTRING, 0)

        def FOR(self):
            return self.getToken(SQLParser.FOR, 0)

        def TRIM(self):
            return self.getToken(SQLParser.TRIM, 0)

        def BOTH(self):
            return self.getToken(SQLParser.BOTH, 0)

        def LEADING(self):
            return self.getToken(SQLParser.LEADING, 0)

        def TRAILING(self):
            return self.getToken(SQLParser.TRAILING, 0)

        def WEIGHT_STRING(self):
            return self.getToken(SQLParser.WEIGHT_STRING, 0)

        def NUM(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.NUM)
            else:
                return self.getToken(SQLParser.NUM, i)

        def BINARY(self):
            return self.getToken(SQLParser.BINARY, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_function_call_specific

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call_specific" ):
                listener.enterFunction_call_specific(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call_specific" ):
                listener.exitFunction_call_specific(self)




    def function_call_specific(self):

        localctx = SQLParser.Function_call_specificContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_function_call_specific)
        try:
            self.state = 2182
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1956
                self.match(SQLParser.CAST)
                self.state = 1957
                self.match(SQLParser.LR_BRACKET)
                self.state = 1958
                self.expr(0)
                self.state = 1959
                self.match(SQLParser.AS)
                self.state = 1960
                self.cast_type()
                self.state = 1961
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1963
                self.match(SQLParser.CASE)
                self.state = 1964
                self.opt_expr()
                self.state = 1965
                self.when_list(0)
                self.state = 1966
                self.opt_else()
                self.state = 1967
                self.match(SQLParser.END)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1969
                self.match(SQLParser.CONVERT)
                self.state = 1970
                self.match(SQLParser.LR_BRACKET)
                self.state = 1971
                self.expr(0)
                self.state = 1972
                self.match(SQLParser.COMMA)
                self.state = 1973
                self.cast_type()
                self.state = 1974
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1976
                self.match(SQLParser.CONVERT)
                self.state = 1977
                self.match(SQLParser.LR_BRACKET)
                self.state = 1978
                self.expr(0)
                self.state = 1979
                self.match(SQLParser.USING)
                self.state = 1980
                self.charset_name()
                self.state = 1981
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1983
                self.match(SQLParser.CONVERT)
                self.state = 1984
                self.match(SQLParser.LR_BRACKET)
                self.state = 1985
                self.match(SQLParser.INTEGER)
                self.state = 1986
                self.match(SQLParser.COMMA)
                self.state = 1987
                self.expr(0)
                self.state = 1988
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1990
                self.match(SQLParser.CHAR)
                self.state = 1991
                self.match(SQLParser.LR_BRACKET)
                self.state = 1992
                self.expr_list(0)
                self.state = 1993
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1995
                self.match(SQLParser.CHAR)
                self.state = 1996
                self.match(SQLParser.LR_BRACKET)
                self.state = 1997
                self.expr_list(0)
                self.state = 1998
                self.match(SQLParser.USING)
                self.state = 1999
                self.charset_name()
                self.state = 2000
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2002
                self.match(SQLParser.COUNT)
                self.state = 2003
                self.match(SQLParser.LR_BRACKET)
                self.state = 2004
                self.match(SQLParser.STAR)
                self.state = 2005
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2006
                self.match(SQLParser.COUNT)
                self.state = 2007
                self.match(SQLParser.LR_BRACKET)
                self.state = 2008
                self.match(SQLParser.ALL)
                self.state = 2009
                self.match(SQLParser.STAR)
                self.state = 2010
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2011
                self.match(SQLParser.COUNT)
                self.state = 2012
                self.match(SQLParser.LR_BRACKET)
                self.state = 2013
                self.expr(0)
                self.state = 2014
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2016
                self.match(SQLParser.COUNT)
                self.state = 2017
                self.match(SQLParser.LR_BRACKET)
                self.state = 2018
                self.match(SQLParser.ALL)
                self.state = 2019
                self.expr(0)
                self.state = 2020
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2022
                self.match(SQLParser.COUNT)
                self.state = 2023
                self.match(SQLParser.LR_BRACKET)
                self.state = 2024
                self.match(SQLParser.DISTINCT)
                self.state = 2025
                self.expr_list(0)
                self.state = 2026
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2028
                self.match(SQLParser.DATABASE)
                self.state = 2029
                self.match(SQLParser.LR_BRACKET)
                self.state = 2030
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2031
                self.match(SQLParser.EXISTS)
                self.state = 2032
                self.match(SQLParser.LR_BRACKET)
                self.state = 2033
                self.select_stmt()
                self.state = 2034
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2036
                self.match(SQLParser.EXTRACT)
                self.state = 2037
                self.match(SQLParser.LR_BRACKET)
                self.state = 2038
                self.interval()
                self.state = 2039
                self.match(SQLParser.FROM)
                self.state = 2040
                self.expr(0)
                self.state = 2041
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2043
                self.match(SQLParser.POSITION)
                self.state = 2044
                self.match(SQLParser.LR_BRACKET)
                self.state = 2045
                self.expr(0)
                self.state = 2046
                self.match(SQLParser.IN)
                self.state = 2047
                self.expr(0)
                self.state = 2048
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2050
                self.match(SQLParser.ROW)
                self.state = 2051
                self.match(SQLParser.LR_BRACKET)
                self.state = 2052
                self.expr(0)
                self.state = 2053
                self.match(SQLParser.COMMA)
                self.state = 2054
                self.expr_list(0)
                self.state = 2055
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2057
                self.match(SQLParser.SUBSTRING)
                self.state = 2058
                self.match(SQLParser.LR_BRACKET)
                self.state = 2059
                self.expr(0)
                self.state = 2060
                self.match(SQLParser.COMMA)
                self.state = 2061
                self.expr(0)
                self.state = 2062
                self.match(SQLParser.COMMA)
                self.state = 2063
                self.expr(0)
                self.state = 2064
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2066
                self.match(SQLParser.SUBSTRING)
                self.state = 2067
                self.match(SQLParser.LR_BRACKET)
                self.state = 2068
                self.expr(0)
                self.state = 2069
                self.match(SQLParser.COMMA)
                self.state = 2070
                self.expr(0)
                self.state = 2071
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 2073
                self.match(SQLParser.SUBSTRING)
                self.state = 2074
                self.match(SQLParser.LR_BRACKET)
                self.state = 2075
                self.expr(0)
                self.state = 2076
                self.match(SQLParser.FROM)
                self.state = 2077
                self.expr(0)
                self.state = 2078
                self.match(SQLParser.FOR)
                self.state = 2079
                self.expr(0)
                self.state = 2080
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 2082
                self.match(SQLParser.SUBSTRING)
                self.state = 2083
                self.match(SQLParser.LR_BRACKET)
                self.state = 2084
                self.expr(0)
                self.state = 2085
                self.match(SQLParser.FROM)
                self.state = 2086
                self.expr(0)
                self.state = 2087
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 2089
                self.match(SQLParser.TRIM)
                self.state = 2090
                self.match(SQLParser.LR_BRACKET)
                self.state = 2091
                self.expr(0)
                self.state = 2092
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 2094
                self.match(SQLParser.TRIM)
                self.state = 2095
                self.match(SQLParser.LR_BRACKET)
                self.state = 2096
                self.match(SQLParser.BOTH)
                self.state = 2097
                self.expr(0)
                self.state = 2098
                self.match(SQLParser.FROM)
                self.state = 2099
                self.expr(0)
                self.state = 2100
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 2102
                self.match(SQLParser.TRIM)
                self.state = 2103
                self.match(SQLParser.LR_BRACKET)
                self.state = 2104
                self.match(SQLParser.LEADING)
                self.state = 2105
                self.expr(0)
                self.state = 2106
                self.match(SQLParser.FROM)
                self.state = 2107
                self.expr(0)
                self.state = 2108
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 2110
                self.match(SQLParser.TRIM)
                self.state = 2111
                self.match(SQLParser.LR_BRACKET)
                self.state = 2112
                self.match(SQLParser.TRAILING)
                self.state = 2113
                self.expr(0)
                self.state = 2114
                self.match(SQLParser.FROM)
                self.state = 2115
                self.expr(0)
                self.state = 2116
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 2118
                self.match(SQLParser.TRIM)
                self.state = 2119
                self.match(SQLParser.LR_BRACKET)
                self.state = 2120
                self.match(SQLParser.BOTH)
                self.state = 2121
                self.match(SQLParser.FROM)
                self.state = 2122
                self.expr(0)
                self.state = 2123
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 2125
                self.match(SQLParser.TRIM)
                self.state = 2126
                self.match(SQLParser.LR_BRACKET)
                self.state = 2127
                self.match(SQLParser.LEADING)
                self.state = 2128
                self.match(SQLParser.FROM)
                self.state = 2129
                self.expr(0)
                self.state = 2130
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 2132
                self.match(SQLParser.TRIM)
                self.state = 2133
                self.match(SQLParser.LR_BRACKET)
                self.state = 2134
                self.match(SQLParser.TRAILING)
                self.state = 2135
                self.match(SQLParser.FROM)
                self.state = 2136
                self.expr(0)
                self.state = 2137
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 2139
                self.match(SQLParser.TRIM)
                self.state = 2140
                self.match(SQLParser.LR_BRACKET)
                self.state = 2141
                self.expr(0)
                self.state = 2142
                self.match(SQLParser.FROM)
                self.state = 2143
                self.expr(0)
                self.state = 2144
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 2146
                self.match(SQLParser.WEIGHT_STRING)
                self.state = 2147
                self.match(SQLParser.LR_BRACKET)
                self.state = 2148
                self.expr(0)
                self.state = 2149
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 2151
                self.match(SQLParser.WEIGHT_STRING)
                self.state = 2152
                self.match(SQLParser.LR_BRACKET)
                self.state = 2153
                self.expr(0)
                self.state = 2154
                self.match(SQLParser.AS)
                self.state = 2155
                self.match(SQLParser.CHAR)
                self.state = 2156
                self.match(SQLParser.LR_BRACKET)
                self.state = 2157
                self.match(SQLParser.NUM)
                self.state = 2158
                self.match(SQLParser.RR_BRACKET)
                self.state = 2159
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 2161
                self.match(SQLParser.WEIGHT_STRING)
                self.state = 2162
                self.match(SQLParser.LR_BRACKET)
                self.state = 2163
                self.expr(0)
                self.state = 2164
                self.match(SQLParser.AS)
                self.state = 2165
                self.match(SQLParser.BINARY)
                self.state = 2166
                self.match(SQLParser.LR_BRACKET)
                self.state = 2167
                self.match(SQLParser.NUM)
                self.state = 2168
                self.match(SQLParser.RR_BRACKET)
                self.state = 2169
                self.match(SQLParser.RR_BRACKET)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 2171
                self.match(SQLParser.WEIGHT_STRING)
                self.state = 2172
                self.match(SQLParser.LR_BRACKET)
                self.state = 2173
                self.expr(0)
                self.state = 2174
                self.match(SQLParser.COMMA)
                self.state = 2175
                self.match(SQLParser.NUM)
                self.state = 2176
                self.match(SQLParser.COMMA)
                self.state = 2177
                self.match(SQLParser.NUM)
                self.state = 2178
                self.match(SQLParser.COMMA)
                self.state = 2179
                self.match(SQLParser.NUM)
                self.state = 2180
                self.match(SQLParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_opt_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_expr" ):
                listener.enterOpt_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_expr" ):
                listener.exitOpt_expr(self)




    def opt_expr(self):

        localctx = SQLParser.Opt_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_opt_expr)
        try:
            self.state = 2186
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.WHEN]:
                self.enterOuterAlt(localctx, 1)

                pass
            elif token in [SQLParser.ANY, SQLParser.AUTO_INCREMENT, SQLParser.BINARY, SQLParser.BIT, SQLParser.BOOLEAN, SQLParser.CASE, SQLParser.CHAR, SQLParser.COMMENT, SQLParser.CONVERT, SQLParser.COUNT, SQLParser.DATABASE, SQLParser.DATE, SQLParser.DATETIME, SQLParser.DAY, SQLParser.DUMPFILE, SQLParser.END, SQLParser.ENUM, SQLParser.ESCAPE, SQLParser.EXISTS, SQLParser.FIELDS, SQLParser.HOUR, SQLParser.IF, SQLParser.INTERVAL, SQLParser.LIKE, SQLParser.MICROSECOND, SQLParser.MINUTE, SQLParser.MODE, SQLParser.MONTH, SQLParser.NCHAR, SQLParser.NOT, SQLParser.NULLX, SQLParser.OFFSET, SQLParser.ONDUPLICATE, SQLParser.PARTITION, SQLParser.POSITION, SQLParser.QUARTER, SQLParser.QUICK, SQLParser.ROW, SQLParser.SECOND, SQLParser.SHARE, SQLParser.SIGNED, SQLParser.SOME, SQLParser.SOUNDS, SQLParser.TEMPORARY, SQLParser.TEXT, SQLParser.TIME, SQLParser.TIMESTAMP, SQLParser.UNICODE, SQLParser.UNSIGNED, SQLParser.WEEK, SQLParser.YEAR, SQLParser.ASCII, SQLParser.SUBSTRING, SQLParser.TRIM, SQLParser.CAST, SQLParser.EXTRACT, SQLParser.WEIGHT_STRING, SQLParser.BOOL, SQLParser.NUM, SQLParser.LR_BRACKET, SQLParser.STAR, SQLParser.PLUS, SQLParser.MINUS, SQLParser.BIT_NOT, SQLParser.EXCLAMATION, SQLParser.UNDERLINE, SQLParser.QUOTA_STRING, SQLParser.DOUBLE_QUOTA_STRING, SQLParser.BQUOTA_STRING, SQLParser.HEX_STRING, SQLParser.BIT_STRING, SQLParser.START_NATIONAL_STRING_LITERAL, SQLParser.IDENT, SQLParser.USERVAR, SQLParser.SYSVAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2185
                self.expr(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class When_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(SQLParser.WHEN, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLParser.ExprContext,i)


        def THEN(self):
            return self.getToken(SQLParser.THEN, 0)

        def when_list(self):
            return self.getTypedRuleContext(SQLParser.When_listContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_when_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhen_list" ):
                listener.enterWhen_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhen_list" ):
                listener.exitWhen_list(self)



    def when_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLParser.When_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 276
        self.enterRecursionRule(localctx, 276, self.RULE_when_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2189
            self.match(SQLParser.WHEN)
            self.state = 2190
            self.expr(0)
            self.state = 2191
            self.match(SQLParser.THEN)
            self.state = 2192
            self.expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2202
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,142,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SQLParser.When_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_when_list)
                    self.state = 2194
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2195
                    self.match(SQLParser.WHEN)
                    self.state = 2196
                    self.expr(0)
                    self.state = 2197
                    self.match(SQLParser.THEN)
                    self.state = 2198
                    self.expr(0) 
                self.state = 2204
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,142,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Opt_elseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(SQLParser.ELSE, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLParser.ExprContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_opt_else

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_else" ):
                listener.enterOpt_else(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_else" ):
                listener.exitOpt_else(self)




    def opt_else(self):

        localctx = SQLParser.Opt_elseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_opt_else)
        try:
            self.state = 2208
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.END]:
                self.enterOuterAlt(localctx, 1)

                pass
            elif token in [SQLParser.ELSE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2206
                self.match(SQLParser.ELSE)
                self.state = 2207
                self.expr(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cast_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY(self):
            return self.getToken(SQLParser.BINARY, 0)

        def field_length(self):
            return self.getTypedRuleContext(SQLParser.Field_lengthContext,0)


        def NCHAR(self):
            return self.getToken(SQLParser.NCHAR, 0)

        def CHAR(self):
            return self.getToken(SQLParser.CHAR, 0)

        def opt_charset_with_opt_binary(self):
            return self.getTypedRuleContext(SQLParser.Opt_charset_with_opt_binaryContext,0)


        def VARCHAR(self):
            return self.getToken(SQLParser.VARCHAR, 0)

        def SIGNED(self):
            return self.getToken(SQLParser.SIGNED, 0)

        def INTEGER(self):
            return self.getToken(SQLParser.INTEGER, 0)

        def UNSIGNED(self):
            return self.getToken(SQLParser.UNSIGNED, 0)

        def DECIMAL(self):
            return self.getToken(SQLParser.DECIMAL, 0)

        def opt_float_options(self):
            return self.getTypedRuleContext(SQLParser.Opt_float_optionsContext,0)


        def ident(self):
            return self.getTypedRuleContext(SQLParser.IdentContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_cast_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast_type" ):
                listener.enterCast_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast_type" ):
                listener.exitCast_type(self)




    def cast_type(self):

        localctx = SQLParser.Cast_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_cast_type)
        try:
            self.state = 2227
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2210
                self.match(SQLParser.BINARY)
                self.state = 2211
                self.field_length()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2212
                self.match(SQLParser.NCHAR)
                self.state = 2213
                self.field_length()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2214
                self.match(SQLParser.CHAR)
                self.state = 2215
                self.field_length()
                self.state = 2216
                self.opt_charset_with_opt_binary()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2218
                self.match(SQLParser.VARCHAR)
                self.state = 2219
                self.field_length()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2220
                self.match(SQLParser.SIGNED)
                self.state = 2221
                self.match(SQLParser.INTEGER)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2222
                self.match(SQLParser.UNSIGNED)
                self.state = 2223
                self.match(SQLParser.INTEGER)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2224
                self.match(SQLParser.DECIMAL)
                self.state = 2225
                self.opt_float_options()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2226
                self.ident()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_charset_with_opt_binaryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASCII(self):
            return self.getToken(SQLParser.ASCII, 0)

        def UNICODE(self):
            return self.getToken(SQLParser.UNICODE, 0)

        def character_set(self):
            return self.getTypedRuleContext(SQLParser.Character_setContext,0)


        def charset_name(self):
            return self.getTypedRuleContext(SQLParser.Charset_nameContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_opt_charset_with_opt_binary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_charset_with_opt_binary" ):
                listener.enterOpt_charset_with_opt_binary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_charset_with_opt_binary" ):
                listener.exitOpt_charset_with_opt_binary(self)




    def opt_charset_with_opt_binary(self):

        localctx = SQLParser.Opt_charset_with_opt_binaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_opt_charset_with_opt_binary)
        try:
            self.state = 2235
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2230
                self.match(SQLParser.ASCII)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2231
                self.match(SQLParser.UNICODE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2232
                self.character_set()
                self.state = 2233
                self.charset_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Charset_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY(self):
            return self.getToken(SQLParser.BINARY, 0)

        def charsetNameBase(self):
            return self.getTypedRuleContext(SQLParser.CharsetNameBaseContext,0)


        def string_literal(self):
            return self.getTypedRuleContext(SQLParser.String_literalContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_charset_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharset_name" ):
                listener.enterCharset_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharset_name" ):
                listener.exitCharset_name(self)




    def charset_name(self):

        localctx = SQLParser.Charset_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_charset_name)
        try:
            self.state = 2244
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLParser.BINARY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2237
                self.match(SQLParser.BINARY)
                pass
            elif token in [SQLParser.ARMSCII8, SQLParser.ASCII, SQLParser.BIG5, SQLParser.CP1250, SQLParser.CP1251, SQLParser.CP1256, SQLParser.CP1257, SQLParser.CP850, SQLParser.CP852, SQLParser.CP866, SQLParser.CP932, SQLParser.DEC8, SQLParser.EUCJPMS, SQLParser.EUCKR, SQLParser.GB2312, SQLParser.GBK, SQLParser.GEOSTD8, SQLParser.GREEK, SQLParser.HEBREW, SQLParser.HP8, SQLParser.KEYBCS2, SQLParser.KOI8R, SQLParser.KOI8U, SQLParser.LATIN1, SQLParser.LATIN2, SQLParser.LATIN5, SQLParser.LATIN7, SQLParser.MACCE, SQLParser.MACROMAN, SQLParser.SJIS, SQLParser.SWE7, SQLParser.TIS620, SQLParser.UCS2, SQLParser.UJIS, SQLParser.UTF16, SQLParser.UTF16LE, SQLParser.UTF32, SQLParser.UTF8, SQLParser.UTF8MB3, SQLParser.UTF8MB4]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2238
                self.charsetNameBase()
                pass
            elif token in [SQLParser.QUOTA_STRING, SQLParser.DOUBLE_QUOTA_STRING]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2239
                self.string_literal()
                pass
            elif token in [SQLParser.HYPHEN]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2240
                self.match(SQLParser.HYPHEN)
                self.state = 2241
                self.charsetNameBase()
                self.state = 2242
                self.match(SQLParser.HYPHEN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class String_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTA_STRING(self):
            return self.getToken(SQLParser.QUOTA_STRING, 0)

        def DOUBLE_QUOTA_STRING(self):
            return self.getToken(SQLParser.DOUBLE_QUOTA_STRING, 0)

        def IN(self):
            return self.getToken(SQLParser.IN, 0)

        def BOOLEAN(self):
            return self.getToken(SQLParser.BOOLEAN, 0)

        def MODE(self):
            return self.getToken(SQLParser.MODE, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_literal" ):
                listener.enterString_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_literal" ):
                listener.exitString_literal(self)




    def string_literal(self):

        localctx = SQLParser.String_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_string_literal)
        try:
            self.state = 2256
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2246
                self.match(SQLParser.QUOTA_STRING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2247
                self.match(SQLParser.DOUBLE_QUOTA_STRING)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2248
                self.match(SQLParser.QUOTA_STRING)
                self.state = 2249
                self.match(SQLParser.IN)
                self.state = 2250
                self.match(SQLParser.BOOLEAN)
                self.state = 2251
                self.match(SQLParser.MODE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2252
                self.match(SQLParser.DOUBLE_QUOTA_STRING)
                self.state = 2253
                self.match(SQLParser.IN)
                self.state = 2254
                self.match(SQLParser.BOOLEAN)
                self.state = 2255
                self.match(SQLParser.MODE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CharsetNameBaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARMSCII8(self):
            return self.getToken(SQLParser.ARMSCII8, 0)

        def ASCII(self):
            return self.getToken(SQLParser.ASCII, 0)

        def BIG5(self):
            return self.getToken(SQLParser.BIG5, 0)

        def CP1250(self):
            return self.getToken(SQLParser.CP1250, 0)

        def CP1251(self):
            return self.getToken(SQLParser.CP1251, 0)

        def CP1256(self):
            return self.getToken(SQLParser.CP1256, 0)

        def CP1257(self):
            return self.getToken(SQLParser.CP1257, 0)

        def CP850(self):
            return self.getToken(SQLParser.CP850, 0)

        def CP852(self):
            return self.getToken(SQLParser.CP852, 0)

        def CP866(self):
            return self.getToken(SQLParser.CP866, 0)

        def CP932(self):
            return self.getToken(SQLParser.CP932, 0)

        def DEC8(self):
            return self.getToken(SQLParser.DEC8, 0)

        def EUCJPMS(self):
            return self.getToken(SQLParser.EUCJPMS, 0)

        def EUCKR(self):
            return self.getToken(SQLParser.EUCKR, 0)

        def GB2312(self):
            return self.getToken(SQLParser.GB2312, 0)

        def GBK(self):
            return self.getToken(SQLParser.GBK, 0)

        def GEOSTD8(self):
            return self.getToken(SQLParser.GEOSTD8, 0)

        def GREEK(self):
            return self.getToken(SQLParser.GREEK, 0)

        def HEBREW(self):
            return self.getToken(SQLParser.HEBREW, 0)

        def HP8(self):
            return self.getToken(SQLParser.HP8, 0)

        def KEYBCS2(self):
            return self.getToken(SQLParser.KEYBCS2, 0)

        def KOI8R(self):
            return self.getToken(SQLParser.KOI8R, 0)

        def KOI8U(self):
            return self.getToken(SQLParser.KOI8U, 0)

        def LATIN1(self):
            return self.getToken(SQLParser.LATIN1, 0)

        def LATIN2(self):
            return self.getToken(SQLParser.LATIN2, 0)

        def LATIN5(self):
            return self.getToken(SQLParser.LATIN5, 0)

        def LATIN7(self):
            return self.getToken(SQLParser.LATIN7, 0)

        def MACCE(self):
            return self.getToken(SQLParser.MACCE, 0)

        def MACROMAN(self):
            return self.getToken(SQLParser.MACROMAN, 0)

        def SJIS(self):
            return self.getToken(SQLParser.SJIS, 0)

        def SWE7(self):
            return self.getToken(SQLParser.SWE7, 0)

        def TIS620(self):
            return self.getToken(SQLParser.TIS620, 0)

        def UCS2(self):
            return self.getToken(SQLParser.UCS2, 0)

        def UJIS(self):
            return self.getToken(SQLParser.UJIS, 0)

        def UTF16(self):
            return self.getToken(SQLParser.UTF16, 0)

        def UTF16LE(self):
            return self.getToken(SQLParser.UTF16LE, 0)

        def UTF32(self):
            return self.getToken(SQLParser.UTF32, 0)

        def UTF8(self):
            return self.getToken(SQLParser.UTF8, 0)

        def UTF8MB3(self):
            return self.getToken(SQLParser.UTF8MB3, 0)

        def UTF8MB4(self):
            return self.getToken(SQLParser.UTF8MB4, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_charsetNameBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharsetNameBase" ):
                listener.enterCharsetNameBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharsetNameBase" ):
                listener.exitCharsetNameBase(self)




    def charsetNameBase(self):

        localctx = SQLParser.CharsetNameBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_charsetNameBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2258
            _la = self._input.LA(1)
            if not(((((_la - 159)) & ~0x3f) == 0 and ((1 << (_la - 159)) & ((1 << (SQLParser.ARMSCII8 - 159)) | (1 << (SQLParser.ASCII - 159)) | (1 << (SQLParser.BIG5 - 159)) | (1 << (SQLParser.CP1250 - 159)) | (1 << (SQLParser.CP1251 - 159)) | (1 << (SQLParser.CP1256 - 159)) | (1 << (SQLParser.CP1257 - 159)) | (1 << (SQLParser.CP850 - 159)) | (1 << (SQLParser.CP852 - 159)) | (1 << (SQLParser.CP866 - 159)) | (1 << (SQLParser.CP932 - 159)) | (1 << (SQLParser.DEC8 - 159)) | (1 << (SQLParser.EUCJPMS - 159)) | (1 << (SQLParser.EUCKR - 159)) | (1 << (SQLParser.GB2312 - 159)) | (1 << (SQLParser.GBK - 159)) | (1 << (SQLParser.GEOSTD8 - 159)) | (1 << (SQLParser.GREEK - 159)) | (1 << (SQLParser.HEBREW - 159)) | (1 << (SQLParser.HP8 - 159)) | (1 << (SQLParser.KEYBCS2 - 159)) | (1 << (SQLParser.KOI8R - 159)) | (1 << (SQLParser.KOI8U - 159)) | (1 << (SQLParser.LATIN1 - 159)) | (1 << (SQLParser.LATIN2 - 159)) | (1 << (SQLParser.LATIN5 - 159)) | (1 << (SQLParser.LATIN7 - 159)) | (1 << (SQLParser.MACCE - 159)) | (1 << (SQLParser.MACROMAN - 159)) | (1 << (SQLParser.SJIS - 159)) | (1 << (SQLParser.SWE7 - 159)) | (1 << (SQLParser.TIS620 - 159)) | (1 << (SQLParser.UCS2 - 159)) | (1 << (SQLParser.UJIS - 159)) | (1 << (SQLParser.UTF16 - 159)) | (1 << (SQLParser.UTF16LE - 159)) | (1 << (SQLParser.UTF32 - 159)) | (1 << (SQLParser.UTF8 - 159)) | (1 << (SQLParser.UTF8MB3 - 159)) | (1 << (SQLParser.UTF8MB4 - 159)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Character_setContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR(self):
            return self.getToken(SQLParser.CHAR, 0)

        def SET(self):
            return self.getToken(SQLParser.SET, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_character_set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacter_set" ):
                listener.enterCharacter_set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacter_set" ):
                listener.exitCharacter_set(self)




    def character_set(self):

        localctx = SQLParser.Character_setContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_character_set)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2260
            self.match(SQLParser.CHAR)
            self.state = 2261
            self.match(SQLParser.SET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrecisionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUM(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.NUM)
            else:
                return self.getToken(SQLParser.NUM, i)

        def COMMA(self):
            return self.getToken(SQLParser.COMMA, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_precision

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecision" ):
                listener.enterPrecision(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecision" ):
                listener.exitPrecision(self)




    def precision(self):

        localctx = SQLParser.PrecisionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_precision)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2263
            self.match(SQLParser.LR_BRACKET)
            self.state = 2264
            self.match(SQLParser.NUM)
            self.state = 2265
            self.match(SQLParser.COMMA)
            self.state = 2266
            self.match(SQLParser.NUM)
            self.state = 2267
            self.match(SQLParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_lengthContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUM(self):
            return self.getToken(SQLParser.NUM, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_field_length

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_length" ):
                listener.enterField_length(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_length" ):
                listener.exitField_length(self)




    def field_length(self):

        localctx = SQLParser.Field_lengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_field_length)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2269
            self.match(SQLParser.LR_BRACKET)
            self.state = 2270
            self.match(SQLParser.NUM)
            self.state = 2271
            self.match(SQLParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Opt_float_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field_length(self):
            return self.getTypedRuleContext(SQLParser.Field_lengthContext,0)


        def precision(self):
            return self.getTypedRuleContext(SQLParser.PrecisionContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_opt_float_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_float_options" ):
                listener.enterOpt_float_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_float_options" ):
                listener.exitOpt_float_options(self)




    def opt_float_options(self):

        localctx = SQLParser.Opt_float_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_opt_float_options)
        try:
            self.state = 2276
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2274
                self.field_length()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2275
                self.precision()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[6] = self.query_expression_body_sempred
        self._predicates[24] = self.group_list_sempred
        self._predicates[25] = self.order_list_sempred
        self._predicates[30] = self.select_item_list_sempred
        self._predicates[39] = self.field_term_list_sempred
        self._predicates[42] = self.line_term_list_sempred
        self._predicates[44] = self.select_var_list_sempred
        self._predicates[47] = self.column_list_sempred
        self._predicates[48] = self.select_opts_sempred
        self._predicates[54] = self.table_reference_list_sempred
        self._predicates[60] = self.index_hints_list_sempred
        self._predicates[64] = self.joined_table_sempred
        self._predicates[75] = self.index_list_sempred
        self._predicates[78] = self.delete_opts_sempred
        self._predicates[79] = self.delete_list_sempred
        self._predicates[84] = self.insert_opts_sempred
        self._predicates[87] = self.insert_vals_list_sempred
        self._predicates[88] = self.insert_vals_sempred
        self._predicates[89] = self.insert_asgn_list_sempred
        self._predicates[93] = self.update_asgn_list_sempred
        self._predicates[97] = self.create_col_list_sempred
        self._predicates[99] = self.column_atts_sempred
        self._predicates[102] = self.opt_uz_sempred
        self._predicates[103] = self.opt_csc_sempred
        self._predicates[105] = self.enum_list_sempred
        self._predicates[110] = self.set_list_sempred
        self._predicates[112] = self.expr_list_sempred
        self._predicates[114] = self.udf_expr_list_sempred
        self._predicates[117] = self.expr_sempred
        self._predicates[118] = self.predicate_sempred
        self._predicates[120] = self.expressionAtom_sempred
        self._predicates[127] = self.string_literal_list_sempred
        self._predicates[138] = self.when_list_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def query_expression_body_sempred(self, localctx:Query_expression_bodyContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

    def group_list_sempred(self, localctx:Group_listContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 2)
         

    def order_list_sempred(self, localctx:Order_listContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

    def select_item_list_sempred(self, localctx:Select_item_listContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 3)
         

    def field_term_list_sempred(self, localctx:Field_term_listContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         

    def line_term_list_sempred(self, localctx:Line_term_listContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 2)
         

    def select_var_list_sempred(self, localctx:Select_var_listContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

    def column_list_sempred(self, localctx:Column_listContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 1)
         

    def select_opts_sempred(self, localctx:Select_optsContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 1)
         

    def table_reference_list_sempred(self, localctx:Table_reference_listContext, predIndex:int):
            if predIndex == 16:
                return self.precpred(self._ctx, 1)
         

    def index_hints_list_sempred(self, localctx:Index_hints_listContext, predIndex:int):
            if predIndex == 17:
                return self.precpred(self._ctx, 1)
         

    def joined_table_sempred(self, localctx:Joined_tableContext, predIndex:int):
            if predIndex == 18:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 20:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 21:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 22:
                return self.precpred(self._ctx, 6)
         

    def index_list_sempred(self, localctx:Index_listContext, predIndex:int):
            if predIndex == 23:
                return self.precpred(self._ctx, 1)
         

    def delete_opts_sempred(self, localctx:Delete_optsContext, predIndex:int):
            if predIndex == 24:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 25:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 26:
                return self.precpred(self._ctx, 2)
         

    def delete_list_sempred(self, localctx:Delete_listContext, predIndex:int):
            if predIndex == 27:
                return self.precpred(self._ctx, 1)
         

    def insert_opts_sempred(self, localctx:Insert_optsContext, predIndex:int):
            if predIndex == 28:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 29:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 30:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 31:
                return self.precpred(self._ctx, 1)
         

    def insert_vals_list_sempred(self, localctx:Insert_vals_listContext, predIndex:int):
            if predIndex == 32:
                return self.precpred(self._ctx, 1)
         

    def insert_vals_sempred(self, localctx:Insert_valsContext, predIndex:int):
            if predIndex == 33:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 34:
                return self.precpred(self._ctx, 1)
         

    def insert_asgn_list_sempred(self, localctx:Insert_asgn_listContext, predIndex:int):
            if predIndex == 35:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 36:
                return self.precpred(self._ctx, 1)
         

    def update_asgn_list_sempred(self, localctx:Update_asgn_listContext, predIndex:int):
            if predIndex == 37:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 38:
                return self.precpred(self._ctx, 1)
         

    def create_col_list_sempred(self, localctx:Create_col_listContext, predIndex:int):
            if predIndex == 39:
                return self.precpred(self._ctx, 1)
         

    def column_atts_sempred(self, localctx:Column_attsContext, predIndex:int):
            if predIndex == 40:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 41:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 42:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 43:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 44:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 45:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 46:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 47:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 48:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 49:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 50:
                return self.precpred(self._ctx, 1)
         

    def opt_uz_sempred(self, localctx:Opt_uzContext, predIndex:int):
            if predIndex == 51:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 52:
                return self.precpred(self._ctx, 1)
         

    def opt_csc_sempred(self, localctx:Opt_cscContext, predIndex:int):
            if predIndex == 53:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 54:
                return self.precpred(self._ctx, 1)
         

    def enum_list_sempred(self, localctx:Enum_listContext, predIndex:int):
            if predIndex == 55:
                return self.precpred(self._ctx, 1)
         

    def set_list_sempred(self, localctx:Set_listContext, predIndex:int):
            if predIndex == 56:
                return self.precpred(self._ctx, 1)
         

    def expr_list_sempred(self, localctx:Expr_listContext, predIndex:int):
            if predIndex == 57:
                return self.precpred(self._ctx, 1)
         

    def udf_expr_list_sempred(self, localctx:Udf_expr_listContext, predIndex:int):
            if predIndex == 58:
                return self.precpred(self._ctx, 1)
         

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 59:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 60:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 61:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 62:
                return self.precpred(self._ctx, 4)
         

    def predicate_sempred(self, localctx:PredicateContext, predIndex:int):
            if predIndex == 63:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 64:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 65:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 66:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 67:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 68:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 69:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 70:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 71:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 72:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 73:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 74:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 75:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 76:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 77:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 78:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 79:
                return self.precpred(self._ctx, 5)
         

    def expressionAtom_sempred(self, localctx:ExpressionAtomContext, predIndex:int):
            if predIndex == 80:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 81:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 82:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 83:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 84:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 85:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 86:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 87:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 88:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 89:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 90:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 91:
                return self.precpred(self._ctx, 20)
         

    def string_literal_list_sempred(self, localctx:String_literal_listContext, predIndex:int):
            if predIndex == 92:
                return self.precpred(self._ctx, 2)
         

    def when_list_sempred(self, localctx:When_listContext, predIndex:int):
            if predIndex == 93:
                return self.precpred(self._ctx, 1)
         




